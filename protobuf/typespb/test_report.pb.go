// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.30.2
// source: gitlabexporter/protobuf/test_report.proto

package typespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Job           *JobReference          `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	TotalTime     float64                `protobuf:"fixed64,3,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	TotalCount    int64                  `protobuf:"varint,4,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	SuccessCount  int64                  `protobuf:"varint,5,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	FailedCount   int64                  `protobuf:"varint,6,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	SkippedCount  int64                  `protobuf:"varint,7,opt,name=skipped_count,json=skippedCount,proto3" json:"skipped_count,omitempty"`
	ErrorCount    int64                  `protobuf:"varint,8,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestReport) Reset() {
	*x = TestReport{}
	mi := &file_gitlabexporter_protobuf_test_report_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReport) ProtoMessage() {}

func (x *TestReport) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_test_report_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReport.ProtoReflect.Descriptor instead.
func (*TestReport) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_test_report_proto_rawDescGZIP(), []int{0}
}

func (x *TestReport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestReport) GetJob() *JobReference {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *TestReport) GetTotalTime() float64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *TestReport) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *TestReport) GetSuccessCount() int64 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *TestReport) GetFailedCount() int64 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *TestReport) GetSkippedCount() int64 {
	if x != nil {
		return x.SkippedCount
	}
	return 0
}

func (x *TestReport) GetErrorCount() int64 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

type TestSuite struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestReport    *TestReportReference   `protobuf:"bytes,2,opt,name=test_report,json=testReport,proto3" json:"test_report,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TotalTime     float64                `protobuf:"fixed64,4,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	TotalCount    int64                  `protobuf:"varint,5,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	ErrorCount    int64                  `protobuf:"varint,6,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	SkippedCount  int64                  `protobuf:"varint,7,opt,name=skipped_count,json=skippedCount,proto3" json:"skipped_count,omitempty"`
	FailedCount   int64                  `protobuf:"varint,8,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`
	SuccessCount  int64                  `protobuf:"varint,9,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	Properties    []*TestProperty        `protobuf:"bytes,10,rep,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestSuite) Reset() {
	*x = TestSuite{}
	mi := &file_gitlabexporter_protobuf_test_report_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSuite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuite) ProtoMessage() {}

func (x *TestSuite) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_test_report_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuite.ProtoReflect.Descriptor instead.
func (*TestSuite) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_test_report_proto_rawDescGZIP(), []int{1}
}

func (x *TestSuite) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestSuite) GetTestReport() *TestReportReference {
	if x != nil {
		return x.TestReport
	}
	return nil
}

func (x *TestSuite) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestSuite) GetTotalTime() float64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *TestSuite) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *TestSuite) GetErrorCount() int64 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *TestSuite) GetSkippedCount() int64 {
	if x != nil {
		return x.SkippedCount
	}
	return 0
}

func (x *TestSuite) GetFailedCount() int64 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *TestSuite) GetSuccessCount() int64 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *TestSuite) GetProperties() []*TestProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

type TestCase struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestSuite     *TestSuiteReference    `protobuf:"bytes,2,opt,name=test_suite,json=testSuite,proto3" json:"test_suite,omitempty"`
	Status        string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Name          string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Classname     string                 `protobuf:"bytes,6,opt,name=classname,proto3" json:"classname,omitempty"`
	File          string                 `protobuf:"bytes,7,opt,name=file,proto3" json:"file,omitempty"`
	ExecutionTime float64                `protobuf:"fixed64,8,opt,name=execution_time,json=executionTime,proto3" json:"execution_time,omitempty"`
	SystemOutput  string                 `protobuf:"bytes,9,opt,name=system_output,json=systemOutput,proto3" json:"system_output,omitempty"`
	StackTrace    string                 `protobuf:"bytes,10,opt,name=stack_trace,json=stackTrace,proto3" json:"stack_trace,omitempty"`
	AttachmentUrl string                 `protobuf:"bytes,11,opt,name=attachment_url,json=attachmentUrl,proto3" json:"attachment_url,omitempty"`
	Properties    []*TestProperty        `protobuf:"bytes,12,rep,name=properties,proto3" json:"properties,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestCase) Reset() {
	*x = TestCase{}
	mi := &file_gitlabexporter_protobuf_test_report_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCase) ProtoMessage() {}

func (x *TestCase) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_test_report_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCase.ProtoReflect.Descriptor instead.
func (*TestCase) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_test_report_proto_rawDescGZIP(), []int{2}
}

func (x *TestCase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestCase) GetTestSuite() *TestSuiteReference {
	if x != nil {
		return x.TestSuite
	}
	return nil
}

func (x *TestCase) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TestCase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestCase) GetClassname() string {
	if x != nil {
		return x.Classname
	}
	return ""
}

func (x *TestCase) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *TestCase) GetExecutionTime() float64 {
	if x != nil {
		return x.ExecutionTime
	}
	return 0
}

func (x *TestCase) GetSystemOutput() string {
	if x != nil {
		return x.SystemOutput
	}
	return ""
}

func (x *TestCase) GetStackTrace() string {
	if x != nil {
		return x.StackTrace
	}
	return ""
}

func (x *TestCase) GetAttachmentUrl() string {
	if x != nil {
		return x.AttachmentUrl
	}
	return ""
}

func (x *TestCase) GetProperties() []*TestProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

type TestProperty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestProperty) Reset() {
	*x = TestProperty{}
	mi := &file_gitlabexporter_protobuf_test_report_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestProperty) ProtoMessage() {}

func (x *TestProperty) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_test_report_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestProperty.ProtoReflect.Descriptor instead.
func (*TestProperty) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_test_report_proto_rawDescGZIP(), []int{3}
}

func (x *TestProperty) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestProperty) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_gitlabexporter_protobuf_test_report_proto protoreflect.FileDescriptor

const file_gitlabexporter_protobuf_test_report_proto_rawDesc = "" +
	"\n" +
	")gitlabexporter/protobuf/test_report.proto\x12\x17gitlabexporter.protobuf\x1a(gitlabexporter/protobuf/references.proto\"\xa3\x02\n" +
	"\n" +
	"TestReport\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x127\n" +
	"\x03job\x18\x02 \x01(\v2%.gitlabexporter.protobuf.JobReferenceR\x03job\x12\x1d\n" +
	"\n" +
	"total_time\x18\x03 \x01(\x01R\ttotalTime\x12\x1f\n" +
	"\vtotal_count\x18\x04 \x01(\x03R\n" +
	"totalCount\x12#\n" +
	"\rsuccess_count\x18\x05 \x01(\x03R\fsuccessCount\x12!\n" +
	"\ffailed_count\x18\x06 \x01(\x03R\vfailedCount\x12#\n" +
	"\rskipped_count\x18\a \x01(\x03R\fskippedCount\x12\x1f\n" +
	"\verror_count\x18\b \x01(\x03R\n" +
	"errorCount\"\x93\x03\n" +
	"\tTestSuite\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12M\n" +
	"\vtest_report\x18\x02 \x01(\v2,.gitlabexporter.protobuf.TestReportReferenceR\n" +
	"testReport\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"total_time\x18\x04 \x01(\x01R\ttotalTime\x12\x1f\n" +
	"\vtotal_count\x18\x05 \x01(\x03R\n" +
	"totalCount\x12\x1f\n" +
	"\verror_count\x18\x06 \x01(\x03R\n" +
	"errorCount\x12#\n" +
	"\rskipped_count\x18\a \x01(\x03R\fskippedCount\x12!\n" +
	"\ffailed_count\x18\b \x01(\x03R\vfailedCount\x12#\n" +
	"\rsuccess_count\x18\t \x01(\x03R\fsuccessCount\x12E\n" +
	"\n" +
	"properties\x18\n" +
	" \x03(\v2%.gitlabexporter.protobuf.TestPropertyR\n" +
	"properties\"\x9f\x03\n" +
	"\bTestCase\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12J\n" +
	"\n" +
	"test_suite\x18\x02 \x01(\v2+.gitlabexporter.protobuf.TestSuiteReferenceR\ttestSuite\x12\x16\n" +
	"\x06status\x18\x04 \x01(\tR\x06status\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12\x1c\n" +
	"\tclassname\x18\x06 \x01(\tR\tclassname\x12\x12\n" +
	"\x04file\x18\a \x01(\tR\x04file\x12%\n" +
	"\x0eexecution_time\x18\b \x01(\x01R\rexecutionTime\x12#\n" +
	"\rsystem_output\x18\t \x01(\tR\fsystemOutput\x12\x1f\n" +
	"\vstack_trace\x18\n" +
	" \x01(\tR\n" +
	"stackTrace\x12%\n" +
	"\x0eattachment_url\x18\v \x01(\tR\rattachmentUrl\x12E\n" +
	"\n" +
	"properties\x18\f \x03(\v2%.gitlabexporter.protobuf.TestPropertyR\n" +
	"properties\"8\n" +
	"\fTestProperty\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05valueB0Z.go.cluttr.dev/gitlab-exporter/protobuf/typespbb\x06proto3"

var (
	file_gitlabexporter_protobuf_test_report_proto_rawDescOnce sync.Once
	file_gitlabexporter_protobuf_test_report_proto_rawDescData []byte
)

func file_gitlabexporter_protobuf_test_report_proto_rawDescGZIP() []byte {
	file_gitlabexporter_protobuf_test_report_proto_rawDescOnce.Do(func() {
		file_gitlabexporter_protobuf_test_report_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_test_report_proto_rawDesc), len(file_gitlabexporter_protobuf_test_report_proto_rawDesc)))
	})
	return file_gitlabexporter_protobuf_test_report_proto_rawDescData
}

var file_gitlabexporter_protobuf_test_report_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_gitlabexporter_protobuf_test_report_proto_goTypes = []any{
	(*TestReport)(nil),          // 0: gitlabexporter.protobuf.TestReport
	(*TestSuite)(nil),           // 1: gitlabexporter.protobuf.TestSuite
	(*TestCase)(nil),            // 2: gitlabexporter.protobuf.TestCase
	(*TestProperty)(nil),        // 3: gitlabexporter.protobuf.TestProperty
	(*JobReference)(nil),        // 4: gitlabexporter.protobuf.JobReference
	(*TestReportReference)(nil), // 5: gitlabexporter.protobuf.TestReportReference
	(*TestSuiteReference)(nil),  // 6: gitlabexporter.protobuf.TestSuiteReference
}
var file_gitlabexporter_protobuf_test_report_proto_depIdxs = []int32{
	4, // 0: gitlabexporter.protobuf.TestReport.job:type_name -> gitlabexporter.protobuf.JobReference
	5, // 1: gitlabexporter.protobuf.TestSuite.test_report:type_name -> gitlabexporter.protobuf.TestReportReference
	3, // 2: gitlabexporter.protobuf.TestSuite.properties:type_name -> gitlabexporter.protobuf.TestProperty
	6, // 3: gitlabexporter.protobuf.TestCase.test_suite:type_name -> gitlabexporter.protobuf.TestSuiteReference
	3, // 4: gitlabexporter.protobuf.TestCase.properties:type_name -> gitlabexporter.protobuf.TestProperty
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_gitlabexporter_protobuf_test_report_proto_init() }
func file_gitlabexporter_protobuf_test_report_proto_init() {
	if File_gitlabexporter_protobuf_test_report_proto != nil {
		return
	}
	file_gitlabexporter_protobuf_references_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_test_report_proto_rawDesc), len(file_gitlabexporter_protobuf_test_report_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitlabexporter_protobuf_test_report_proto_goTypes,
		DependencyIndexes: file_gitlabexporter_protobuf_test_report_proto_depIdxs,
		MessageInfos:      file_gitlabexporter_protobuf_test_report_proto_msgTypes,
	}.Build()
	File_gitlabexporter_protobuf_test_report_proto = out.File
	file_gitlabexporter_protobuf_test_report_proto_goTypes = nil
	file_gitlabexporter_protobuf_test_report_proto_depIdxs = nil
}
