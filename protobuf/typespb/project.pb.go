// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.30.2
// source: gitlabexporter/protobuf/project.proto

package typespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Project struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Namespace     *NamespaceReference    `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	FullName      string                 `protobuf:"bytes,4,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Path          string                 `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	FullPath      string                 `protobuf:"bytes,6,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
	Description   string                 `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	Timestamps    *ProjectTimestamps     `protobuf:"bytes,8,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	Statistics    *ProjectStatistics     `protobuf:"bytes,9,opt,name=statistics,proto3" json:"statistics,omitempty"`
	Archived      bool                   `protobuf:"varint,10,opt,name=archived,proto3" json:"archived,omitempty"`
	Visibility    string                 `protobuf:"bytes,11,opt,name=visibility,proto3" json:"visibility,omitempty"`
	DefaultBranch string                 `protobuf:"bytes,12,opt,name=default_branch,json=defaultBranch,proto3" json:"default_branch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Project) Reset() {
	*x = Project{}
	mi := &file_gitlabexporter_protobuf_project_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_project_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_project_proto_rawDescGZIP(), []int{0}
}

func (x *Project) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Project) GetNamespace() *NamespaceReference {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Project) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Project) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

func (x *Project) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Project) GetTimestamps() *ProjectTimestamps {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *Project) GetStatistics() *ProjectStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Project) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *Project) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *Project) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

type ProjectTimestamps struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LastActivityAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_activity_at,json=lastActivityAt,proto3" json:"last_activity_at,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ProjectTimestamps) Reset() {
	*x = ProjectTimestamps{}
	mi := &file_gitlabexporter_protobuf_project_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectTimestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectTimestamps) ProtoMessage() {}

func (x *ProjectTimestamps) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_project_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectTimestamps.ProtoReflect.Descriptor instead.
func (*ProjectTimestamps) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_project_proto_rawDescGZIP(), []int{1}
}

func (x *ProjectTimestamps) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProjectTimestamps) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ProjectTimestamps) GetLastActivityAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivityAt
	}
	return nil
}

type ProjectStatistics struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	JobArtifactsSize      int64                  `protobuf:"varint,1,opt,name=job_artifacts_size,json=jobArtifactsSize,proto3" json:"job_artifacts_size,omitempty"`
	ContainerRegistrySize int64                  `protobuf:"varint,2,opt,name=container_registry_size,json=containerRegistrySize,proto3" json:"container_registry_size,omitempty"`
	LfsObjectsSize        int64                  `protobuf:"varint,3,opt,name=lfs_objects_size,json=lfsObjectsSize,proto3" json:"lfs_objects_size,omitempty"`
	PackagesSize          int64                  `protobuf:"varint,4,opt,name=packages_size,json=packagesSize,proto3" json:"packages_size,omitempty"`
	PipelineArtifactsSize int64                  `protobuf:"varint,5,opt,name=pipeline_artifacts_size,json=pipelineArtifactsSize,proto3" json:"pipeline_artifacts_size,omitempty"`
	RepositorySize        int64                  `protobuf:"varint,6,opt,name=repository_size,json=repositorySize,proto3" json:"repository_size,omitempty"`
	SnippetsSize          int64                  `protobuf:"varint,7,opt,name=snippets_size,json=snippetsSize,proto3" json:"snippets_size,omitempty"`
	StorageSize           int64                  `protobuf:"varint,8,opt,name=storage_size,json=storageSize,proto3" json:"storage_size,omitempty"`
	UploadsSize           int64                  `protobuf:"varint,9,opt,name=uploads_size,json=uploadsSize,proto3" json:"uploads_size,omitempty"`
	WikiSize              int64                  `protobuf:"varint,10,opt,name=wiki_size,json=wikiSize,proto3" json:"wiki_size,omitempty"`
	ForksCount            int64                  `protobuf:"varint,11,opt,name=forks_count,json=forksCount,proto3" json:"forks_count,omitempty"`
	StarsCount            int64                  `protobuf:"varint,12,opt,name=stars_count,json=starsCount,proto3" json:"stars_count,omitempty"`
	CommitCount           int64                  `protobuf:"varint,13,opt,name=commit_count,json=commitCount,proto3" json:"commit_count,omitempty"`
	OpenIssuesCount       int64                  `protobuf:"varint,14,opt,name=open_issues_count,json=openIssuesCount,proto3" json:"open_issues_count,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ProjectStatistics) Reset() {
	*x = ProjectStatistics{}
	mi := &file_gitlabexporter_protobuf_project_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectStatistics) ProtoMessage() {}

func (x *ProjectStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_project_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectStatistics.ProtoReflect.Descriptor instead.
func (*ProjectStatistics) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_project_proto_rawDescGZIP(), []int{2}
}

func (x *ProjectStatistics) GetJobArtifactsSize() int64 {
	if x != nil {
		return x.JobArtifactsSize
	}
	return 0
}

func (x *ProjectStatistics) GetContainerRegistrySize() int64 {
	if x != nil {
		return x.ContainerRegistrySize
	}
	return 0
}

func (x *ProjectStatistics) GetLfsObjectsSize() int64 {
	if x != nil {
		return x.LfsObjectsSize
	}
	return 0
}

func (x *ProjectStatistics) GetPackagesSize() int64 {
	if x != nil {
		return x.PackagesSize
	}
	return 0
}

func (x *ProjectStatistics) GetPipelineArtifactsSize() int64 {
	if x != nil {
		return x.PipelineArtifactsSize
	}
	return 0
}

func (x *ProjectStatistics) GetRepositorySize() int64 {
	if x != nil {
		return x.RepositorySize
	}
	return 0
}

func (x *ProjectStatistics) GetSnippetsSize() int64 {
	if x != nil {
		return x.SnippetsSize
	}
	return 0
}

func (x *ProjectStatistics) GetStorageSize() int64 {
	if x != nil {
		return x.StorageSize
	}
	return 0
}

func (x *ProjectStatistics) GetUploadsSize() int64 {
	if x != nil {
		return x.UploadsSize
	}
	return 0
}

func (x *ProjectStatistics) GetWikiSize() int64 {
	if x != nil {
		return x.WikiSize
	}
	return 0
}

func (x *ProjectStatistics) GetForksCount() int64 {
	if x != nil {
		return x.ForksCount
	}
	return 0
}

func (x *ProjectStatistics) GetStarsCount() int64 {
	if x != nil {
		return x.StarsCount
	}
	return 0
}

func (x *ProjectStatistics) GetCommitCount() int64 {
	if x != nil {
		return x.CommitCount
	}
	return 0
}

func (x *ProjectStatistics) GetOpenIssuesCount() int64 {
	if x != nil {
		return x.OpenIssuesCount
	}
	return 0
}

var File_gitlabexporter_protobuf_project_proto protoreflect.FileDescriptor

const file_gitlabexporter_protobuf_project_proto_rawDesc = "" +
	"\n" +
	"%gitlabexporter/protobuf/project.proto\x12\x17gitlabexporter.protobuf\x1a\x1fgoogle/protobuf/timestamp.proto\x1a(gitlabexporter/protobuf/references.proto\"\xe3\x03\n" +
	"\aProject\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12I\n" +
	"\tnamespace\x18\x02 \x01(\v2+.gitlabexporter.protobuf.NamespaceReferenceR\tnamespace\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1b\n" +
	"\tfull_name\x18\x04 \x01(\tR\bfullName\x12\x12\n" +
	"\x04path\x18\x05 \x01(\tR\x04path\x12\x1b\n" +
	"\tfull_path\x18\x06 \x01(\tR\bfullPath\x12 \n" +
	"\vdescription\x18\a \x01(\tR\vdescription\x12J\n" +
	"\n" +
	"timestamps\x18\b \x01(\v2*.gitlabexporter.protobuf.ProjectTimestampsR\n" +
	"timestamps\x12J\n" +
	"\n" +
	"statistics\x18\t \x01(\v2*.gitlabexporter.protobuf.ProjectStatisticsR\n" +
	"statistics\x12\x1a\n" +
	"\barchived\x18\n" +
	" \x01(\bR\barchived\x12\x1e\n" +
	"\n" +
	"visibility\x18\v \x01(\tR\n" +
	"visibility\x12%\n" +
	"\x0edefault_branch\x18\f \x01(\tR\rdefaultBranch\"\xcf\x01\n" +
	"\x11ProjectTimestamps\x129\n" +
	"\n" +
	"created_at\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12D\n" +
	"\x10last_activity_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x0elastActivityAt\"\xc2\x04\n" +
	"\x11ProjectStatistics\x12,\n" +
	"\x12job_artifacts_size\x18\x01 \x01(\x03R\x10jobArtifactsSize\x126\n" +
	"\x17container_registry_size\x18\x02 \x01(\x03R\x15containerRegistrySize\x12(\n" +
	"\x10lfs_objects_size\x18\x03 \x01(\x03R\x0elfsObjectsSize\x12#\n" +
	"\rpackages_size\x18\x04 \x01(\x03R\fpackagesSize\x126\n" +
	"\x17pipeline_artifacts_size\x18\x05 \x01(\x03R\x15pipelineArtifactsSize\x12'\n" +
	"\x0frepository_size\x18\x06 \x01(\x03R\x0erepositorySize\x12#\n" +
	"\rsnippets_size\x18\a \x01(\x03R\fsnippetsSize\x12!\n" +
	"\fstorage_size\x18\b \x01(\x03R\vstorageSize\x12!\n" +
	"\fuploads_size\x18\t \x01(\x03R\vuploadsSize\x12\x1b\n" +
	"\twiki_size\x18\n" +
	" \x01(\x03R\bwikiSize\x12\x1f\n" +
	"\vforks_count\x18\v \x01(\x03R\n" +
	"forksCount\x12\x1f\n" +
	"\vstars_count\x18\f \x01(\x03R\n" +
	"starsCount\x12!\n" +
	"\fcommit_count\x18\r \x01(\x03R\vcommitCount\x12*\n" +
	"\x11open_issues_count\x18\x0e \x01(\x03R\x0fopenIssuesCountB0Z.go.cluttr.dev/gitlab-exporter/protobuf/typespbb\x06proto3"

var (
	file_gitlabexporter_protobuf_project_proto_rawDescOnce sync.Once
	file_gitlabexporter_protobuf_project_proto_rawDescData []byte
)

func file_gitlabexporter_protobuf_project_proto_rawDescGZIP() []byte {
	file_gitlabexporter_protobuf_project_proto_rawDescOnce.Do(func() {
		file_gitlabexporter_protobuf_project_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_project_proto_rawDesc), len(file_gitlabexporter_protobuf_project_proto_rawDesc)))
	})
	return file_gitlabexporter_protobuf_project_proto_rawDescData
}

var file_gitlabexporter_protobuf_project_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_gitlabexporter_protobuf_project_proto_goTypes = []any{
	(*Project)(nil),               // 0: gitlabexporter.protobuf.Project
	(*ProjectTimestamps)(nil),     // 1: gitlabexporter.protobuf.ProjectTimestamps
	(*ProjectStatistics)(nil),     // 2: gitlabexporter.protobuf.ProjectStatistics
	(*NamespaceReference)(nil),    // 3: gitlabexporter.protobuf.NamespaceReference
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_gitlabexporter_protobuf_project_proto_depIdxs = []int32{
	3, // 0: gitlabexporter.protobuf.Project.namespace:type_name -> gitlabexporter.protobuf.NamespaceReference
	1, // 1: gitlabexporter.protobuf.Project.timestamps:type_name -> gitlabexporter.protobuf.ProjectTimestamps
	2, // 2: gitlabexporter.protobuf.Project.statistics:type_name -> gitlabexporter.protobuf.ProjectStatistics
	4, // 3: gitlabexporter.protobuf.ProjectTimestamps.created_at:type_name -> google.protobuf.Timestamp
	4, // 4: gitlabexporter.protobuf.ProjectTimestamps.updated_at:type_name -> google.protobuf.Timestamp
	4, // 5: gitlabexporter.protobuf.ProjectTimestamps.last_activity_at:type_name -> google.protobuf.Timestamp
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_gitlabexporter_protobuf_project_proto_init() }
func file_gitlabexporter_protobuf_project_proto_init() {
	if File_gitlabexporter_protobuf_project_proto != nil {
		return
	}
	file_gitlabexporter_protobuf_references_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_project_proto_rawDesc), len(file_gitlabexporter_protobuf_project_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitlabexporter_protobuf_project_proto_goTypes,
		DependencyIndexes: file_gitlabexporter_protobuf_project_proto_depIdxs,
		MessageInfos:      file_gitlabexporter_protobuf_project_proto_msgTypes,
	}.Build()
	File_gitlabexporter_protobuf_project_proto = out.File
	file_gitlabexporter_protobuf_project_proto_goTypes = nil
	file_gitlabexporter_protobuf_project_proto_depIdxs = nil
}
