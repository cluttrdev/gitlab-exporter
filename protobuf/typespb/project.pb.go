// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: gitlabexporter/protobuf/project.proto

package typespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NameWithNamespace string                 `protobuf:"bytes,3,opt,name=name_with_namespace,json=nameWithNamespace,proto3" json:"name_with_namespace,omitempty"`
	Path              string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	PathWithNamespace string                 `protobuf:"bytes,5,opt,name=path_with_namespace,json=pathWithNamespace,proto3" json:"path_with_namespace,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastActivityAt    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_activity_at,json=lastActivityAt,proto3" json:"last_activity_at,omitempty"`
	Namespace         *ProjectNamespace      `protobuf:"bytes,9,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Owner             *User                  `protobuf:"bytes,10,opt,name=owner,proto3" json:"owner,omitempty"`
	CreatorId         int64                  `protobuf:"varint,11,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	Topics            []string               `protobuf:"bytes,12,rep,name=topics,proto3" json:"topics,omitempty"`
	ForksCount        int64                  `protobuf:"varint,13,opt,name=forks_count,json=forksCount,proto3" json:"forks_count,omitempty"`
	StarsCount        int64                  `protobuf:"varint,14,opt,name=stars_count,json=starsCount,proto3" json:"stars_count,omitempty"`
	Statistics        *ProjectStatistics     `protobuf:"bytes,15,opt,name=statistics,proto3" json:"statistics,omitempty"`
	OpenIssuesCount   int64                  `protobuf:"varint,16,opt,name=open_issues_count,json=openIssuesCount,proto3" json:"open_issues_count,omitempty"`
	Description       string                 `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	EmptyRepo         bool                   `protobuf:"varint,18,opt,name=empty_repo,json=emptyRepo,proto3" json:"empty_repo,omitempty"`
	Archived          bool                   `protobuf:"varint,19,opt,name=archived,proto3" json:"archived,omitempty"`
	DefaultBranch     string                 `protobuf:"bytes,20,opt,name=default_branch,json=defaultBranch,proto3" json:"default_branch,omitempty"`
	Visibility        string                 `protobuf:"bytes,21,opt,name=visibility,proto3" json:"visibility,omitempty"`
	WebUrl            string                 `protobuf:"bytes,22,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlabexporter_protobuf_project_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_project_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_project_proto_rawDescGZIP(), []int{0}
}

func (x *Project) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetNameWithNamespace() string {
	if x != nil {
		return x.NameWithNamespace
	}
	return ""
}

func (x *Project) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Project) GetPathWithNamespace() string {
	if x != nil {
		return x.PathWithNamespace
	}
	return ""
}

func (x *Project) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Project) GetLastActivityAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastActivityAt
	}
	return nil
}

func (x *Project) GetNamespace() *ProjectNamespace {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Project) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Project) GetCreatorId() int64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *Project) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Project) GetForksCount() int64 {
	if x != nil {
		return x.ForksCount
	}
	return 0
}

func (x *Project) GetStarsCount() int64 {
	if x != nil {
		return x.StarsCount
	}
	return 0
}

func (x *Project) GetStatistics() *ProjectStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *Project) GetOpenIssuesCount() int64 {
	if x != nil {
		return x.OpenIssuesCount
	}
	return 0
}

func (x *Project) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Project) GetEmptyRepo() bool {
	if x != nil {
		return x.EmptyRepo
	}
	return false
}

func (x *Project) GetArchived() bool {
	if x != nil {
		return x.Archived
	}
	return false
}

func (x *Project) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

func (x *Project) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *Project) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

type ProjectNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Kind      string `protobuf:"bytes,3,opt,name=kind,proto3" json:"kind,omitempty"`
	Path      string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	FullPath  string `protobuf:"bytes,5,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
	ParentId  int64  `protobuf:"varint,6,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	AvatarUrl string `protobuf:"bytes,7,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	WebUrl    string `protobuf:"bytes,8,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
}

func (x *ProjectNamespace) Reset() {
	*x = ProjectNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlabexporter_protobuf_project_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectNamespace) ProtoMessage() {}

func (x *ProjectNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_project_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectNamespace.ProtoReflect.Descriptor instead.
func (*ProjectNamespace) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_project_proto_rawDescGZIP(), []int{1}
}

func (x *ProjectNamespace) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProjectNamespace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectNamespace) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ProjectNamespace) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ProjectNamespace) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

func (x *ProjectNamespace) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *ProjectNamespace) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *ProjectNamespace) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

type ProjectStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitCount           int64 `protobuf:"varint,1,opt,name=commit_count,json=commitCount,proto3" json:"commit_count,omitempty"`
	StorageSize           int64 `protobuf:"varint,2,opt,name=storage_size,json=storageSize,proto3" json:"storage_size,omitempty"`
	RepositorySize        int64 `protobuf:"varint,3,opt,name=repository_size,json=repositorySize,proto3" json:"repository_size,omitempty"`
	WikiSize              int64 `protobuf:"varint,4,opt,name=wiki_size,json=wikiSize,proto3" json:"wiki_size,omitempty"`
	LfsObjectsSize        int64 `protobuf:"varint,5,opt,name=lfs_objects_size,json=lfsObjectsSize,proto3" json:"lfs_objects_size,omitempty"`
	JobArtifactsSize      int64 `protobuf:"varint,6,opt,name=job_artifacts_size,json=jobArtifactsSize,proto3" json:"job_artifacts_size,omitempty"`
	PipelineArtifactsSize int64 `protobuf:"varint,7,opt,name=pipeline_artifacts_size,json=pipelineArtifactsSize,proto3" json:"pipeline_artifacts_size,omitempty"`
	PackagesSize          int64 `protobuf:"varint,8,opt,name=packages_size,json=packagesSize,proto3" json:"packages_size,omitempty"`
	SnippetsSize          int64 `protobuf:"varint,9,opt,name=snippets_size,json=snippetsSize,proto3" json:"snippets_size,omitempty"`
	UploadsSize           int64 `protobuf:"varint,10,opt,name=uploads_size,json=uploadsSize,proto3" json:"uploads_size,omitempty"`
}

func (x *ProjectStatistics) Reset() {
	*x = ProjectStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlabexporter_protobuf_project_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectStatistics) ProtoMessage() {}

func (x *ProjectStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_project_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectStatistics.ProtoReflect.Descriptor instead.
func (*ProjectStatistics) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_project_proto_rawDescGZIP(), []int{2}
}

func (x *ProjectStatistics) GetCommitCount() int64 {
	if x != nil {
		return x.CommitCount
	}
	return 0
}

func (x *ProjectStatistics) GetStorageSize() int64 {
	if x != nil {
		return x.StorageSize
	}
	return 0
}

func (x *ProjectStatistics) GetRepositorySize() int64 {
	if x != nil {
		return x.RepositorySize
	}
	return 0
}

func (x *ProjectStatistics) GetWikiSize() int64 {
	if x != nil {
		return x.WikiSize
	}
	return 0
}

func (x *ProjectStatistics) GetLfsObjectsSize() int64 {
	if x != nil {
		return x.LfsObjectsSize
	}
	return 0
}

func (x *ProjectStatistics) GetJobArtifactsSize() int64 {
	if x != nil {
		return x.JobArtifactsSize
	}
	return 0
}

func (x *ProjectStatistics) GetPipelineArtifactsSize() int64 {
	if x != nil {
		return x.PipelineArtifactsSize
	}
	return 0
}

func (x *ProjectStatistics) GetPackagesSize() int64 {
	if x != nil {
		return x.PackagesSize
	}
	return 0
}

func (x *ProjectStatistics) GetSnippetsSize() int64 {
	if x != nil {
		return x.SnippetsSize
	}
	return 0
}

func (x *ProjectStatistics) GetUploadsSize() int64 {
	if x != nil {
		return x.UploadsSize
	}
	return 0
}

var File_gitlabexporter_protobuf_project_proto protoreflect.FileDescriptor

var file_gitlabexporter_protobuf_project_proto_rawDesc = []byte{
	0x0a, 0x25, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x06, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x74, 0x68, 0x57, 0x69, 0x74, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x41, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2a, 0x0a,
	0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1e, 0x0a,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x77, 0x65, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x22, 0xd0, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x22, 0x9c, 0x03, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x69, 0x6b, 0x69, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x77, 0x69, 0x6b, 0x69, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x66, 0x73, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x66, 0x73, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6a, 0x6f, 0x62, 0x5f, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x6a, 0x6f, 0x62, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74,
	0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x75, 0x74, 0x74, 0x72, 0x64, 0x65, 0x76,
	0x2f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitlabexporter_protobuf_project_proto_rawDescOnce sync.Once
	file_gitlabexporter_protobuf_project_proto_rawDescData = file_gitlabexporter_protobuf_project_proto_rawDesc
)

func file_gitlabexporter_protobuf_project_proto_rawDescGZIP() []byte {
	file_gitlabexporter_protobuf_project_proto_rawDescOnce.Do(func() {
		file_gitlabexporter_protobuf_project_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitlabexporter_protobuf_project_proto_rawDescData)
	})
	return file_gitlabexporter_protobuf_project_proto_rawDescData
}

var file_gitlabexporter_protobuf_project_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_gitlabexporter_protobuf_project_proto_goTypes = []interface{}{
	(*Project)(nil),               // 0: gitlabexporter.protobuf.Project
	(*ProjectNamespace)(nil),      // 1: gitlabexporter.protobuf.ProjectNamespace
	(*ProjectStatistics)(nil),     // 2: gitlabexporter.protobuf.ProjectStatistics
	(*timestamppb.Timestamp)(nil), // 3: google.protobuf.Timestamp
	(*User)(nil),                  // 4: gitlabexporter.protobuf.User
}
var file_gitlabexporter_protobuf_project_proto_depIdxs = []int32{
	3, // 0: gitlabexporter.protobuf.Project.created_at:type_name -> google.protobuf.Timestamp
	3, // 1: gitlabexporter.protobuf.Project.last_activity_at:type_name -> google.protobuf.Timestamp
	1, // 2: gitlabexporter.protobuf.Project.namespace:type_name -> gitlabexporter.protobuf.ProjectNamespace
	4, // 3: gitlabexporter.protobuf.Project.owner:type_name -> gitlabexporter.protobuf.User
	2, // 4: gitlabexporter.protobuf.Project.statistics:type_name -> gitlabexporter.protobuf.ProjectStatistics
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_gitlabexporter_protobuf_project_proto_init() }
func file_gitlabexporter_protobuf_project_proto_init() {
	if File_gitlabexporter_protobuf_project_proto != nil {
		return
	}
	file_gitlabexporter_protobuf_user_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gitlabexporter_protobuf_project_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlabexporter_protobuf_project_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlabexporter_protobuf_project_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitlabexporter_protobuf_project_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitlabexporter_protobuf_project_proto_goTypes,
		DependencyIndexes: file_gitlabexporter_protobuf_project_proto_depIdxs,
		MessageInfos:      file_gitlabexporter_protobuf_project_proto_msgTypes,
	}.Build()
	File_gitlabexporter_protobuf_project_proto = out.File
	file_gitlabexporter_protobuf_project_proto_rawDesc = nil
	file_gitlabexporter_protobuf_project_proto_goTypes = nil
	file_gitlabexporter_protobuf_project_proto_depIdxs = nil
}
