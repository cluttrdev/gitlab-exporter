// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.30.2
// source: gitlabexporter/protobuf/coverage.proto

package typespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoverageReport struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Job             *JobReference          `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	LineRate        float32                `protobuf:"fixed32,3,opt,name=line_rate,json=lineRate,proto3" json:"line_rate,omitempty"`
	LinesCovered    int32                  `protobuf:"varint,4,opt,name=lines_covered,json=linesCovered,proto3" json:"lines_covered,omitempty"`
	LinesValid      int32                  `protobuf:"varint,5,opt,name=lines_valid,json=linesValid,proto3" json:"lines_valid,omitempty"`
	BranchRate      float32                `protobuf:"fixed32,6,opt,name=branch_rate,json=branchRate,proto3" json:"branch_rate,omitempty"`
	BranchesCovered int32                  `protobuf:"varint,7,opt,name=branches_covered,json=branchesCovered,proto3" json:"branches_covered,omitempty"`
	BranchesValid   int32                  `protobuf:"varint,8,opt,name=branches_valid,json=branchesValid,proto3" json:"branches_valid,omitempty"`
	Complexity      float32                `protobuf:"fixed32,9,opt,name=complexity,proto3" json:"complexity,omitempty"`
	Version         string                 `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SourcePaths     []string               `protobuf:"bytes,12,rep,name=source_paths,json=sourcePaths,proto3" json:"source_paths,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CoverageReport) Reset() {
	*x = CoverageReport{}
	mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoverageReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageReport) ProtoMessage() {}

func (x *CoverageReport) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageReport.ProtoReflect.Descriptor instead.
func (*CoverageReport) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_coverage_proto_rawDescGZIP(), []int{0}
}

func (x *CoverageReport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoverageReport) GetJob() *JobReference {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *CoverageReport) GetLineRate() float32 {
	if x != nil {
		return x.LineRate
	}
	return 0
}

func (x *CoverageReport) GetLinesCovered() int32 {
	if x != nil {
		return x.LinesCovered
	}
	return 0
}

func (x *CoverageReport) GetLinesValid() int32 {
	if x != nil {
		return x.LinesValid
	}
	return 0
}

func (x *CoverageReport) GetBranchRate() float32 {
	if x != nil {
		return x.BranchRate
	}
	return 0
}

func (x *CoverageReport) GetBranchesCovered() int32 {
	if x != nil {
		return x.BranchesCovered
	}
	return 0
}

func (x *CoverageReport) GetBranchesValid() int32 {
	if x != nil {
		return x.BranchesValid
	}
	return 0
}

func (x *CoverageReport) GetComplexity() float32 {
	if x != nil {
		return x.Complexity
	}
	return 0
}

func (x *CoverageReport) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CoverageReport) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CoverageReport) GetSourcePaths() []string {
	if x != nil {
		return x.SourcePaths
	}
	return nil
}

type CoveragePackage struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Id            string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Report        *CoverageReportReference `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
	Name          string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	LineRate      float32                  `protobuf:"fixed32,4,opt,name=line_rate,json=lineRate,proto3" json:"line_rate,omitempty"`
	BranchRate    float32                  `protobuf:"fixed32,5,opt,name=branch_rate,json=branchRate,proto3" json:"branch_rate,omitempty"`
	Complexity    float32                  `protobuf:"fixed32,6,opt,name=complexity,proto3" json:"complexity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoveragePackage) Reset() {
	*x = CoveragePackage{}
	mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoveragePackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoveragePackage) ProtoMessage() {}

func (x *CoveragePackage) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoveragePackage.ProtoReflect.Descriptor instead.
func (*CoveragePackage) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_coverage_proto_rawDescGZIP(), []int{1}
}

func (x *CoveragePackage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoveragePackage) GetReport() *CoverageReportReference {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *CoveragePackage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoveragePackage) GetLineRate() float32 {
	if x != nil {
		return x.LineRate
	}
	return 0
}

func (x *CoveragePackage) GetBranchRate() float32 {
	if x != nil {
		return x.BranchRate
	}
	return 0
}

func (x *CoveragePackage) GetComplexity() float32 {
	if x != nil {
		return x.Complexity
	}
	return 0
}

type CoverageClass struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Id            string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Package       *CoveragePackageReference `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	Name          string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Filename      string                    `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	LineRate      float32                   `protobuf:"fixed32,5,opt,name=line_rate,json=lineRate,proto3" json:"line_rate,omitempty"`
	BranchRate    float32                   `protobuf:"fixed32,6,opt,name=branch_rate,json=branchRate,proto3" json:"branch_rate,omitempty"`
	Complexity    float32                   `protobuf:"fixed32,7,opt,name=complexity,proto3" json:"complexity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoverageClass) Reset() {
	*x = CoverageClass{}
	mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoverageClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageClass) ProtoMessage() {}

func (x *CoverageClass) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageClass.ProtoReflect.Descriptor instead.
func (*CoverageClass) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_coverage_proto_rawDescGZIP(), []int{2}
}

func (x *CoverageClass) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoverageClass) GetPackage() *CoveragePackageReference {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *CoverageClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoverageClass) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *CoverageClass) GetLineRate() float32 {
	if x != nil {
		return x.LineRate
	}
	return 0
}

func (x *CoverageClass) GetBranchRate() float32 {
	if x != nil {
		return x.BranchRate
	}
	return 0
}

func (x *CoverageClass) GetComplexity() float32 {
	if x != nil {
		return x.Complexity
	}
	return 0
}

type CoverageMethod struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Id            string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Class         *CoverageClassReference `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
	Name          string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Signature     string                  `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	LineRate      float32                 `protobuf:"fixed32,5,opt,name=line_rate,json=lineRate,proto3" json:"line_rate,omitempty"`
	BranchRate    float32                 `protobuf:"fixed32,6,opt,name=branch_rate,json=branchRate,proto3" json:"branch_rate,omitempty"`
	Complexity    float32                 `protobuf:"fixed32,7,opt,name=complexity,proto3" json:"complexity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoverageMethod) Reset() {
	*x = CoverageMethod{}
	mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoverageMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageMethod) ProtoMessage() {}

func (x *CoverageMethod) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageMethod.ProtoReflect.Descriptor instead.
func (*CoverageMethod) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_coverage_proto_rawDescGZIP(), []int{3}
}

func (x *CoverageMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoverageMethod) GetClass() *CoverageClassReference {
	if x != nil {
		return x.Class
	}
	return nil
}

func (x *CoverageMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoverageMethod) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *CoverageMethod) GetLineRate() float32 {
	if x != nil {
		return x.LineRate
	}
	return 0
}

func (x *CoverageMethod) GetBranchRate() float32 {
	if x != nil {
		return x.BranchRate
	}
	return 0
}

func (x *CoverageMethod) GetComplexity() float32 {
	if x != nil {
		return x.Complexity
	}
	return 0
}

var File_gitlabexporter_protobuf_coverage_proto protoreflect.FileDescriptor

const file_gitlabexporter_protobuf_coverage_proto_rawDesc = "" +
	"\n" +
	"&gitlabexporter/protobuf/coverage.proto\x12\x17gitlabexporter.protobuf\x1a\x1fgoogle/protobuf/timestamp.proto\x1a(gitlabexporter/protobuf/references.proto\"\xc6\x03\n" +
	"\x0eCoverageReport\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x127\n" +
	"\x03job\x18\x02 \x01(\v2%.gitlabexporter.protobuf.JobReferenceR\x03job\x12\x1b\n" +
	"\tline_rate\x18\x03 \x01(\x02R\blineRate\x12#\n" +
	"\rlines_covered\x18\x04 \x01(\x05R\flinesCovered\x12\x1f\n" +
	"\vlines_valid\x18\x05 \x01(\x05R\n" +
	"linesValid\x12\x1f\n" +
	"\vbranch_rate\x18\x06 \x01(\x02R\n" +
	"branchRate\x12)\n" +
	"\x10branches_covered\x18\a \x01(\x05R\x0fbranchesCovered\x12%\n" +
	"\x0ebranches_valid\x18\b \x01(\x05R\rbranchesValid\x12\x1e\n" +
	"\n" +
	"complexity\x18\t \x01(\x02R\n" +
	"complexity\x12\x18\n" +
	"\aversion\x18\n" +
	" \x01(\tR\aversion\x128\n" +
	"\ttimestamp\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12!\n" +
	"\fsource_paths\x18\f \x03(\tR\vsourcePaths\"\xdd\x01\n" +
	"\x0fCoveragePackage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12H\n" +
	"\x06report\x18\x02 \x01(\v20.gitlabexporter.protobuf.CoverageReportReferenceR\x06report\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1b\n" +
	"\tline_rate\x18\x04 \x01(\x02R\blineRate\x12\x1f\n" +
	"\vbranch_rate\x18\x05 \x01(\x02R\n" +
	"branchRate\x12\x1e\n" +
	"\n" +
	"complexity\x18\x06 \x01(\x02R\n" +
	"complexity\"\xfa\x01\n" +
	"\rCoverageClass\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12K\n" +
	"\apackage\x18\x02 \x01(\v21.gitlabexporter.protobuf.CoveragePackageReferenceR\apackage\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1a\n" +
	"\bfilename\x18\x04 \x01(\tR\bfilename\x12\x1b\n" +
	"\tline_rate\x18\x05 \x01(\x02R\blineRate\x12\x1f\n" +
	"\vbranch_rate\x18\x06 \x01(\x02R\n" +
	"branchRate\x12\x1e\n" +
	"\n" +
	"complexity\x18\a \x01(\x02R\n" +
	"complexity\"\xf7\x01\n" +
	"\x0eCoverageMethod\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12E\n" +
	"\x05class\x18\x02 \x01(\v2/.gitlabexporter.protobuf.CoverageClassReferenceR\x05class\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\tR\tsignature\x12\x1b\n" +
	"\tline_rate\x18\x05 \x01(\x02R\blineRate\x12\x1f\n" +
	"\vbranch_rate\x18\x06 \x01(\x02R\n" +
	"branchRate\x12\x1e\n" +
	"\n" +
	"complexity\x18\a \x01(\x02R\n" +
	"complexityB0Z.go.cluttr.dev/gitlab-exporter/protobuf/typespbb\x06proto3"

var (
	file_gitlabexporter_protobuf_coverage_proto_rawDescOnce sync.Once
	file_gitlabexporter_protobuf_coverage_proto_rawDescData []byte
)

func file_gitlabexporter_protobuf_coverage_proto_rawDescGZIP() []byte {
	file_gitlabexporter_protobuf_coverage_proto_rawDescOnce.Do(func() {
		file_gitlabexporter_protobuf_coverage_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_coverage_proto_rawDesc), len(file_gitlabexporter_protobuf_coverage_proto_rawDesc)))
	})
	return file_gitlabexporter_protobuf_coverage_proto_rawDescData
}

var file_gitlabexporter_protobuf_coverage_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_gitlabexporter_protobuf_coverage_proto_goTypes = []any{
	(*CoverageReport)(nil),           // 0: gitlabexporter.protobuf.CoverageReport
	(*CoveragePackage)(nil),          // 1: gitlabexporter.protobuf.CoveragePackage
	(*CoverageClass)(nil),            // 2: gitlabexporter.protobuf.CoverageClass
	(*CoverageMethod)(nil),           // 3: gitlabexporter.protobuf.CoverageMethod
	(*JobReference)(nil),             // 4: gitlabexporter.protobuf.JobReference
	(*timestamppb.Timestamp)(nil),    // 5: google.protobuf.Timestamp
	(*CoverageReportReference)(nil),  // 6: gitlabexporter.protobuf.CoverageReportReference
	(*CoveragePackageReference)(nil), // 7: gitlabexporter.protobuf.CoveragePackageReference
	(*CoverageClassReference)(nil),   // 8: gitlabexporter.protobuf.CoverageClassReference
}
var file_gitlabexporter_protobuf_coverage_proto_depIdxs = []int32{
	4, // 0: gitlabexporter.protobuf.CoverageReport.job:type_name -> gitlabexporter.protobuf.JobReference
	5, // 1: gitlabexporter.protobuf.CoverageReport.timestamp:type_name -> google.protobuf.Timestamp
	6, // 2: gitlabexporter.protobuf.CoveragePackage.report:type_name -> gitlabexporter.protobuf.CoverageReportReference
	7, // 3: gitlabexporter.protobuf.CoverageClass.package:type_name -> gitlabexporter.protobuf.CoveragePackageReference
	8, // 4: gitlabexporter.protobuf.CoverageMethod.class:type_name -> gitlabexporter.protobuf.CoverageClassReference
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_gitlabexporter_protobuf_coverage_proto_init() }
func file_gitlabexporter_protobuf_coverage_proto_init() {
	if File_gitlabexporter_protobuf_coverage_proto != nil {
		return
	}
	file_gitlabexporter_protobuf_references_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_coverage_proto_rawDesc), len(file_gitlabexporter_protobuf_coverage_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitlabexporter_protobuf_coverage_proto_goTypes,
		DependencyIndexes: file_gitlabexporter_protobuf_coverage_proto_depIdxs,
		MessageInfos:      file_gitlabexporter_protobuf_coverage_proto_msgTypes,
	}.Build()
	File_gitlabexporter_protobuf_coverage_proto = out.File
	file_gitlabexporter_protobuf_coverage_proto_goTypes = nil
	file_gitlabexporter_protobuf_coverage_proto_depIdxs = nil
}
