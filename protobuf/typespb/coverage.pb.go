// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: gitlabexporter/protobuf/coverage.proto

package typespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoverageReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Job             *JobReference          `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	LineRate        float32                `protobuf:"fixed32,3,opt,name=line_rate,json=lineRate,proto3" json:"line_rate,omitempty"`
	LinesCovered    int32                  `protobuf:"varint,4,opt,name=lines_covered,json=linesCovered,proto3" json:"lines_covered,omitempty"`
	LinesValid      int32                  `protobuf:"varint,5,opt,name=lines_valid,json=linesValid,proto3" json:"lines_valid,omitempty"`
	BranchRate      float32                `protobuf:"fixed32,6,opt,name=branch_rate,json=branchRate,proto3" json:"branch_rate,omitempty"`
	BranchesCovered int32                  `protobuf:"varint,7,opt,name=branches_covered,json=branchesCovered,proto3" json:"branches_covered,omitempty"`
	BranchesValid   int32                  `protobuf:"varint,8,opt,name=branches_valid,json=branchesValid,proto3" json:"branches_valid,omitempty"`
	Complexity      float32                `protobuf:"fixed32,9,opt,name=complexity,proto3" json:"complexity,omitempty"`
	Version         string                 `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`
	Timestamp       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SourcePaths     []string               `protobuf:"bytes,12,rep,name=source_paths,json=sourcePaths,proto3" json:"source_paths,omitempty"`
}

func (x *CoverageReport) Reset() {
	*x = CoverageReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageReport) ProtoMessage() {}

func (x *CoverageReport) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageReport.ProtoReflect.Descriptor instead.
func (*CoverageReport) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_coverage_proto_rawDescGZIP(), []int{0}
}

func (x *CoverageReport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoverageReport) GetJob() *JobReference {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *CoverageReport) GetLineRate() float32 {
	if x != nil {
		return x.LineRate
	}
	return 0
}

func (x *CoverageReport) GetLinesCovered() int32 {
	if x != nil {
		return x.LinesCovered
	}
	return 0
}

func (x *CoverageReport) GetLinesValid() int32 {
	if x != nil {
		return x.LinesValid
	}
	return 0
}

func (x *CoverageReport) GetBranchRate() float32 {
	if x != nil {
		return x.BranchRate
	}
	return 0
}

func (x *CoverageReport) GetBranchesCovered() int32 {
	if x != nil {
		return x.BranchesCovered
	}
	return 0
}

func (x *CoverageReport) GetBranchesValid() int32 {
	if x != nil {
		return x.BranchesValid
	}
	return 0
}

func (x *CoverageReport) GetComplexity() float32 {
	if x != nil {
		return x.Complexity
	}
	return 0
}

func (x *CoverageReport) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CoverageReport) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *CoverageReport) GetSourcePaths() []string {
	if x != nil {
		return x.SourcePaths
	}
	return nil
}

type CoveragePackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Report     *CoverageReportReference `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
	Name       string                   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	LineRate   float32                  `protobuf:"fixed32,4,opt,name=line_rate,json=lineRate,proto3" json:"line_rate,omitempty"`
	BranchRate float32                  `protobuf:"fixed32,5,opt,name=branch_rate,json=branchRate,proto3" json:"branch_rate,omitempty"`
	Complexity float32                  `protobuf:"fixed32,6,opt,name=complexity,proto3" json:"complexity,omitempty"`
}

func (x *CoveragePackage) Reset() {
	*x = CoveragePackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoveragePackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoveragePackage) ProtoMessage() {}

func (x *CoveragePackage) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoveragePackage.ProtoReflect.Descriptor instead.
func (*CoveragePackage) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_coverage_proto_rawDescGZIP(), []int{1}
}

func (x *CoveragePackage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoveragePackage) GetReport() *CoverageReportReference {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *CoveragePackage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoveragePackage) GetLineRate() float32 {
	if x != nil {
		return x.LineRate
	}
	return 0
}

func (x *CoveragePackage) GetBranchRate() float32 {
	if x != nil {
		return x.BranchRate
	}
	return 0
}

func (x *CoveragePackage) GetComplexity() float32 {
	if x != nil {
		return x.Complexity
	}
	return 0
}

type CoverageClass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Package    *CoveragePackageReference `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	Name       string                    `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Filename   string                    `protobuf:"bytes,4,opt,name=filename,proto3" json:"filename,omitempty"`
	LineRate   float32                   `protobuf:"fixed32,5,opt,name=line_rate,json=lineRate,proto3" json:"line_rate,omitempty"`
	BranchRate float32                   `protobuf:"fixed32,6,opt,name=branch_rate,json=branchRate,proto3" json:"branch_rate,omitempty"`
	Complexity float32                   `protobuf:"fixed32,7,opt,name=complexity,proto3" json:"complexity,omitempty"`
}

func (x *CoverageClass) Reset() {
	*x = CoverageClass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageClass) ProtoMessage() {}

func (x *CoverageClass) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageClass.ProtoReflect.Descriptor instead.
func (*CoverageClass) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_coverage_proto_rawDescGZIP(), []int{2}
}

func (x *CoverageClass) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoverageClass) GetPackage() *CoveragePackageReference {
	if x != nil {
		return x.Package
	}
	return nil
}

func (x *CoverageClass) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoverageClass) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *CoverageClass) GetLineRate() float32 {
	if x != nil {
		return x.LineRate
	}
	return 0
}

func (x *CoverageClass) GetBranchRate() float32 {
	if x != nil {
		return x.BranchRate
	}
	return 0
}

func (x *CoverageClass) GetComplexity() float32 {
	if x != nil {
		return x.Complexity
	}
	return 0
}

type CoverageMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Class      *CoverageClassReference `protobuf:"bytes,2,opt,name=class,proto3" json:"class,omitempty"`
	Name       string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Signature  string                  `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	LineRate   float32                 `protobuf:"fixed32,5,opt,name=line_rate,json=lineRate,proto3" json:"line_rate,omitempty"`
	BranchRate float32                 `protobuf:"fixed32,6,opt,name=branch_rate,json=branchRate,proto3" json:"branch_rate,omitempty"`
	Complexity float32                 `protobuf:"fixed32,7,opt,name=complexity,proto3" json:"complexity,omitempty"`
}

func (x *CoverageMethod) Reset() {
	*x = CoverageMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoverageMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageMethod) ProtoMessage() {}

func (x *CoverageMethod) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_coverage_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageMethod.ProtoReflect.Descriptor instead.
func (*CoverageMethod) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_coverage_proto_rawDescGZIP(), []int{3}
}

func (x *CoverageMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoverageMethod) GetClass() *CoverageClassReference {
	if x != nil {
		return x.Class
	}
	return nil
}

func (x *CoverageMethod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoverageMethod) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *CoverageMethod) GetLineRate() float32 {
	if x != nil {
		return x.LineRate
	}
	return 0
}

func (x *CoverageMethod) GetBranchRate() float32 {
	if x != nil {
		return x.BranchRate
	}
	return 0
}

func (x *CoverageMethod) GetComplexity() float32 {
	if x != nil {
		return x.Complexity
	}
	return 0
}

var File_gitlabexporter_protobuf_coverage_proto protoreflect.FileDescriptor

var file_gitlabexporter_protobuf_coverage_proto_rawDesc = []byte{
	0x0a, 0x26, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x03, 0x0a,
	0x0e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x37, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x69, 0x6e,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x5f, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x69, 0x74, 0x79, 0x22, 0xfa, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4b, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69,
	0x74, 0x79, 0x22, 0xf7, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x65, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x69, 0x74, 0x79, 0x42, 0x30, 0x5a, 0x2e,
	0x67, 0x6f, 0x2e, 0x63, 0x6c, 0x75, 0x74, 0x74, 0x72, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2d, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gitlabexporter_protobuf_coverage_proto_rawDescOnce sync.Once
	file_gitlabexporter_protobuf_coverage_proto_rawDescData = file_gitlabexporter_protobuf_coverage_proto_rawDesc
)

func file_gitlabexporter_protobuf_coverage_proto_rawDescGZIP() []byte {
	file_gitlabexporter_protobuf_coverage_proto_rawDescOnce.Do(func() {
		file_gitlabexporter_protobuf_coverage_proto_rawDescData = protoimpl.X.CompressGZIP(file_gitlabexporter_protobuf_coverage_proto_rawDescData)
	})
	return file_gitlabexporter_protobuf_coverage_proto_rawDescData
}

var file_gitlabexporter_protobuf_coverage_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_gitlabexporter_protobuf_coverage_proto_goTypes = []interface{}{
	(*CoverageReport)(nil),           // 0: gitlabexporter.protobuf.CoverageReport
	(*CoveragePackage)(nil),          // 1: gitlabexporter.protobuf.CoveragePackage
	(*CoverageClass)(nil),            // 2: gitlabexporter.protobuf.CoverageClass
	(*CoverageMethod)(nil),           // 3: gitlabexporter.protobuf.CoverageMethod
	(*JobReference)(nil),             // 4: gitlabexporter.protobuf.JobReference
	(*timestamppb.Timestamp)(nil),    // 5: google.protobuf.Timestamp
	(*CoverageReportReference)(nil),  // 6: gitlabexporter.protobuf.CoverageReportReference
	(*CoveragePackageReference)(nil), // 7: gitlabexporter.protobuf.CoveragePackageReference
	(*CoverageClassReference)(nil),   // 8: gitlabexporter.protobuf.CoverageClassReference
}
var file_gitlabexporter_protobuf_coverage_proto_depIdxs = []int32{
	4, // 0: gitlabexporter.protobuf.CoverageReport.job:type_name -> gitlabexporter.protobuf.JobReference
	5, // 1: gitlabexporter.protobuf.CoverageReport.timestamp:type_name -> google.protobuf.Timestamp
	6, // 2: gitlabexporter.protobuf.CoveragePackage.report:type_name -> gitlabexporter.protobuf.CoverageReportReference
	7, // 3: gitlabexporter.protobuf.CoverageClass.package:type_name -> gitlabexporter.protobuf.CoveragePackageReference
	8, // 4: gitlabexporter.protobuf.CoverageMethod.class:type_name -> gitlabexporter.protobuf.CoverageClassReference
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_gitlabexporter_protobuf_coverage_proto_init() }
func file_gitlabexporter_protobuf_coverage_proto_init() {
	if File_gitlabexporter_protobuf_coverage_proto != nil {
		return
	}
	file_gitlabexporter_protobuf_references_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_gitlabexporter_protobuf_coverage_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlabexporter_protobuf_coverage_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoveragePackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlabexporter_protobuf_coverage_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageClass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gitlabexporter_protobuf_coverage_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoverageMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gitlabexporter_protobuf_coverage_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitlabexporter_protobuf_coverage_proto_goTypes,
		DependencyIndexes: file_gitlabexporter_protobuf_coverage_proto_depIdxs,
		MessageInfos:      file_gitlabexporter_protobuf_coverage_proto_msgTypes,
	}.Build()
	File_gitlabexporter_protobuf_coverage_proto = out.File
	file_gitlabexporter_protobuf_coverage_proto_rawDesc = nil
	file_gitlabexporter_protobuf_coverage_proto_goTypes = nil
	file_gitlabexporter_protobuf_coverage_proto_depIdxs = nil
}
