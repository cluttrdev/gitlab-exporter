// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.30.2
// source: gitlabexporter/protobuf/job.proto

package typespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type JobKind int32

const (
	JobKind_JOBKIND_UNSPECIFIED JobKind = 0
	JobKind_JOBKIND_BUILD       JobKind = 1
	JobKind_JOBKIND_BRIDGE      JobKind = 2
)

// Enum value maps for JobKind.
var (
	JobKind_name = map[int32]string{
		0: "JOBKIND_UNSPECIFIED",
		1: "JOBKIND_BUILD",
		2: "JOBKIND_BRIDGE",
	}
	JobKind_value = map[string]int32{
		"JOBKIND_UNSPECIFIED": 0,
		"JOBKIND_BUILD":       1,
		"JOBKIND_BRIDGE":      2,
	}
)

func (x JobKind) Enum() *JobKind {
	p := new(JobKind)
	*p = x
	return p
}

func (x JobKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JobKind) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlabexporter_protobuf_job_proto_enumTypes[0].Descriptor()
}

func (JobKind) Type() protoreflect.EnumType {
	return &file_gitlabexporter_protobuf_job_proto_enumTypes[0]
}

func (x JobKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JobKind.Descriptor instead.
func (JobKind) EnumDescriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_job_proto_rawDescGZIP(), []int{0}
}

type Job struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pipeline           *PipelineReference     `protobuf:"bytes,3,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	Ref                string                 `protobuf:"bytes,4,opt,name=ref,proto3" json:"ref,omitempty"`
	RefPath            string                 `protobuf:"bytes,5,opt,name=ref_path,json=refPath,proto3" json:"ref_path,omitempty"`
	Status             string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	FailureReason      string                 `protobuf:"bytes,7,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	Timestamps         *JobTimestamps         `protobuf:"bytes,8,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	QueuedDuration     *durationpb.Duration   `protobuf:"bytes,9,opt,name=queued_duration,json=queuedDuration,proto3" json:"queued_duration,omitempty"`
	Duration           *durationpb.Duration   `protobuf:"bytes,10,opt,name=duration,proto3" json:"duration,omitempty"`
	Coverage           float64                `protobuf:"fixed64,11,opt,name=coverage,proto3" json:"coverage,omitempty"`
	Stage              string                 `protobuf:"bytes,12,opt,name=stage,proto3" json:"stage,omitempty"`
	Tags               []string               `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`
	Properties         []*JobProperty         `protobuf:"bytes,14,rep,name=properties,proto3" json:"properties,omitempty"`
	AllowFailure       bool                   `protobuf:"varint,15,opt,name=allow_failure,json=allowFailure,proto3" json:"allow_failure,omitempty"`
	Manual             bool                   `protobuf:"varint,16,opt,name=manual,proto3" json:"manual,omitempty"`
	Retried            bool                   `protobuf:"varint,17,opt,name=retried,proto3" json:"retried,omitempty"`
	Retryable          bool                   `protobuf:"varint,18,opt,name=retryable,proto3" json:"retryable,omitempty"`
	Kind               JobKind                `protobuf:"varint,19,opt,name=kind,proto3,enum=gitlabexporter.protobuf.JobKind" json:"kind,omitempty"`
	DownstreamPipeline *PipelineReference     `protobuf:"bytes,20,opt,name=downstream_pipeline,json=downstreamPipeline,proto3,oneof" json:"downstream_pipeline,omitempty"`
	Runner             *RunnerReference       `protobuf:"bytes,21,opt,name=runner,proto3" json:"runner,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Job) Reset() {
	*x = Job{}
	mi := &file_gitlabexporter_protobuf_job_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_job_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_job_proto_rawDescGZIP(), []int{0}
}

func (x *Job) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Job) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Job) GetPipeline() *PipelineReference {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

func (x *Job) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Job) GetRefPath() string {
	if x != nil {
		return x.RefPath
	}
	return ""
}

func (x *Job) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Job) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *Job) GetTimestamps() *JobTimestamps {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *Job) GetQueuedDuration() *durationpb.Duration {
	if x != nil {
		return x.QueuedDuration
	}
	return nil
}

func (x *Job) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Job) GetCoverage() float64 {
	if x != nil {
		return x.Coverage
	}
	return 0
}

func (x *Job) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *Job) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Job) GetProperties() []*JobProperty {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Job) GetAllowFailure() bool {
	if x != nil {
		return x.AllowFailure
	}
	return false
}

func (x *Job) GetManual() bool {
	if x != nil {
		return x.Manual
	}
	return false
}

func (x *Job) GetRetried() bool {
	if x != nil {
		return x.Retried
	}
	return false
}

func (x *Job) GetRetryable() bool {
	if x != nil {
		return x.Retryable
	}
	return false
}

func (x *Job) GetKind() JobKind {
	if x != nil {
		return x.Kind
	}
	return JobKind_JOBKIND_UNSPECIFIED
}

func (x *Job) GetDownstreamPipeline() *PipelineReference {
	if x != nil {
		return x.DownstreamPipeline
	}
	return nil
}

func (x *Job) GetRunner() *RunnerReference {
	if x != nil {
		return x.Runner
	}
	return nil
}

type JobTimestamps struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	QueuedAt      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=queued_at,json=queuedAt,proto3" json:"queued_at,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	ErasedAt      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=erased_at,json=erasedAt,proto3" json:"erased_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobTimestamps) Reset() {
	*x = JobTimestamps{}
	mi := &file_gitlabexporter_protobuf_job_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobTimestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobTimestamps) ProtoMessage() {}

func (x *JobTimestamps) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_job_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobTimestamps.ProtoReflect.Descriptor instead.
func (*JobTimestamps) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_job_proto_rawDescGZIP(), []int{1}
}

func (x *JobTimestamps) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *JobTimestamps) GetQueuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.QueuedAt
	}
	return nil
}

func (x *JobTimestamps) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *JobTimestamps) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *JobTimestamps) GetErasedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ErasedAt
	}
	return nil
}

type JobProperty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobProperty) Reset() {
	*x = JobProperty{}
	mi := &file_gitlabexporter_protobuf_job_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobProperty) ProtoMessage() {}

func (x *JobProperty) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_job_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobProperty.ProtoReflect.Descriptor instead.
func (*JobProperty) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_job_proto_rawDescGZIP(), []int{2}
}

func (x *JobProperty) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobProperty) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_gitlabexporter_protobuf_job_proto protoreflect.FileDescriptor

const file_gitlabexporter_protobuf_job_proto_rawDesc = "" +
	"\n" +
	"!gitlabexporter/protobuf/job.proto\x12\x17gitlabexporter.protobuf\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a(gitlabexporter/protobuf/references.proto\"\x93\a\n" +
	"\x03Job\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12F\n" +
	"\bpipeline\x18\x03 \x01(\v2*.gitlabexporter.protobuf.PipelineReferenceR\bpipeline\x12\x10\n" +
	"\x03ref\x18\x04 \x01(\tR\x03ref\x12\x19\n" +
	"\bref_path\x18\x05 \x01(\tR\arefPath\x12\x16\n" +
	"\x06status\x18\x06 \x01(\tR\x06status\x12%\n" +
	"\x0efailure_reason\x18\a \x01(\tR\rfailureReason\x12F\n" +
	"\n" +
	"timestamps\x18\b \x01(\v2&.gitlabexporter.protobuf.JobTimestampsR\n" +
	"timestamps\x12B\n" +
	"\x0fqueued_duration\x18\t \x01(\v2\x19.google.protobuf.DurationR\x0equeuedDuration\x125\n" +
	"\bduration\x18\n" +
	" \x01(\v2\x19.google.protobuf.DurationR\bduration\x12\x1a\n" +
	"\bcoverage\x18\v \x01(\x01R\bcoverage\x12\x14\n" +
	"\x05stage\x18\f \x01(\tR\x05stage\x12\x12\n" +
	"\x04tags\x18\r \x03(\tR\x04tags\x12D\n" +
	"\n" +
	"properties\x18\x0e \x03(\v2$.gitlabexporter.protobuf.JobPropertyR\n" +
	"properties\x12#\n" +
	"\rallow_failure\x18\x0f \x01(\bR\fallowFailure\x12\x16\n" +
	"\x06manual\x18\x10 \x01(\bR\x06manual\x12\x18\n" +
	"\aretried\x18\x11 \x01(\bR\aretried\x12\x1c\n" +
	"\tretryable\x18\x12 \x01(\bR\tretryable\x124\n" +
	"\x04kind\x18\x13 \x01(\x0e2 .gitlabexporter.protobuf.JobKindR\x04kind\x12`\n" +
	"\x13downstream_pipeline\x18\x14 \x01(\v2*.gitlabexporter.protobuf.PipelineReferenceH\x00R\x12downstreamPipeline\x88\x01\x01\x12@\n" +
	"\x06runner\x18\x15 \x01(\v2(.gitlabexporter.protobuf.RunnerReferenceR\x06runnerB\x16\n" +
	"\x14_downstream_pipeline\"\xb4\x02\n" +
	"\rJobTimestamps\x129\n" +
	"\n" +
	"created_at\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x127\n" +
	"\tqueued_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\bqueuedAt\x129\n" +
	"\n" +
	"started_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x12;\n" +
	"\vfinished_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"finishedAt\x127\n" +
	"\terased_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\berasedAt\"7\n" +
	"\vJobProperty\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value*I\n" +
	"\aJobKind\x12\x17\n" +
	"\x13JOBKIND_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rJOBKIND_BUILD\x10\x01\x12\x12\n" +
	"\x0eJOBKIND_BRIDGE\x10\x02B0Z.go.cluttr.dev/gitlab-exporter/protobuf/typespbb\x06proto3"

var (
	file_gitlabexporter_protobuf_job_proto_rawDescOnce sync.Once
	file_gitlabexporter_protobuf_job_proto_rawDescData []byte
)

func file_gitlabexporter_protobuf_job_proto_rawDescGZIP() []byte {
	file_gitlabexporter_protobuf_job_proto_rawDescOnce.Do(func() {
		file_gitlabexporter_protobuf_job_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_job_proto_rawDesc), len(file_gitlabexporter_protobuf_job_proto_rawDesc)))
	})
	return file_gitlabexporter_protobuf_job_proto_rawDescData
}

var file_gitlabexporter_protobuf_job_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gitlabexporter_protobuf_job_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_gitlabexporter_protobuf_job_proto_goTypes = []any{
	(JobKind)(0),                  // 0: gitlabexporter.protobuf.JobKind
	(*Job)(nil),                   // 1: gitlabexporter.protobuf.Job
	(*JobTimestamps)(nil),         // 2: gitlabexporter.protobuf.JobTimestamps
	(*JobProperty)(nil),           // 3: gitlabexporter.protobuf.JobProperty
	(*PipelineReference)(nil),     // 4: gitlabexporter.protobuf.PipelineReference
	(*durationpb.Duration)(nil),   // 5: google.protobuf.Duration
	(*RunnerReference)(nil),       // 6: gitlabexporter.protobuf.RunnerReference
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_gitlabexporter_protobuf_job_proto_depIdxs = []int32{
	4,  // 0: gitlabexporter.protobuf.Job.pipeline:type_name -> gitlabexporter.protobuf.PipelineReference
	2,  // 1: gitlabexporter.protobuf.Job.timestamps:type_name -> gitlabexporter.protobuf.JobTimestamps
	5,  // 2: gitlabexporter.protobuf.Job.queued_duration:type_name -> google.protobuf.Duration
	5,  // 3: gitlabexporter.protobuf.Job.duration:type_name -> google.protobuf.Duration
	3,  // 4: gitlabexporter.protobuf.Job.properties:type_name -> gitlabexporter.protobuf.JobProperty
	0,  // 5: gitlabexporter.protobuf.Job.kind:type_name -> gitlabexporter.protobuf.JobKind
	4,  // 6: gitlabexporter.protobuf.Job.downstream_pipeline:type_name -> gitlabexporter.protobuf.PipelineReference
	6,  // 7: gitlabexporter.protobuf.Job.runner:type_name -> gitlabexporter.protobuf.RunnerReference
	7,  // 8: gitlabexporter.protobuf.JobTimestamps.created_at:type_name -> google.protobuf.Timestamp
	7,  // 9: gitlabexporter.protobuf.JobTimestamps.queued_at:type_name -> google.protobuf.Timestamp
	7,  // 10: gitlabexporter.protobuf.JobTimestamps.started_at:type_name -> google.protobuf.Timestamp
	7,  // 11: gitlabexporter.protobuf.JobTimestamps.finished_at:type_name -> google.protobuf.Timestamp
	7,  // 12: gitlabexporter.protobuf.JobTimestamps.erased_at:type_name -> google.protobuf.Timestamp
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_gitlabexporter_protobuf_job_proto_init() }
func file_gitlabexporter_protobuf_job_proto_init() {
	if File_gitlabexporter_protobuf_job_proto != nil {
		return
	}
	file_gitlabexporter_protobuf_references_proto_init()
	file_gitlabexporter_protobuf_job_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_job_proto_rawDesc), len(file_gitlabexporter_protobuf_job_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitlabexporter_protobuf_job_proto_goTypes,
		DependencyIndexes: file_gitlabexporter_protobuf_job_proto_depIdxs,
		EnumInfos:         file_gitlabexporter_protobuf_job_proto_enumTypes,
		MessageInfos:      file_gitlabexporter_protobuf_job_proto_msgTypes,
	}.Build()
	File_gitlabexporter_protobuf_job_proto = out.File
	file_gitlabexporter_protobuf_job_proto_goTypes = nil
	file_gitlabexporter_protobuf_job_proto_depIdxs = nil
}
