// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.30.2
// source: gitlabexporter/protobuf/references.proto

package typespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeploymentTier int32

const (
	DeploymentTier_DEPLOYMENT_TIER_UNSPECIFIED DeploymentTier = 0
	DeploymentTier_DEPLOYMENT_TIER_PRODUCTION  DeploymentTier = 1
	DeploymentTier_DEPLOYMENT_TIER_STAGING     DeploymentTier = 2
	DeploymentTier_DEPLOYMENT_TIER_TESTING     DeploymentTier = 3
	DeploymentTier_DEPLOYMENT_TIER_DEVELOPMENT DeploymentTier = 4
	DeploymentTier_DEPLOYMENT_TIER_OTHER       DeploymentTier = 5
)

// Enum value maps for DeploymentTier.
var (
	DeploymentTier_name = map[int32]string{
		0: "DEPLOYMENT_TIER_UNSPECIFIED",
		1: "DEPLOYMENT_TIER_PRODUCTION",
		2: "DEPLOYMENT_TIER_STAGING",
		3: "DEPLOYMENT_TIER_TESTING",
		4: "DEPLOYMENT_TIER_DEVELOPMENT",
		5: "DEPLOYMENT_TIER_OTHER",
	}
	DeploymentTier_value = map[string]int32{
		"DEPLOYMENT_TIER_UNSPECIFIED": 0,
		"DEPLOYMENT_TIER_PRODUCTION":  1,
		"DEPLOYMENT_TIER_STAGING":     2,
		"DEPLOYMENT_TIER_TESTING":     3,
		"DEPLOYMENT_TIER_DEVELOPMENT": 4,
		"DEPLOYMENT_TIER_OTHER":       5,
	}
)

func (x DeploymentTier) Enum() *DeploymentTier {
	p := new(DeploymentTier)
	*p = x
	return p
}

func (x DeploymentTier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentTier) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlabexporter_protobuf_references_proto_enumTypes[0].Descriptor()
}

func (DeploymentTier) Type() protoreflect.EnumType {
	return &file_gitlabexporter_protobuf_references_proto_enumTypes[0]
}

func (x DeploymentTier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentTier.Descriptor instead.
func (DeploymentTier) EnumDescriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{0}
}

type NamespaceReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FullPath      string                 `protobuf:"bytes,2,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NamespaceReference) Reset() {
	*x = NamespaceReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NamespaceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceReference) ProtoMessage() {}

func (x *NamespaceReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceReference.ProtoReflect.Descriptor instead.
func (*NamespaceReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{0}
}

func (x *NamespaceReference) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NamespaceReference) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

type ProjectReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FullPath      string                 `protobuf:"bytes,2,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
	Namespace     *NamespaceReference    `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProjectReference) Reset() {
	*x = ProjectReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProjectReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectReference) ProtoMessage() {}

func (x *ProjectReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectReference.ProtoReflect.Descriptor instead.
func (*ProjectReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{1}
}

func (x *ProjectReference) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProjectReference) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

func (x *ProjectReference) GetNamespace() *NamespaceReference {
	if x != nil {
		return x.Namespace
	}
	return nil
}

type PipelineReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Iid           int64                  `protobuf:"varint,2,opt,name=iid,proto3" json:"iid,omitempty"`
	Project       *ProjectReference      `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineReference) Reset() {
	*x = PipelineReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineReference) ProtoMessage() {}

func (x *PipelineReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineReference.ProtoReflect.Descriptor instead.
func (*PipelineReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{2}
}

func (x *PipelineReference) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PipelineReference) GetIid() int64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *PipelineReference) GetProject() *ProjectReference {
	if x != nil {
		return x.Project
	}
	return nil
}

type JobReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pipeline      *PipelineReference     `protobuf:"bytes,3,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobReference) Reset() {
	*x = JobReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobReference) ProtoMessage() {}

func (x *JobReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobReference.ProtoReflect.Descriptor instead.
func (*JobReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{3}
}

func (x *JobReference) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *JobReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobReference) GetPipeline() *PipelineReference {
	if x != nil {
		return x.Pipeline
	}
	return nil
}

type TestReportReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Job           *JobReference          `protobuf:"bytes,3,opt,name=job,proto3" json:"job,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestReportReference) Reset() {
	*x = TestReportReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestReportReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportReference) ProtoMessage() {}

func (x *TestReportReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportReference.ProtoReflect.Descriptor instead.
func (*TestReportReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{4}
}

func (x *TestReportReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestReportReference) GetJob() *JobReference {
	if x != nil {
		return x.Job
	}
	return nil
}

type TestSuiteReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TestReport    *TestReportReference   `protobuf:"bytes,3,opt,name=test_report,json=testReport,proto3" json:"test_report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestSuiteReference) Reset() {
	*x = TestSuiteReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSuiteReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSuiteReference) ProtoMessage() {}

func (x *TestSuiteReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSuiteReference.ProtoReflect.Descriptor instead.
func (*TestSuiteReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{5}
}

func (x *TestSuiteReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestSuiteReference) GetTestReport() *TestReportReference {
	if x != nil {
		return x.TestReport
	}
	return nil
}

type CoverageReportReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Job           *JobReference          `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoverageReportReference) Reset() {
	*x = CoverageReportReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoverageReportReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageReportReference) ProtoMessage() {}

func (x *CoverageReportReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageReportReference.ProtoReflect.Descriptor instead.
func (*CoverageReportReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{6}
}

func (x *CoverageReportReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoverageReportReference) GetJob() *JobReference {
	if x != nil {
		return x.Job
	}
	return nil
}

type CoveragePackageReference struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Id            string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Report        *CoverageReportReference `protobuf:"bytes,3,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoveragePackageReference) Reset() {
	*x = CoveragePackageReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoveragePackageReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoveragePackageReference) ProtoMessage() {}

func (x *CoveragePackageReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoveragePackageReference.ProtoReflect.Descriptor instead.
func (*CoveragePackageReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{7}
}

func (x *CoveragePackageReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoveragePackageReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoveragePackageReference) GetReport() *CoverageReportReference {
	if x != nil {
		return x.Report
	}
	return nil
}

type CoverageClassReference struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Id            string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Package       *CoveragePackageReference `protobuf:"bytes,3,opt,name=package,proto3" json:"package,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CoverageClassReference) Reset() {
	*x = CoverageClassReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CoverageClassReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoverageClassReference) ProtoMessage() {}

func (x *CoverageClassReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoverageClassReference.ProtoReflect.Descriptor instead.
func (*CoverageClassReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{8}
}

func (x *CoverageClassReference) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CoverageClassReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoverageClassReference) GetPackage() *CoveragePackageReference {
	if x != nil {
		return x.Package
	}
	return nil
}

type MergeRequestReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Iid           int64                  `protobuf:"varint,2,opt,name=iid,proto3" json:"iid,omitempty"`
	Project       *ProjectReference      `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeRequestReference) Reset() {
	*x = MergeRequestReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeRequestReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequestReference) ProtoMessage() {}

func (x *MergeRequestReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequestReference.ProtoReflect.Descriptor instead.
func (*MergeRequestReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{9}
}

func (x *MergeRequestReference) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MergeRequestReference) GetIid() int64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *MergeRequestReference) GetProject() *ProjectReference {
	if x != nil {
		return x.Project
	}
	return nil
}

type MilestoneReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Iid           int64                  `protobuf:"varint,2,opt,name=iid,proto3" json:"iid,omitempty"`
	Project       *ProjectReference      `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MilestoneReference) Reset() {
	*x = MilestoneReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MilestoneReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MilestoneReference) ProtoMessage() {}

func (x *MilestoneReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MilestoneReference.ProtoReflect.Descriptor instead.
func (*MilestoneReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{10}
}

func (x *MilestoneReference) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MilestoneReference) GetIid() int64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *MilestoneReference) GetProject() *ProjectReference {
	if x != nil {
		return x.Project
	}
	return nil
}

type UserReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserReference) Reset() {
	*x = UserReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReference) ProtoMessage() {}

func (x *UserReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReference.ProtoReflect.Descriptor instead.
func (*UserReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{11}
}

func (x *UserReference) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserReference) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UserReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EnvironmentReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Tier          DeploymentTier         `protobuf:"varint,3,opt,name=tier,proto3,enum=gitlabexporter.protobuf.DeploymentTier" json:"tier,omitempty"`
	Project       *ProjectReference      `protobuf:"bytes,4,opt,name=project,proto3" json:"project,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnvironmentReference) Reset() {
	*x = EnvironmentReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnvironmentReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentReference) ProtoMessage() {}

func (x *EnvironmentReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentReference.ProtoReflect.Descriptor instead.
func (*EnvironmentReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{12}
}

func (x *EnvironmentReference) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EnvironmentReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvironmentReference) GetTier() DeploymentTier {
	if x != nil {
		return x.Tier
	}
	return DeploymentTier_DEPLOYMENT_TIER_UNSPECIFIED
}

func (x *EnvironmentReference) GetProject() *ProjectReference {
	if x != nil {
		return x.Project
	}
	return nil
}

type RunnerReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortSha      string                 `protobuf:"bytes,2,opt,name=short_sha,json=shortSha,proto3" json:"short_sha,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnerReference) Reset() {
	*x = RunnerReference{}
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerReference) ProtoMessage() {}

func (x *RunnerReference) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_references_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerReference.ProtoReflect.Descriptor instead.
func (*RunnerReference) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_references_proto_rawDescGZIP(), []int{13}
}

func (x *RunnerReference) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RunnerReference) GetShortSha() string {
	if x != nil {
		return x.ShortSha
	}
	return ""
}

var File_gitlabexporter_protobuf_references_proto protoreflect.FileDescriptor

const file_gitlabexporter_protobuf_references_proto_rawDesc = "" +
	"\n" +
	"(gitlabexporter/protobuf/references.proto\x12\x17gitlabexporter.protobuf\"A\n" +
	"\x12NamespaceReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1b\n" +
	"\tfull_path\x18\x02 \x01(\tR\bfullPath\"\x8a\x01\n" +
	"\x10ProjectReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1b\n" +
	"\tfull_path\x18\x02 \x01(\tR\bfullPath\x12I\n" +
	"\tnamespace\x18\x03 \x01(\v2+.gitlabexporter.protobuf.NamespaceReferenceR\tnamespace\"z\n" +
	"\x11PipelineReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x10\n" +
	"\x03iid\x18\x02 \x01(\x03R\x03iid\x12C\n" +
	"\aproject\x18\x03 \x01(\v2).gitlabexporter.protobuf.ProjectReferenceR\aproject\"z\n" +
	"\fJobReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12F\n" +
	"\bpipeline\x18\x03 \x01(\v2*.gitlabexporter.protobuf.PipelineReferenceR\bpipeline\"^\n" +
	"\x13TestReportReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x127\n" +
	"\x03job\x18\x03 \x01(\v2%.gitlabexporter.protobuf.JobReferenceR\x03job\"s\n" +
	"\x12TestSuiteReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12M\n" +
	"\vtest_report\x18\x03 \x01(\v2,.gitlabexporter.protobuf.TestReportReferenceR\n" +
	"testReport\"b\n" +
	"\x17CoverageReportReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x127\n" +
	"\x03job\x18\x02 \x01(\v2%.gitlabexporter.protobuf.JobReferenceR\x03job\"\x88\x01\n" +
	"\x18CoveragePackageReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12H\n" +
	"\x06report\x18\x03 \x01(\v20.gitlabexporter.protobuf.CoverageReportReferenceR\x06report\"\x89\x01\n" +
	"\x16CoverageClassReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12K\n" +
	"\apackage\x18\x03 \x01(\v21.gitlabexporter.protobuf.CoveragePackageReferenceR\apackage\"~\n" +
	"\x15MergeRequestReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x10\n" +
	"\x03iid\x18\x02 \x01(\x03R\x03iid\x12C\n" +
	"\aproject\x18\x03 \x01(\v2).gitlabexporter.protobuf.ProjectReferenceR\aproject\"{\n" +
	"\x12MilestoneReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x10\n" +
	"\x03iid\x18\x02 \x01(\x03R\x03iid\x12C\n" +
	"\aproject\x18\x03 \x01(\v2).gitlabexporter.protobuf.ProjectReferenceR\aproject\"O\n" +
	"\rUserReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\"\xbc\x01\n" +
	"\x14EnvironmentReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12;\n" +
	"\x04tier\x18\x03 \x01(\x0e2'.gitlabexporter.protobuf.DeploymentTierR\x04tier\x12C\n" +
	"\aproject\x18\x04 \x01(\v2).gitlabexporter.protobuf.ProjectReferenceR\aproject\">\n" +
	"\x0fRunnerReference\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1b\n" +
	"\tshort_sha\x18\x02 \x01(\tR\bshortSha*\xc7\x01\n" +
	"\x0eDeploymentTier\x12\x1f\n" +
	"\x1bDEPLOYMENT_TIER_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aDEPLOYMENT_TIER_PRODUCTION\x10\x01\x12\x1b\n" +
	"\x17DEPLOYMENT_TIER_STAGING\x10\x02\x12\x1b\n" +
	"\x17DEPLOYMENT_TIER_TESTING\x10\x03\x12\x1f\n" +
	"\x1bDEPLOYMENT_TIER_DEVELOPMENT\x10\x04\x12\x19\n" +
	"\x15DEPLOYMENT_TIER_OTHER\x10\x05B0Z.go.cluttr.dev/gitlab-exporter/protobuf/typespbb\x06proto3"

var (
	file_gitlabexporter_protobuf_references_proto_rawDescOnce sync.Once
	file_gitlabexporter_protobuf_references_proto_rawDescData []byte
)

func file_gitlabexporter_protobuf_references_proto_rawDescGZIP() []byte {
	file_gitlabexporter_protobuf_references_proto_rawDescOnce.Do(func() {
		file_gitlabexporter_protobuf_references_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_references_proto_rawDesc), len(file_gitlabexporter_protobuf_references_proto_rawDesc)))
	})
	return file_gitlabexporter_protobuf_references_proto_rawDescData
}

var file_gitlabexporter_protobuf_references_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gitlabexporter_protobuf_references_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_gitlabexporter_protobuf_references_proto_goTypes = []any{
	(DeploymentTier)(0),              // 0: gitlabexporter.protobuf.DeploymentTier
	(*NamespaceReference)(nil),       // 1: gitlabexporter.protobuf.NamespaceReference
	(*ProjectReference)(nil),         // 2: gitlabexporter.protobuf.ProjectReference
	(*PipelineReference)(nil),        // 3: gitlabexporter.protobuf.PipelineReference
	(*JobReference)(nil),             // 4: gitlabexporter.protobuf.JobReference
	(*TestReportReference)(nil),      // 5: gitlabexporter.protobuf.TestReportReference
	(*TestSuiteReference)(nil),       // 6: gitlabexporter.protobuf.TestSuiteReference
	(*CoverageReportReference)(nil),  // 7: gitlabexporter.protobuf.CoverageReportReference
	(*CoveragePackageReference)(nil), // 8: gitlabexporter.protobuf.CoveragePackageReference
	(*CoverageClassReference)(nil),   // 9: gitlabexporter.protobuf.CoverageClassReference
	(*MergeRequestReference)(nil),    // 10: gitlabexporter.protobuf.MergeRequestReference
	(*MilestoneReference)(nil),       // 11: gitlabexporter.protobuf.MilestoneReference
	(*UserReference)(nil),            // 12: gitlabexporter.protobuf.UserReference
	(*EnvironmentReference)(nil),     // 13: gitlabexporter.protobuf.EnvironmentReference
	(*RunnerReference)(nil),          // 14: gitlabexporter.protobuf.RunnerReference
}
var file_gitlabexporter_protobuf_references_proto_depIdxs = []int32{
	1,  // 0: gitlabexporter.protobuf.ProjectReference.namespace:type_name -> gitlabexporter.protobuf.NamespaceReference
	2,  // 1: gitlabexporter.protobuf.PipelineReference.project:type_name -> gitlabexporter.protobuf.ProjectReference
	3,  // 2: gitlabexporter.protobuf.JobReference.pipeline:type_name -> gitlabexporter.protobuf.PipelineReference
	4,  // 3: gitlabexporter.protobuf.TestReportReference.job:type_name -> gitlabexporter.protobuf.JobReference
	5,  // 4: gitlabexporter.protobuf.TestSuiteReference.test_report:type_name -> gitlabexporter.protobuf.TestReportReference
	4,  // 5: gitlabexporter.protobuf.CoverageReportReference.job:type_name -> gitlabexporter.protobuf.JobReference
	7,  // 6: gitlabexporter.protobuf.CoveragePackageReference.report:type_name -> gitlabexporter.protobuf.CoverageReportReference
	8,  // 7: gitlabexporter.protobuf.CoverageClassReference.package:type_name -> gitlabexporter.protobuf.CoveragePackageReference
	2,  // 8: gitlabexporter.protobuf.MergeRequestReference.project:type_name -> gitlabexporter.protobuf.ProjectReference
	2,  // 9: gitlabexporter.protobuf.MilestoneReference.project:type_name -> gitlabexporter.protobuf.ProjectReference
	0,  // 10: gitlabexporter.protobuf.EnvironmentReference.tier:type_name -> gitlabexporter.protobuf.DeploymentTier
	2,  // 11: gitlabexporter.protobuf.EnvironmentReference.project:type_name -> gitlabexporter.protobuf.ProjectReference
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_gitlabexporter_protobuf_references_proto_init() }
func file_gitlabexporter_protobuf_references_proto_init() {
	if File_gitlabexporter_protobuf_references_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_references_proto_rawDesc), len(file_gitlabexporter_protobuf_references_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitlabexporter_protobuf_references_proto_goTypes,
		DependencyIndexes: file_gitlabexporter_protobuf_references_proto_depIdxs,
		EnumInfos:         file_gitlabexporter_protobuf_references_proto_enumTypes,
		MessageInfos:      file_gitlabexporter_protobuf_references_proto_msgTypes,
	}.Build()
	File_gitlabexporter_protobuf_references_proto = out.File
	file_gitlabexporter_protobuf_references_proto_goTypes = nil
	file_gitlabexporter_protobuf_references_proto_depIdxs = nil
}
