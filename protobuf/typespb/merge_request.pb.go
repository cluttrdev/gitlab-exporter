// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.30.2
// source: gitlabexporter/protobuf/merge_request.proto

package typespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MergeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the merge request.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Internal ID of the merge request.
	Iid        int64                   `protobuf:"varint,2,opt,name=iid,proto3" json:"iid,omitempty"`
	Project    *ProjectReference       `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Timestamps *MergeRequestTimestamps `protobuf:"bytes,4,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	Name       string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// Title of the merge request.
	Title  string   `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Labels []string `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty"`
	// State of the merge request. Can be opened, closed, merged or locked.
	State string `protobuf:"bytes,8,opt,name=state,proto3" json:"state,omitempty"`
	// Detailed merge status of the merge request.
	MergeStatus string `protobuf:"bytes,9,opt,name=merge_status,json=mergeStatus,proto3" json:"merge_status,omitempty"`
	// Error message shown when a merge has failed.
	MergeError string `protobuf:"bytes,10,opt,name=merge_error,json=mergeError,proto3" json:"merge_error,omitempty"`
	// ID of the merge request source project.
	SourceProjectId int64 `protobuf:"varint,11,opt,name=source_project_id,json=sourceProjectId,proto3" json:"source_project_id,omitempty"`
	// Source branch of the merge request.
	SourceBranch string `protobuf:"bytes,12,opt,name=source_branch,json=sourceBranch,proto3" json:"source_branch,omitempty"`
	// ID of the merge request target project.
	TargetProjectId int64 `protobuf:"varint,13,opt,name=target_project_id,json=targetProjectId,proto3" json:"target_project_id,omitempty"`
	// Target branch of the merge request.
	TargetBranch string                    `protobuf:"bytes,14,opt,name=target_branch,json=targetBranch,proto3" json:"target_branch,omitempty"`
	DiffStats    *MergeRequestDiffStats    `protobuf:"bytes,15,opt,name=diff_stats,json=diffStats,proto3" json:"diff_stats,omitempty"`
	DiffRefs     *MergeRequestDiffRefs     `protobuf:"bytes,16,opt,name=diff_refs,json=diffRefs,proto3" json:"diff_refs,omitempty"`
	Participants *MergeRequestParticipants `protobuf:"bytes,17,opt,name=participants,proto3" json:"participants,omitempty"`
	Flags        *MergeRequestFlags        `protobuf:"bytes,18,opt,name=flags,proto3" json:"flags,omitempty"`
	// Milestone of the merge request.
	Milestone     *MilestoneReference `protobuf:"bytes,19,opt,name=milestone,proto3" json:"milestone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeRequest) Reset() {
	*x = MergeRequest{}
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequest) ProtoMessage() {}

func (x *MergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequest.ProtoReflect.Descriptor instead.
func (*MergeRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_merge_request_proto_rawDescGZIP(), []int{0}
}

func (x *MergeRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MergeRequest) GetIid() int64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *MergeRequest) GetProject() *ProjectReference {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *MergeRequest) GetTimestamps() *MergeRequestTimestamps {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *MergeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MergeRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *MergeRequest) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MergeRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *MergeRequest) GetMergeStatus() string {
	if x != nil {
		return x.MergeStatus
	}
	return ""
}

func (x *MergeRequest) GetMergeError() string {
	if x != nil {
		return x.MergeError
	}
	return ""
}

func (x *MergeRequest) GetSourceProjectId() int64 {
	if x != nil {
		return x.SourceProjectId
	}
	return 0
}

func (x *MergeRequest) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *MergeRequest) GetTargetProjectId() int64 {
	if x != nil {
		return x.TargetProjectId
	}
	return 0
}

func (x *MergeRequest) GetTargetBranch() string {
	if x != nil {
		return x.TargetBranch
	}
	return ""
}

func (x *MergeRequest) GetDiffStats() *MergeRequestDiffStats {
	if x != nil {
		return x.DiffStats
	}
	return nil
}

func (x *MergeRequest) GetDiffRefs() *MergeRequestDiffRefs {
	if x != nil {
		return x.DiffRefs
	}
	return nil
}

func (x *MergeRequest) GetParticipants() *MergeRequestParticipants {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *MergeRequest) GetFlags() *MergeRequestFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *MergeRequest) GetMilestone() *MilestoneReference {
	if x != nil {
		return x.Milestone
	}
	return nil
}

type MergeRequestTimestamps struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Timestamp of when the merge request was created.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp of when the merge request was updated.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Timestamp of when the merge request merged.
	MergedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=merged_at,json=mergedAt,proto3" json:"merged_at,omitempty"`
	// Timestamp of when the merge request was closed.
	ClosedAt      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=closed_at,json=closedAt,proto3" json:"closed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeRequestTimestamps) Reset() {
	*x = MergeRequestTimestamps{}
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeRequestTimestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequestTimestamps) ProtoMessage() {}

func (x *MergeRequestTimestamps) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequestTimestamps.ProtoReflect.Descriptor instead.
func (*MergeRequestTimestamps) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_merge_request_proto_rawDescGZIP(), []int{1}
}

func (x *MergeRequestTimestamps) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MergeRequestTimestamps) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MergeRequestTimestamps) GetMergedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.MergedAt
	}
	return nil
}

func (x *MergeRequestTimestamps) GetClosedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

type MergeRequestDiffStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Additions     int64                  `protobuf:"varint,1,opt,name=additions,proto3" json:"additions,omitempty"`
	Changes       int64                  `protobuf:"varint,2,opt,name=changes,proto3" json:"changes,omitempty"`
	Deletions     int64                  `protobuf:"varint,3,opt,name=deletions,proto3" json:"deletions,omitempty"`
	FileCount     int64                  `protobuf:"varint,4,opt,name=file_count,json=fileCount,proto3" json:"file_count,omitempty"`
	CommitCount   int64                  `protobuf:"varint,5,opt,name=commit_count,json=commitCount,proto3" json:"commit_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeRequestDiffStats) Reset() {
	*x = MergeRequestDiffStats{}
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeRequestDiffStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequestDiffStats) ProtoMessage() {}

func (x *MergeRequestDiffStats) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequestDiffStats.ProtoReflect.Descriptor instead.
func (*MergeRequestDiffStats) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_merge_request_proto_rawDescGZIP(), []int{2}
}

func (x *MergeRequestDiffStats) GetAdditions() int64 {
	if x != nil {
		return x.Additions
	}
	return 0
}

func (x *MergeRequestDiffStats) GetChanges() int64 {
	if x != nil {
		return x.Changes
	}
	return 0
}

func (x *MergeRequestDiffStats) GetDeletions() int64 {
	if x != nil {
		return x.Deletions
	}
	return 0
}

func (x *MergeRequestDiffStats) GetFileCount() int64 {
	if x != nil {
		return x.FileCount
	}
	return 0
}

func (x *MergeRequestDiffStats) GetCommitCount() int64 {
	if x != nil {
		return x.CommitCount
	}
	return 0
}

type MergeRequestDiffRefs struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	BaseSha         string                 `protobuf:"bytes,1,opt,name=base_sha,json=baseSha,proto3" json:"base_sha,omitempty"`
	HeadSha         string                 `protobuf:"bytes,2,opt,name=head_sha,json=headSha,proto3" json:"head_sha,omitempty"`
	StartSha        string                 `protobuf:"bytes,3,opt,name=start_sha,json=startSha,proto3" json:"start_sha,omitempty"`
	MergeCommitSha  string                 `protobuf:"bytes,4,opt,name=merge_commit_sha,json=mergeCommitSha,proto3" json:"merge_commit_sha,omitempty"`
	RebaseCommitSha string                 `protobuf:"bytes,5,opt,name=rebase_commit_sha,json=rebaseCommitSha,proto3" json:"rebase_commit_sha,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MergeRequestDiffRefs) Reset() {
	*x = MergeRequestDiffRefs{}
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeRequestDiffRefs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequestDiffRefs) ProtoMessage() {}

func (x *MergeRequestDiffRefs) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequestDiffRefs.ProtoReflect.Descriptor instead.
func (*MergeRequestDiffRefs) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_merge_request_proto_rawDescGZIP(), []int{3}
}

func (x *MergeRequestDiffRefs) GetBaseSha() string {
	if x != nil {
		return x.BaseSha
	}
	return ""
}

func (x *MergeRequestDiffRefs) GetHeadSha() string {
	if x != nil {
		return x.HeadSha
	}
	return ""
}

func (x *MergeRequestDiffRefs) GetStartSha() string {
	if x != nil {
		return x.StartSha
	}
	return ""
}

func (x *MergeRequestDiffRefs) GetMergeCommitSha() string {
	if x != nil {
		return x.MergeCommitSha
	}
	return ""
}

func (x *MergeRequestDiffRefs) GetRebaseCommitSha() string {
	if x != nil {
		return x.RebaseCommitSha
	}
	return ""
}

type MergeRequestParticipants struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Author        *UserReference         `protobuf:"bytes,1,opt,name=author,proto3" json:"author,omitempty"`
	Assignees     []*UserReference       `protobuf:"bytes,2,rep,name=assignees,proto3" json:"assignees,omitempty"`
	Reviewers     []*UserReference       `protobuf:"bytes,3,rep,name=reviewers,proto3" json:"reviewers,omitempty"`
	Approvers     []*UserReference       `protobuf:"bytes,4,rep,name=approvers,proto3" json:"approvers,omitempty"`
	MergeUser     *UserReference         `protobuf:"bytes,5,opt,name=merge_user,json=mergeUser,proto3" json:"merge_user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeRequestParticipants) Reset() {
	*x = MergeRequestParticipants{}
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeRequestParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequestParticipants) ProtoMessage() {}

func (x *MergeRequestParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequestParticipants.ProtoReflect.Descriptor instead.
func (*MergeRequestParticipants) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_merge_request_proto_rawDescGZIP(), []int{4}
}

func (x *MergeRequestParticipants) GetAuthor() *UserReference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *MergeRequestParticipants) GetAssignees() []*UserReference {
	if x != nil {
		return x.Assignees
	}
	return nil
}

func (x *MergeRequestParticipants) GetReviewers() []*UserReference {
	if x != nil {
		return x.Reviewers
	}
	return nil
}

func (x *MergeRequestParticipants) GetApprovers() []*UserReference {
	if x != nil {
		return x.Approvers
	}
	return nil
}

func (x *MergeRequestParticipants) GetMergeUser() *UserReference {
	if x != nil {
		return x.MergeUser
	}
	return nil
}

type MergeRequestFlags struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Approved      bool                   `protobuf:"varint,1,opt,name=approved,proto3" json:"approved,omitempty"`
	Conflicts     bool                   `protobuf:"varint,2,opt,name=conflicts,proto3" json:"conflicts,omitempty"`
	Draft         bool                   `protobuf:"varint,3,opt,name=draft,proto3" json:"draft,omitempty"`
	Mergeable     bool                   `protobuf:"varint,4,opt,name=mergeable,proto3" json:"mergeable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeRequestFlags) Reset() {
	*x = MergeRequestFlags{}
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeRequestFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequestFlags) ProtoMessage() {}

func (x *MergeRequestFlags) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequestFlags.ProtoReflect.Descriptor instead.
func (*MergeRequestFlags) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_merge_request_proto_rawDescGZIP(), []int{5}
}

func (x *MergeRequestFlags) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *MergeRequestFlags) GetConflicts() bool {
	if x != nil {
		return x.Conflicts
	}
	return false
}

func (x *MergeRequestFlags) GetDraft() bool {
	if x != nil {
		return x.Draft
	}
	return false
}

func (x *MergeRequestFlags) GetMergeable() bool {
	if x != nil {
		return x.Mergeable
	}
	return false
}

type MergeRequestNoteEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MergeRequest  *MergeRequestReference `protobuf:"bytes,2,opt,name=merge_request,json=mergeRequest,proto3" json:"merge_request,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ResolvedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=resolved_at,json=resolvedAt,proto3" json:"resolved_at,omitempty"`
	Type          string                 `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	System        bool                   `protobuf:"varint,9,opt,name=system,proto3" json:"system,omitempty"`
	Internal      bool                   `protobuf:"varint,10,opt,name=internal,proto3" json:"internal,omitempty"`
	Author        *UserReference         `protobuf:"bytes,11,opt,name=author,proto3" json:"author,omitempty"`
	Resolveable   bool                   `protobuf:"varint,12,opt,name=resolveable,proto3" json:"resolveable,omitempty"`
	Resolved      bool                   `protobuf:"varint,13,opt,name=resolved,proto3" json:"resolved,omitempty"`
	Resolver      *UserReference         `protobuf:"bytes,14,opt,name=resolver,proto3" json:"resolver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MergeRequestNoteEvent) Reset() {
	*x = MergeRequestNoteEvent{}
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MergeRequestNoteEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeRequestNoteEvent) ProtoMessage() {}

func (x *MergeRequestNoteEvent) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeRequestNoteEvent.ProtoReflect.Descriptor instead.
func (*MergeRequestNoteEvent) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_merge_request_proto_rawDescGZIP(), []int{6}
}

func (x *MergeRequestNoteEvent) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MergeRequestNoteEvent) GetMergeRequest() *MergeRequestReference {
	if x != nil {
		return x.MergeRequest
	}
	return nil
}

func (x *MergeRequestNoteEvent) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MergeRequestNoteEvent) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MergeRequestNoteEvent) GetResolvedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ResolvedAt
	}
	return nil
}

func (x *MergeRequestNoteEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MergeRequestNoteEvent) GetSystem() bool {
	if x != nil {
		return x.System
	}
	return false
}

func (x *MergeRequestNoteEvent) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *MergeRequestNoteEvent) GetAuthor() *UserReference {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *MergeRequestNoteEvent) GetResolveable() bool {
	if x != nil {
		return x.Resolveable
	}
	return false
}

func (x *MergeRequestNoteEvent) GetResolved() bool {
	if x != nil {
		return x.Resolved
	}
	return false
}

func (x *MergeRequestNoteEvent) GetResolver() *UserReference {
	if x != nil {
		return x.Resolver
	}
	return nil
}

type Milestone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Iid           int64                  `protobuf:"varint,2,opt,name=iid,proto3" json:"iid,omitempty"`
	ProjectId     int64                  `protobuf:"varint,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	GroupId       int64                  `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	StartDate     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	DueDate       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	Title         string                 `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	State         string                 `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	Expired       bool                   `protobuf:"varint,11,opt,name=expired,proto3" json:"expired,omitempty"`
	WebUrl        string                 `protobuf:"bytes,12,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Milestone) Reset() {
	*x = Milestone{}
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Milestone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Milestone) ProtoMessage() {}

func (x *Milestone) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_merge_request_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Milestone.ProtoReflect.Descriptor instead.
func (*Milestone) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_merge_request_proto_rawDescGZIP(), []int{7}
}

func (x *Milestone) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Milestone) GetIid() int64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *Milestone) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Milestone) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *Milestone) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Milestone) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Milestone) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *Milestone) GetDueDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DueDate
	}
	return nil
}

func (x *Milestone) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Milestone) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Milestone) GetExpired() bool {
	if x != nil {
		return x.Expired
	}
	return false
}

func (x *Milestone) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

var File_gitlabexporter_protobuf_merge_request_proto protoreflect.FileDescriptor

const file_gitlabexporter_protobuf_merge_request_proto_rawDesc = "" +
	"\n" +
	"+gitlabexporter/protobuf/merge_request.proto\x12\x17gitlabexporter.protobuf\x1a\x1fgoogle/protobuf/timestamp.proto\x1a(gitlabexporter/protobuf/references.proto\"\x83\a\n" +
	"\fMergeRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x10\n" +
	"\x03iid\x18\x02 \x01(\x03R\x03iid\x12C\n" +
	"\aproject\x18\x03 \x01(\v2).gitlabexporter.protobuf.ProjectReferenceR\aproject\x12O\n" +
	"\n" +
	"timestamps\x18\x04 \x01(\v2/.gitlabexporter.protobuf.MergeRequestTimestampsR\n" +
	"timestamps\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12\x14\n" +
	"\x05title\x18\x06 \x01(\tR\x05title\x12\x16\n" +
	"\x06labels\x18\a \x03(\tR\x06labels\x12\x14\n" +
	"\x05state\x18\b \x01(\tR\x05state\x12!\n" +
	"\fmerge_status\x18\t \x01(\tR\vmergeStatus\x12\x1f\n" +
	"\vmerge_error\x18\n" +
	" \x01(\tR\n" +
	"mergeError\x12*\n" +
	"\x11source_project_id\x18\v \x01(\x03R\x0fsourceProjectId\x12#\n" +
	"\rsource_branch\x18\f \x01(\tR\fsourceBranch\x12*\n" +
	"\x11target_project_id\x18\r \x01(\x03R\x0ftargetProjectId\x12#\n" +
	"\rtarget_branch\x18\x0e \x01(\tR\ftargetBranch\x12M\n" +
	"\n" +
	"diff_stats\x18\x0f \x01(\v2..gitlabexporter.protobuf.MergeRequestDiffStatsR\tdiffStats\x12J\n" +
	"\tdiff_refs\x18\x10 \x01(\v2-.gitlabexporter.protobuf.MergeRequestDiffRefsR\bdiffRefs\x12U\n" +
	"\fparticipants\x18\x11 \x01(\v21.gitlabexporter.protobuf.MergeRequestParticipantsR\fparticipants\x12@\n" +
	"\x05flags\x18\x12 \x01(\v2*.gitlabexporter.protobuf.MergeRequestFlagsR\x05flags\x12I\n" +
	"\tmilestone\x18\x13 \x01(\v2+.gitlabexporter.protobuf.MilestoneReferenceR\tmilestone\"\x80\x02\n" +
	"\x16MergeRequestTimestamps\x129\n" +
	"\n" +
	"created_at\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x127\n" +
	"\tmerged_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\bmergedAt\x127\n" +
	"\tclosed_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\bclosedAt\"\xaf\x01\n" +
	"\x15MergeRequestDiffStats\x12\x1c\n" +
	"\tadditions\x18\x01 \x01(\x03R\tadditions\x12\x18\n" +
	"\achanges\x18\x02 \x01(\x03R\achanges\x12\x1c\n" +
	"\tdeletions\x18\x03 \x01(\x03R\tdeletions\x12\x1d\n" +
	"\n" +
	"file_count\x18\x04 \x01(\x03R\tfileCount\x12!\n" +
	"\fcommit_count\x18\x05 \x01(\x03R\vcommitCount\"\xbf\x01\n" +
	"\x14MergeRequestDiffRefs\x12\x19\n" +
	"\bbase_sha\x18\x01 \x01(\tR\abaseSha\x12\x19\n" +
	"\bhead_sha\x18\x02 \x01(\tR\aheadSha\x12\x1b\n" +
	"\tstart_sha\x18\x03 \x01(\tR\bstartSha\x12(\n" +
	"\x10merge_commit_sha\x18\x04 \x01(\tR\x0emergeCommitSha\x12*\n" +
	"\x11rebase_commit_sha\x18\x05 \x01(\tR\x0frebaseCommitSha\"\xf3\x02\n" +
	"\x18MergeRequestParticipants\x12>\n" +
	"\x06author\x18\x01 \x01(\v2&.gitlabexporter.protobuf.UserReferenceR\x06author\x12D\n" +
	"\tassignees\x18\x02 \x03(\v2&.gitlabexporter.protobuf.UserReferenceR\tassignees\x12D\n" +
	"\treviewers\x18\x03 \x03(\v2&.gitlabexporter.protobuf.UserReferenceR\treviewers\x12D\n" +
	"\tapprovers\x18\x04 \x03(\v2&.gitlabexporter.protobuf.UserReferenceR\tapprovers\x12E\n" +
	"\n" +
	"merge_user\x18\x05 \x01(\v2&.gitlabexporter.protobuf.UserReferenceR\tmergeUser\"\x81\x01\n" +
	"\x11MergeRequestFlags\x12\x1a\n" +
	"\bapproved\x18\x01 \x01(\bR\bapproved\x12\x1c\n" +
	"\tconflicts\x18\x02 \x01(\bR\tconflicts\x12\x14\n" +
	"\x05draft\x18\x03 \x01(\bR\x05draft\x12\x1c\n" +
	"\tmergeable\x18\x04 \x01(\bR\tmergeable\"\xb9\x04\n" +
	"\x15MergeRequestNoteEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12S\n" +
	"\rmerge_request\x18\x02 \x01(\v2..gitlabexporter.protobuf.MergeRequestReferenceR\fmergeRequest\x129\n" +
	"\n" +
	"created_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12;\n" +
	"\vresolved_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"resolvedAt\x12\x12\n" +
	"\x04type\x18\b \x01(\tR\x04type\x12\x16\n" +
	"\x06system\x18\t \x01(\bR\x06system\x12\x1a\n" +
	"\binternal\x18\n" +
	" \x01(\bR\binternal\x12>\n" +
	"\x06author\x18\v \x01(\v2&.gitlabexporter.protobuf.UserReferenceR\x06author\x12 \n" +
	"\vresolveable\x18\f \x01(\bR\vresolveable\x12\x1a\n" +
	"\bresolved\x18\r \x01(\bR\bresolved\x12B\n" +
	"\bresolver\x18\x0e \x01(\v2&.gitlabexporter.protobuf.UserReferenceR\bresolver\"\xae\x03\n" +
	"\tMilestone\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x10\n" +
	"\x03iid\x18\x02 \x01(\x03R\x03iid\x12\x1d\n" +
	"\n" +
	"project_id\x18\x03 \x01(\x03R\tprojectId\x12\x19\n" +
	"\bgroup_id\x18\x04 \x01(\x03R\agroupId\x129\n" +
	"\n" +
	"created_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x129\n" +
	"\n" +
	"start_date\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tstartDate\x125\n" +
	"\bdue_date\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\adueDate\x12\x14\n" +
	"\x05title\x18\t \x01(\tR\x05title\x12\x14\n" +
	"\x05state\x18\n" +
	" \x01(\tR\x05state\x12\x18\n" +
	"\aexpired\x18\v \x01(\bR\aexpired\x12\x17\n" +
	"\aweb_url\x18\f \x01(\tR\x06webUrlB0Z.go.cluttr.dev/gitlab-exporter/protobuf/typespbb\x06proto3"

var (
	file_gitlabexporter_protobuf_merge_request_proto_rawDescOnce sync.Once
	file_gitlabexporter_protobuf_merge_request_proto_rawDescData []byte
)

func file_gitlabexporter_protobuf_merge_request_proto_rawDescGZIP() []byte {
	file_gitlabexporter_protobuf_merge_request_proto_rawDescOnce.Do(func() {
		file_gitlabexporter_protobuf_merge_request_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_merge_request_proto_rawDesc), len(file_gitlabexporter_protobuf_merge_request_proto_rawDesc)))
	})
	return file_gitlabexporter_protobuf_merge_request_proto_rawDescData
}

var file_gitlabexporter_protobuf_merge_request_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_gitlabexporter_protobuf_merge_request_proto_goTypes = []any{
	(*MergeRequest)(nil),             // 0: gitlabexporter.protobuf.MergeRequest
	(*MergeRequestTimestamps)(nil),   // 1: gitlabexporter.protobuf.MergeRequestTimestamps
	(*MergeRequestDiffStats)(nil),    // 2: gitlabexporter.protobuf.MergeRequestDiffStats
	(*MergeRequestDiffRefs)(nil),     // 3: gitlabexporter.protobuf.MergeRequestDiffRefs
	(*MergeRequestParticipants)(nil), // 4: gitlabexporter.protobuf.MergeRequestParticipants
	(*MergeRequestFlags)(nil),        // 5: gitlabexporter.protobuf.MergeRequestFlags
	(*MergeRequestNoteEvent)(nil),    // 6: gitlabexporter.protobuf.MergeRequestNoteEvent
	(*Milestone)(nil),                // 7: gitlabexporter.protobuf.Milestone
	(*ProjectReference)(nil),         // 8: gitlabexporter.protobuf.ProjectReference
	(*MilestoneReference)(nil),       // 9: gitlabexporter.protobuf.MilestoneReference
	(*timestamppb.Timestamp)(nil),    // 10: google.protobuf.Timestamp
	(*UserReference)(nil),            // 11: gitlabexporter.protobuf.UserReference
	(*MergeRequestReference)(nil),    // 12: gitlabexporter.protobuf.MergeRequestReference
}
var file_gitlabexporter_protobuf_merge_request_proto_depIdxs = []int32{
	8,  // 0: gitlabexporter.protobuf.MergeRequest.project:type_name -> gitlabexporter.protobuf.ProjectReference
	1,  // 1: gitlabexporter.protobuf.MergeRequest.timestamps:type_name -> gitlabexporter.protobuf.MergeRequestTimestamps
	2,  // 2: gitlabexporter.protobuf.MergeRequest.diff_stats:type_name -> gitlabexporter.protobuf.MergeRequestDiffStats
	3,  // 3: gitlabexporter.protobuf.MergeRequest.diff_refs:type_name -> gitlabexporter.protobuf.MergeRequestDiffRefs
	4,  // 4: gitlabexporter.protobuf.MergeRequest.participants:type_name -> gitlabexporter.protobuf.MergeRequestParticipants
	5,  // 5: gitlabexporter.protobuf.MergeRequest.flags:type_name -> gitlabexporter.protobuf.MergeRequestFlags
	9,  // 6: gitlabexporter.protobuf.MergeRequest.milestone:type_name -> gitlabexporter.protobuf.MilestoneReference
	10, // 7: gitlabexporter.protobuf.MergeRequestTimestamps.created_at:type_name -> google.protobuf.Timestamp
	10, // 8: gitlabexporter.protobuf.MergeRequestTimestamps.updated_at:type_name -> google.protobuf.Timestamp
	10, // 9: gitlabexporter.protobuf.MergeRequestTimestamps.merged_at:type_name -> google.protobuf.Timestamp
	10, // 10: gitlabexporter.protobuf.MergeRequestTimestamps.closed_at:type_name -> google.protobuf.Timestamp
	11, // 11: gitlabexporter.protobuf.MergeRequestParticipants.author:type_name -> gitlabexporter.protobuf.UserReference
	11, // 12: gitlabexporter.protobuf.MergeRequestParticipants.assignees:type_name -> gitlabexporter.protobuf.UserReference
	11, // 13: gitlabexporter.protobuf.MergeRequestParticipants.reviewers:type_name -> gitlabexporter.protobuf.UserReference
	11, // 14: gitlabexporter.protobuf.MergeRequestParticipants.approvers:type_name -> gitlabexporter.protobuf.UserReference
	11, // 15: gitlabexporter.protobuf.MergeRequestParticipants.merge_user:type_name -> gitlabexporter.protobuf.UserReference
	12, // 16: gitlabexporter.protobuf.MergeRequestNoteEvent.merge_request:type_name -> gitlabexporter.protobuf.MergeRequestReference
	10, // 17: gitlabexporter.protobuf.MergeRequestNoteEvent.created_at:type_name -> google.protobuf.Timestamp
	10, // 18: gitlabexporter.protobuf.MergeRequestNoteEvent.updated_at:type_name -> google.protobuf.Timestamp
	10, // 19: gitlabexporter.protobuf.MergeRequestNoteEvent.resolved_at:type_name -> google.protobuf.Timestamp
	11, // 20: gitlabexporter.protobuf.MergeRequestNoteEvent.author:type_name -> gitlabexporter.protobuf.UserReference
	11, // 21: gitlabexporter.protobuf.MergeRequestNoteEvent.resolver:type_name -> gitlabexporter.protobuf.UserReference
	10, // 22: gitlabexporter.protobuf.Milestone.created_at:type_name -> google.protobuf.Timestamp
	10, // 23: gitlabexporter.protobuf.Milestone.updated_at:type_name -> google.protobuf.Timestamp
	10, // 24: gitlabexporter.protobuf.Milestone.start_date:type_name -> google.protobuf.Timestamp
	10, // 25: gitlabexporter.protobuf.Milestone.due_date:type_name -> google.protobuf.Timestamp
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_gitlabexporter_protobuf_merge_request_proto_init() }
func file_gitlabexporter_protobuf_merge_request_proto_init() {
	if File_gitlabexporter_protobuf_merge_request_proto != nil {
		return
	}
	file_gitlabexporter_protobuf_references_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_merge_request_proto_rawDesc), len(file_gitlabexporter_protobuf_merge_request_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitlabexporter_protobuf_merge_request_proto_goTypes,
		DependencyIndexes: file_gitlabexporter_protobuf_merge_request_proto_depIdxs,
		MessageInfos:      file_gitlabexporter_protobuf_merge_request_proto_msgTypes,
	}.Build()
	File_gitlabexporter_protobuf_merge_request_proto = out.File
	file_gitlabexporter_protobuf_merge_request_proto_goTypes = nil
	file_gitlabexporter_protobuf_merge_request_proto_depIdxs = nil
}
