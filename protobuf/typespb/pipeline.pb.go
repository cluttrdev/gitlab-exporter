// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.30.2
// source: gitlabexporter/protobuf/pipeline.proto

package typespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Pipeline struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Iid                 int64                  `protobuf:"varint,2,opt,name=iid,proto3" json:"iid,omitempty"`
	Project             *ProjectReference      `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Name                string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Ref                 string                 `protobuf:"bytes,5,opt,name=ref,proto3" json:"ref,omitempty"`
	RefPath             string                 `protobuf:"bytes,6,opt,name=ref_path,json=refPath,proto3" json:"ref_path,omitempty"`
	Sha                 string                 `protobuf:"bytes,7,opt,name=sha,proto3" json:"sha,omitempty"`
	Source              string                 `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty"`
	Status              string                 `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	FailureReason       string                 `protobuf:"bytes,10,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	Timestamps          *PipelineTimestamps    `protobuf:"bytes,11,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	QueuedDuration      *durationpb.Duration   `protobuf:"bytes,12,opt,name=queued_duration,json=queuedDuration,proto3" json:"queued_duration,omitempty"`
	Duration            *durationpb.Duration   `protobuf:"bytes,13,opt,name=duration,proto3" json:"duration,omitempty"`
	Coverage            float64                `protobuf:"fixed64,14,opt,name=coverage,proto3" json:"coverage,omitempty"`
	Warnings            bool                   `protobuf:"varint,15,opt,name=warnings,proto3" json:"warnings,omitempty"`
	YamlErrors          bool                   `protobuf:"varint,16,opt,name=yaml_errors,json=yamlErrors,proto3" json:"yaml_errors,omitempty"`
	Child               bool                   `protobuf:"varint,17,opt,name=child,proto3" json:"child,omitempty"`
	UpstreamPipeline    *PipelineReference     `protobuf:"bytes,18,opt,name=upstream_pipeline,json=upstreamPipeline,proto3,oneof" json:"upstream_pipeline,omitempty"`
	DownstreamPipelines []*PipelineReference   `protobuf:"bytes,19,rep,name=downstream_pipelines,json=downstreamPipelines,proto3" json:"downstream_pipelines,omitempty"`
	MergeRequest        *MergeRequestReference `protobuf:"bytes,20,opt,name=merge_request,json=mergeRequest,proto3,oneof" json:"merge_request,omitempty"`
	User                *UserReference         `protobuf:"bytes,21,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Pipeline) Reset() {
	*x = Pipeline{}
	mi := &file_gitlabexporter_protobuf_pipeline_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pipeline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pipeline) ProtoMessage() {}

func (x *Pipeline) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_pipeline_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pipeline.ProtoReflect.Descriptor instead.
func (*Pipeline) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *Pipeline) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Pipeline) GetIid() int64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *Pipeline) GetProject() *ProjectReference {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *Pipeline) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pipeline) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Pipeline) GetRefPath() string {
	if x != nil {
		return x.RefPath
	}
	return ""
}

func (x *Pipeline) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *Pipeline) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Pipeline) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Pipeline) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *Pipeline) GetTimestamps() *PipelineTimestamps {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *Pipeline) GetQueuedDuration() *durationpb.Duration {
	if x != nil {
		return x.QueuedDuration
	}
	return nil
}

func (x *Pipeline) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Pipeline) GetCoverage() float64 {
	if x != nil {
		return x.Coverage
	}
	return 0
}

func (x *Pipeline) GetWarnings() bool {
	if x != nil {
		return x.Warnings
	}
	return false
}

func (x *Pipeline) GetYamlErrors() bool {
	if x != nil {
		return x.YamlErrors
	}
	return false
}

func (x *Pipeline) GetChild() bool {
	if x != nil {
		return x.Child
	}
	return false
}

func (x *Pipeline) GetUpstreamPipeline() *PipelineReference {
	if x != nil {
		return x.UpstreamPipeline
	}
	return nil
}

func (x *Pipeline) GetDownstreamPipelines() []*PipelineReference {
	if x != nil {
		return x.DownstreamPipelines
	}
	return nil
}

func (x *Pipeline) GetMergeRequest() *MergeRequestReference {
	if x != nil {
		return x.MergeRequest
	}
	return nil
}

func (x *Pipeline) GetUser() *UserReference {
	if x != nil {
		return x.User
	}
	return nil
}

type PipelineTimestamps struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CommittedAt   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=committed_at,json=committedAt,proto3" json:"committed_at,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	StartedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	FinishedAt    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=finished_at,json=finishedAt,proto3" json:"finished_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PipelineTimestamps) Reset() {
	*x = PipelineTimestamps{}
	mi := &file_gitlabexporter_protobuf_pipeline_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PipelineTimestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipelineTimestamps) ProtoMessage() {}

func (x *PipelineTimestamps) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_pipeline_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipelineTimestamps.ProtoReflect.Descriptor instead.
func (*PipelineTimestamps) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *PipelineTimestamps) GetCommittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CommittedAt
	}
	return nil
}

func (x *PipelineTimestamps) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PipelineTimestamps) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PipelineTimestamps) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *PipelineTimestamps) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

var File_gitlabexporter_protobuf_pipeline_proto protoreflect.FileDescriptor

const file_gitlabexporter_protobuf_pipeline_proto_rawDesc = "" +
	"\n" +
	"&gitlabexporter/protobuf/pipeline.proto\x12\x17gitlabexporter.protobuf\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a(gitlabexporter/protobuf/references.proto\"\xcd\a\n" +
	"\bPipeline\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x10\n" +
	"\x03iid\x18\x02 \x01(\x03R\x03iid\x12C\n" +
	"\aproject\x18\x03 \x01(\v2).gitlabexporter.protobuf.ProjectReferenceR\aproject\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x10\n" +
	"\x03ref\x18\x05 \x01(\tR\x03ref\x12\x19\n" +
	"\bref_path\x18\x06 \x01(\tR\arefPath\x12\x10\n" +
	"\x03sha\x18\a \x01(\tR\x03sha\x12\x16\n" +
	"\x06source\x18\b \x01(\tR\x06source\x12\x16\n" +
	"\x06status\x18\t \x01(\tR\x06status\x12%\n" +
	"\x0efailure_reason\x18\n" +
	" \x01(\tR\rfailureReason\x12K\n" +
	"\n" +
	"timestamps\x18\v \x01(\v2+.gitlabexporter.protobuf.PipelineTimestampsR\n" +
	"timestamps\x12B\n" +
	"\x0fqueued_duration\x18\f \x01(\v2\x19.google.protobuf.DurationR\x0equeuedDuration\x125\n" +
	"\bduration\x18\r \x01(\v2\x19.google.protobuf.DurationR\bduration\x12\x1a\n" +
	"\bcoverage\x18\x0e \x01(\x01R\bcoverage\x12\x1a\n" +
	"\bwarnings\x18\x0f \x01(\bR\bwarnings\x12\x1f\n" +
	"\vyaml_errors\x18\x10 \x01(\bR\n" +
	"yamlErrors\x12\x14\n" +
	"\x05child\x18\x11 \x01(\bR\x05child\x12\\\n" +
	"\x11upstream_pipeline\x18\x12 \x01(\v2*.gitlabexporter.protobuf.PipelineReferenceH\x00R\x10upstreamPipeline\x88\x01\x01\x12]\n" +
	"\x14downstream_pipelines\x18\x13 \x03(\v2*.gitlabexporter.protobuf.PipelineReferenceR\x13downstreamPipelines\x12X\n" +
	"\rmerge_request\x18\x14 \x01(\v2..gitlabexporter.protobuf.MergeRequestReferenceH\x01R\fmergeRequest\x88\x01\x01\x12:\n" +
	"\x04user\x18\x15 \x01(\v2&.gitlabexporter.protobuf.UserReferenceR\x04userB\x14\n" +
	"\x12_upstream_pipelineB\x10\n" +
	"\x0e_merge_request\"\xc1\x02\n" +
	"\x12PipelineTimestamps\x12=\n" +
	"\fcommitted_at\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\vcommittedAt\x129\n" +
	"\n" +
	"created_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x129\n" +
	"\n" +
	"started_at\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x12;\n" +
	"\vfinished_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"finishedAtB0Z.go.cluttr.dev/gitlab-exporter/protobuf/typespbb\x06proto3"

var (
	file_gitlabexporter_protobuf_pipeline_proto_rawDescOnce sync.Once
	file_gitlabexporter_protobuf_pipeline_proto_rawDescData []byte
)

func file_gitlabexporter_protobuf_pipeline_proto_rawDescGZIP() []byte {
	file_gitlabexporter_protobuf_pipeline_proto_rawDescOnce.Do(func() {
		file_gitlabexporter_protobuf_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_pipeline_proto_rawDesc), len(file_gitlabexporter_protobuf_pipeline_proto_rawDesc)))
	})
	return file_gitlabexporter_protobuf_pipeline_proto_rawDescData
}

var file_gitlabexporter_protobuf_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_gitlabexporter_protobuf_pipeline_proto_goTypes = []any{
	(*Pipeline)(nil),              // 0: gitlabexporter.protobuf.Pipeline
	(*PipelineTimestamps)(nil),    // 1: gitlabexporter.protobuf.PipelineTimestamps
	(*ProjectReference)(nil),      // 2: gitlabexporter.protobuf.ProjectReference
	(*durationpb.Duration)(nil),   // 3: google.protobuf.Duration
	(*PipelineReference)(nil),     // 4: gitlabexporter.protobuf.PipelineReference
	(*MergeRequestReference)(nil), // 5: gitlabexporter.protobuf.MergeRequestReference
	(*UserReference)(nil),         // 6: gitlabexporter.protobuf.UserReference
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_gitlabexporter_protobuf_pipeline_proto_depIdxs = []int32{
	2,  // 0: gitlabexporter.protobuf.Pipeline.project:type_name -> gitlabexporter.protobuf.ProjectReference
	1,  // 1: gitlabexporter.protobuf.Pipeline.timestamps:type_name -> gitlabexporter.protobuf.PipelineTimestamps
	3,  // 2: gitlabexporter.protobuf.Pipeline.queued_duration:type_name -> google.protobuf.Duration
	3,  // 3: gitlabexporter.protobuf.Pipeline.duration:type_name -> google.protobuf.Duration
	4,  // 4: gitlabexporter.protobuf.Pipeline.upstream_pipeline:type_name -> gitlabexporter.protobuf.PipelineReference
	4,  // 5: gitlabexporter.protobuf.Pipeline.downstream_pipelines:type_name -> gitlabexporter.protobuf.PipelineReference
	5,  // 6: gitlabexporter.protobuf.Pipeline.merge_request:type_name -> gitlabexporter.protobuf.MergeRequestReference
	6,  // 7: gitlabexporter.protobuf.Pipeline.user:type_name -> gitlabexporter.protobuf.UserReference
	7,  // 8: gitlabexporter.protobuf.PipelineTimestamps.committed_at:type_name -> google.protobuf.Timestamp
	7,  // 9: gitlabexporter.protobuf.PipelineTimestamps.created_at:type_name -> google.protobuf.Timestamp
	7,  // 10: gitlabexporter.protobuf.PipelineTimestamps.updated_at:type_name -> google.protobuf.Timestamp
	7,  // 11: gitlabexporter.protobuf.PipelineTimestamps.started_at:type_name -> google.protobuf.Timestamp
	7,  // 12: gitlabexporter.protobuf.PipelineTimestamps.finished_at:type_name -> google.protobuf.Timestamp
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_gitlabexporter_protobuf_pipeline_proto_init() }
func file_gitlabexporter_protobuf_pipeline_proto_init() {
	if File_gitlabexporter_protobuf_pipeline_proto != nil {
		return
	}
	file_gitlabexporter_protobuf_references_proto_init()
	file_gitlabexporter_protobuf_pipeline_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_pipeline_proto_rawDesc), len(file_gitlabexporter_protobuf_pipeline_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitlabexporter_protobuf_pipeline_proto_goTypes,
		DependencyIndexes: file_gitlabexporter_protobuf_pipeline_proto_depIdxs,
		MessageInfos:      file_gitlabexporter_protobuf_pipeline_proto_msgTypes,
	}.Build()
	File_gitlabexporter_protobuf_pipeline_proto = out.File
	file_gitlabexporter_protobuf_pipeline_proto_goTypes = nil
	file_gitlabexporter_protobuf_pipeline_proto_depIdxs = nil
}
