// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.30.2
// source: gitlabexporter/protobuf/issue.proto

package typespb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IssueType int32

const (
	IssueType_ISSUE_TYPE_UNSPECIFIED IssueType = 0
	IssueType_ISSUE_TYPE_UNKNOWN     IssueType = 1
	IssueType_ISSUE_TYPE_ISSUE       IssueType = 2
	IssueType_ISSUE_TYPE_INCIDENT    IssueType = 3
	IssueType_ISSUE_TYPE_TEST_CASE   IssueType = 4
	IssueType_ISSUE_TYPE_REQUIREMENT IssueType = 5
	IssueType_ISSUE_TYPE_TASK        IssueType = 6
	IssueType_ISSUE_TYPE_TICKET      IssueType = 7
	IssueType_ISSUE_TYPE_OBJECTIVE   IssueType = 8
	IssueType_ISSUE_TYPE_KEY_RESULT  IssueType = 9
	IssueType_ISSUE_TYPE_EPIC        IssueType = 10
)

// Enum value maps for IssueType.
var (
	IssueType_name = map[int32]string{
		0:  "ISSUE_TYPE_UNSPECIFIED",
		1:  "ISSUE_TYPE_UNKNOWN",
		2:  "ISSUE_TYPE_ISSUE",
		3:  "ISSUE_TYPE_INCIDENT",
		4:  "ISSUE_TYPE_TEST_CASE",
		5:  "ISSUE_TYPE_REQUIREMENT",
		6:  "ISSUE_TYPE_TASK",
		7:  "ISSUE_TYPE_TICKET",
		8:  "ISSUE_TYPE_OBJECTIVE",
		9:  "ISSUE_TYPE_KEY_RESULT",
		10: "ISSUE_TYPE_EPIC",
	}
	IssueType_value = map[string]int32{
		"ISSUE_TYPE_UNSPECIFIED": 0,
		"ISSUE_TYPE_UNKNOWN":     1,
		"ISSUE_TYPE_ISSUE":       2,
		"ISSUE_TYPE_INCIDENT":    3,
		"ISSUE_TYPE_TEST_CASE":   4,
		"ISSUE_TYPE_REQUIREMENT": 5,
		"ISSUE_TYPE_TASK":        6,
		"ISSUE_TYPE_TICKET":      7,
		"ISSUE_TYPE_OBJECTIVE":   8,
		"ISSUE_TYPE_KEY_RESULT":  9,
		"ISSUE_TYPE_EPIC":        10,
	}
)

func (x IssueType) Enum() *IssueType {
	p := new(IssueType)
	*p = x
	return p
}

func (x IssueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueType) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlabexporter_protobuf_issue_proto_enumTypes[0].Descriptor()
}

func (IssueType) Type() protoreflect.EnumType {
	return &file_gitlabexporter_protobuf_issue_proto_enumTypes[0]
}

func (x IssueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueType.Descriptor instead.
func (IssueType) EnumDescriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_issue_proto_rawDescGZIP(), []int{0}
}

type IssueSeverity int32

const (
	IssueSeverity_ISSUE_SEVERITY_UNSPECIFIED IssueSeverity = 0
	IssueSeverity_ISSUE_SEVERITY_UNKNOWN     IssueSeverity = 1
	IssueSeverity_ISSUE_SEVERITY_LOW         IssueSeverity = 2
	IssueSeverity_ISSUE_SEVERITY_MEDIUM      IssueSeverity = 3
	IssueSeverity_ISSUE_SEVERITY_HIGH        IssueSeverity = 4
	IssueSeverity_ISSUE_SEVERITY_CRITICAL    IssueSeverity = 5
)

// Enum value maps for IssueSeverity.
var (
	IssueSeverity_name = map[int32]string{
		0: "ISSUE_SEVERITY_UNSPECIFIED",
		1: "ISSUE_SEVERITY_UNKNOWN",
		2: "ISSUE_SEVERITY_LOW",
		3: "ISSUE_SEVERITY_MEDIUM",
		4: "ISSUE_SEVERITY_HIGH",
		5: "ISSUE_SEVERITY_CRITICAL",
	}
	IssueSeverity_value = map[string]int32{
		"ISSUE_SEVERITY_UNSPECIFIED": 0,
		"ISSUE_SEVERITY_UNKNOWN":     1,
		"ISSUE_SEVERITY_LOW":         2,
		"ISSUE_SEVERITY_MEDIUM":      3,
		"ISSUE_SEVERITY_HIGH":        4,
		"ISSUE_SEVERITY_CRITICAL":    5,
	}
)

func (x IssueSeverity) Enum() *IssueSeverity {
	p := new(IssueSeverity)
	*p = x
	return p
}

func (x IssueSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlabexporter_protobuf_issue_proto_enumTypes[1].Descriptor()
}

func (IssueSeverity) Type() protoreflect.EnumType {
	return &file_gitlabexporter_protobuf_issue_proto_enumTypes[1]
}

func (x IssueSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueSeverity.Descriptor instead.
func (IssueSeverity) EnumDescriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_issue_proto_rawDescGZIP(), []int{1}
}

type IssueState int32

const (
	IssueState_ISSUE_STATE_UNSPECIFIED IssueState = 0
	IssueState_ISSUE_STATE_UNKNOWN     IssueState = 1
	IssueState_ISSUE_STATE_OPENED      IssueState = 2
	IssueState_ISSUE_STATE_CLOSED      IssueState = 3
	IssueState_ISSUE_STATE_LOCKED      IssueState = 4
	IssueState_ISSUE_STATE_ALL         IssueState = 5
)

// Enum value maps for IssueState.
var (
	IssueState_name = map[int32]string{
		0: "ISSUE_STATE_UNSPECIFIED",
		1: "ISSUE_STATE_UNKNOWN",
		2: "ISSUE_STATE_OPENED",
		3: "ISSUE_STATE_CLOSED",
		4: "ISSUE_STATE_LOCKED",
		5: "ISSUE_STATE_ALL",
	}
	IssueState_value = map[string]int32{
		"ISSUE_STATE_UNSPECIFIED": 0,
		"ISSUE_STATE_UNKNOWN":     1,
		"ISSUE_STATE_OPENED":      2,
		"ISSUE_STATE_CLOSED":      3,
		"ISSUE_STATE_LOCKED":      4,
		"ISSUE_STATE_ALL":         5,
	}
)

func (x IssueState) Enum() *IssueState {
	p := new(IssueState)
	*p = x
	return p
}

func (x IssueState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueState) Descriptor() protoreflect.EnumDescriptor {
	return file_gitlabexporter_protobuf_issue_proto_enumTypes[2].Descriptor()
}

func (IssueState) Type() protoreflect.EnumType {
	return &file_gitlabexporter_protobuf_issue_proto_enumTypes[2]
}

func (x IssueState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueState.Descriptor instead.
func (IssueState) EnumDescriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_issue_proto_rawDescGZIP(), []int{2}
}

type Issue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Iid           int64                  `protobuf:"varint,2,opt,name=iid,proto3" json:"iid,omitempty"`
	Project       *ProjectReference      `protobuf:"bytes,3,opt,name=project,proto3" json:"project,omitempty"`
	Timestamps    *IssueTimestamps       `protobuf:"bytes,4,opt,name=timestamps,proto3" json:"timestamps,omitempty"`
	Title         string                 `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Labels        []string               `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	Type          IssueType              `protobuf:"varint,7,opt,name=type,proto3,enum=gitlabexporter.protobuf.IssueType" json:"type,omitempty"`
	Severity      IssueSeverity          `protobuf:"varint,8,opt,name=severity,proto3,enum=gitlabexporter.protobuf.IssueSeverity" json:"severity,omitempty"`
	State         IssueState             `protobuf:"varint,9,opt,name=state,proto3,enum=gitlabexporter.protobuf.IssueState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Issue) Reset() {
	*x = Issue{}
	mi := &file_gitlabexporter_protobuf_issue_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue) ProtoMessage() {}

func (x *Issue) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_issue_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue.ProtoReflect.Descriptor instead.
func (*Issue) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_issue_proto_rawDescGZIP(), []int{0}
}

func (x *Issue) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Issue) GetIid() int64 {
	if x != nil {
		return x.Iid
	}
	return 0
}

func (x *Issue) GetProject() *ProjectReference {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *Issue) GetTimestamps() *IssueTimestamps {
	if x != nil {
		return x.Timestamps
	}
	return nil
}

func (x *Issue) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Issue) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Issue) GetType() IssueType {
	if x != nil {
		return x.Type
	}
	return IssueType_ISSUE_TYPE_UNSPECIFIED
}

func (x *Issue) GetSeverity() IssueSeverity {
	if x != nil {
		return x.Severity
	}
	return IssueSeverity_ISSUE_SEVERITY_UNSPECIFIED
}

func (x *Issue) GetState() IssueState {
	if x != nil {
		return x.State
	}
	return IssueState_ISSUE_STATE_UNSPECIFIED
}

type IssueTimestamps struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ClosedAt      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=closed_at,json=closedAt,proto3" json:"closed_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueTimestamps) Reset() {
	*x = IssueTimestamps{}
	mi := &file_gitlabexporter_protobuf_issue_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueTimestamps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTimestamps) ProtoMessage() {}

func (x *IssueTimestamps) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_issue_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTimestamps.ProtoReflect.Descriptor instead.
func (*IssueTimestamps) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_issue_proto_rawDescGZIP(), []int{1}
}

func (x *IssueTimestamps) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *IssueTimestamps) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *IssueTimestamps) GetClosedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ClosedAt
	}
	return nil
}

var File_gitlabexporter_protobuf_issue_proto protoreflect.FileDescriptor

const file_gitlabexporter_protobuf_issue_proto_rawDesc = "" +
	"\n" +
	"#gitlabexporter/protobuf/issue.proto\x12\x17gitlabexporter.protobuf\x1a\x1fgoogle/protobuf/timestamp.proto\x1a(gitlabexporter/protobuf/references.proto\"\x9d\x03\n" +
	"\x05Issue\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x10\n" +
	"\x03iid\x18\x02 \x01(\x03R\x03iid\x12C\n" +
	"\aproject\x18\x03 \x01(\v2).gitlabexporter.protobuf.ProjectReferenceR\aproject\x12H\n" +
	"\n" +
	"timestamps\x18\x04 \x01(\v2(.gitlabexporter.protobuf.IssueTimestampsR\n" +
	"timestamps\x12\x14\n" +
	"\x05title\x18\x05 \x01(\tR\x05title\x12\x16\n" +
	"\x06labels\x18\x06 \x03(\tR\x06labels\x126\n" +
	"\x04type\x18\a \x01(\x0e2\".gitlabexporter.protobuf.IssueTypeR\x04type\x12B\n" +
	"\bseverity\x18\b \x01(\x0e2&.gitlabexporter.protobuf.IssueSeverityR\bseverity\x129\n" +
	"\x05state\x18\t \x01(\x0e2#.gitlabexporter.protobuf.IssueStateR\x05state\"\xc0\x01\n" +
	"\x0fIssueTimestamps\x129\n" +
	"\n" +
	"created_at\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x127\n" +
	"\tclosed_at\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\bclosedAt*\x9a\x02\n" +
	"\tIssueType\x12\x1a\n" +
	"\x16ISSUE_TYPE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12ISSUE_TYPE_UNKNOWN\x10\x01\x12\x14\n" +
	"\x10ISSUE_TYPE_ISSUE\x10\x02\x12\x17\n" +
	"\x13ISSUE_TYPE_INCIDENT\x10\x03\x12\x18\n" +
	"\x14ISSUE_TYPE_TEST_CASE\x10\x04\x12\x1a\n" +
	"\x16ISSUE_TYPE_REQUIREMENT\x10\x05\x12\x13\n" +
	"\x0fISSUE_TYPE_TASK\x10\x06\x12\x15\n" +
	"\x11ISSUE_TYPE_TICKET\x10\a\x12\x18\n" +
	"\x14ISSUE_TYPE_OBJECTIVE\x10\b\x12\x19\n" +
	"\x15ISSUE_TYPE_KEY_RESULT\x10\t\x12\x13\n" +
	"\x0fISSUE_TYPE_EPIC\x10\n" +
	"*\xb4\x01\n" +
	"\rIssueSeverity\x12\x1e\n" +
	"\x1aISSUE_SEVERITY_UNSPECIFIED\x10\x00\x12\x1a\n" +
	"\x16ISSUE_SEVERITY_UNKNOWN\x10\x01\x12\x16\n" +
	"\x12ISSUE_SEVERITY_LOW\x10\x02\x12\x19\n" +
	"\x15ISSUE_SEVERITY_MEDIUM\x10\x03\x12\x17\n" +
	"\x13ISSUE_SEVERITY_HIGH\x10\x04\x12\x1b\n" +
	"\x17ISSUE_SEVERITY_CRITICAL\x10\x05*\x9f\x01\n" +
	"\n" +
	"IssueState\x12\x1b\n" +
	"\x17ISSUE_STATE_UNSPECIFIED\x10\x00\x12\x17\n" +
	"\x13ISSUE_STATE_UNKNOWN\x10\x01\x12\x16\n" +
	"\x12ISSUE_STATE_OPENED\x10\x02\x12\x16\n" +
	"\x12ISSUE_STATE_CLOSED\x10\x03\x12\x16\n" +
	"\x12ISSUE_STATE_LOCKED\x10\x04\x12\x13\n" +
	"\x0fISSUE_STATE_ALL\x10\x05B0Z.go.cluttr.dev/gitlab-exporter/protobuf/typespbb\x06proto3"

var (
	file_gitlabexporter_protobuf_issue_proto_rawDescOnce sync.Once
	file_gitlabexporter_protobuf_issue_proto_rawDescData []byte
)

func file_gitlabexporter_protobuf_issue_proto_rawDescGZIP() []byte {
	file_gitlabexporter_protobuf_issue_proto_rawDescOnce.Do(func() {
		file_gitlabexporter_protobuf_issue_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_issue_proto_rawDesc), len(file_gitlabexporter_protobuf_issue_proto_rawDesc)))
	})
	return file_gitlabexporter_protobuf_issue_proto_rawDescData
}

var file_gitlabexporter_protobuf_issue_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_gitlabexporter_protobuf_issue_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_gitlabexporter_protobuf_issue_proto_goTypes = []any{
	(IssueType)(0),                // 0: gitlabexporter.protobuf.IssueType
	(IssueSeverity)(0),            // 1: gitlabexporter.protobuf.IssueSeverity
	(IssueState)(0),               // 2: gitlabexporter.protobuf.IssueState
	(*Issue)(nil),                 // 3: gitlabexporter.protobuf.Issue
	(*IssueTimestamps)(nil),       // 4: gitlabexporter.protobuf.IssueTimestamps
	(*ProjectReference)(nil),      // 5: gitlabexporter.protobuf.ProjectReference
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_gitlabexporter_protobuf_issue_proto_depIdxs = []int32{
	5, // 0: gitlabexporter.protobuf.Issue.project:type_name -> gitlabexporter.protobuf.ProjectReference
	4, // 1: gitlabexporter.protobuf.Issue.timestamps:type_name -> gitlabexporter.protobuf.IssueTimestamps
	0, // 2: gitlabexporter.protobuf.Issue.type:type_name -> gitlabexporter.protobuf.IssueType
	1, // 3: gitlabexporter.protobuf.Issue.severity:type_name -> gitlabexporter.protobuf.IssueSeverity
	2, // 4: gitlabexporter.protobuf.Issue.state:type_name -> gitlabexporter.protobuf.IssueState
	6, // 5: gitlabexporter.protobuf.IssueTimestamps.created_at:type_name -> google.protobuf.Timestamp
	6, // 6: gitlabexporter.protobuf.IssueTimestamps.updated_at:type_name -> google.protobuf.Timestamp
	6, // 7: gitlabexporter.protobuf.IssueTimestamps.closed_at:type_name -> google.protobuf.Timestamp
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_gitlabexporter_protobuf_issue_proto_init() }
func file_gitlabexporter_protobuf_issue_proto_init() {
	if File_gitlabexporter_protobuf_issue_proto != nil {
		return
	}
	file_gitlabexporter_protobuf_references_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_issue_proto_rawDesc), len(file_gitlabexporter_protobuf_issue_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gitlabexporter_protobuf_issue_proto_goTypes,
		DependencyIndexes: file_gitlabexporter_protobuf_issue_proto_depIdxs,
		EnumInfos:         file_gitlabexporter_protobuf_issue_proto_enumTypes,
		MessageInfos:      file_gitlabexporter_protobuf_issue_proto_msgTypes,
	}.Build()
	File_gitlabexporter_protobuf_issue_proto = out.File
	file_gitlabexporter_protobuf_issue_proto_goTypes = nil
	file_gitlabexporter_protobuf_issue_proto_depIdxs = nil
}
