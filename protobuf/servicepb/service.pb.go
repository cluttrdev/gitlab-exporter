// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.30.2
// source: gitlabexporter/protobuf/service/service.proto

package servicepb

import (
	typespb "go.cluttr.dev/gitlab-exporter/protobuf/typespb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecordSummary struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RecordedCount int32                  `protobuf:"varint,1,opt,name=recorded_count,json=recordedCount,proto3" json:"recorded_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordSummary) Reset() {
	*x = RecordSummary{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordSummary) ProtoMessage() {}

func (x *RecordSummary) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordSummary.ProtoReflect.Descriptor instead.
func (*RecordSummary) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{0}
}

func (x *RecordSummary) GetRecordedCount() int32 {
	if x != nil {
		return x.RecordedCount
	}
	return 0
}

type RecordRequestMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FetchedAt     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=fetched_at,json=fetchedAt,proto3" json:"fetched_at,omitempty"`
	ExportedAt    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=exported_at,json=exportedAt,proto3" json:"exported_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordRequestMetadata) Reset() {
	*x = RecordRequestMetadata{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordRequestMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRequestMetadata) ProtoMessage() {}

func (x *RecordRequestMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRequestMetadata.ProtoReflect.Descriptor instead.
func (*RecordRequestMetadata) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{1}
}

func (x *RecordRequestMetadata) GetFetchedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FetchedAt
	}
	return nil
}

func (x *RecordRequestMetadata) GetExportedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExportedAt
	}
	return nil
}

type RecordCommitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*typespb.Commit      `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordCommitsRequest) Reset() {
	*x = RecordCommitsRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordCommitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordCommitsRequest) ProtoMessage() {}

func (x *RecordCommitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordCommitsRequest.ProtoReflect.Descriptor instead.
func (*RecordCommitsRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{2}
}

func (x *RecordCommitsRequest) GetData() []*typespb.Commit {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordCoverageReportsRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Data          []*typespb.CoverageReport `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordCoverageReportsRequest) Reset() {
	*x = RecordCoverageReportsRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordCoverageReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordCoverageReportsRequest) ProtoMessage() {}

func (x *RecordCoverageReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordCoverageReportsRequest.ProtoReflect.Descriptor instead.
func (*RecordCoverageReportsRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{3}
}

func (x *RecordCoverageReportsRequest) GetData() []*typespb.CoverageReport {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordCoveragePackagesRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Data          []*typespb.CoveragePackage `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordCoveragePackagesRequest) Reset() {
	*x = RecordCoveragePackagesRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordCoveragePackagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordCoveragePackagesRequest) ProtoMessage() {}

func (x *RecordCoveragePackagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordCoveragePackagesRequest.ProtoReflect.Descriptor instead.
func (*RecordCoveragePackagesRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{4}
}

func (x *RecordCoveragePackagesRequest) GetData() []*typespb.CoveragePackage {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordCoverageClassesRequest struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Data          []*typespb.CoverageClass `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordCoverageClassesRequest) Reset() {
	*x = RecordCoverageClassesRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordCoverageClassesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordCoverageClassesRequest) ProtoMessage() {}

func (x *RecordCoverageClassesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordCoverageClassesRequest.ProtoReflect.Descriptor instead.
func (*RecordCoverageClassesRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{5}
}

func (x *RecordCoverageClassesRequest) GetData() []*typespb.CoverageClass {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordCoverageMethodsRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Data          []*typespb.CoverageMethod `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordCoverageMethodsRequest) Reset() {
	*x = RecordCoverageMethodsRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordCoverageMethodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordCoverageMethodsRequest) ProtoMessage() {}

func (x *RecordCoverageMethodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordCoverageMethodsRequest.ProtoReflect.Descriptor instead.
func (*RecordCoverageMethodsRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{6}
}

func (x *RecordCoverageMethodsRequest) GetData() []*typespb.CoverageMethod {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordDeploymentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*typespb.Deployment  `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordDeploymentsRequest) Reset() {
	*x = RecordDeploymentsRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordDeploymentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDeploymentsRequest) ProtoMessage() {}

func (x *RecordDeploymentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDeploymentsRequest.ProtoReflect.Descriptor instead.
func (*RecordDeploymentsRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{7}
}

func (x *RecordDeploymentsRequest) GetData() []*typespb.Deployment {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordIssuesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*typespb.Issue       `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordIssuesRequest) Reset() {
	*x = RecordIssuesRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordIssuesRequest) ProtoMessage() {}

func (x *RecordIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordIssuesRequest.ProtoReflect.Descriptor instead.
func (*RecordIssuesRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{8}
}

func (x *RecordIssuesRequest) GetData() []*typespb.Issue {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordJobsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*typespb.Job         `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordJobsRequest) Reset() {
	*x = RecordJobsRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordJobsRequest) ProtoMessage() {}

func (x *RecordJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordJobsRequest.ProtoReflect.Descriptor instead.
func (*RecordJobsRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{9}
}

func (x *RecordJobsRequest) GetData() []*typespb.Job {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordMergeRequestsRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Data          []*typespb.MergeRequest `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordMergeRequestsRequest) Reset() {
	*x = RecordMergeRequestsRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordMergeRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMergeRequestsRequest) ProtoMessage() {}

func (x *RecordMergeRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMergeRequestsRequest.ProtoReflect.Descriptor instead.
func (*RecordMergeRequestsRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{10}
}

func (x *RecordMergeRequestsRequest) GetData() []*typespb.MergeRequest {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordMergeRequestNoteEventsRequest struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Data          []*typespb.MergeRequestNoteEvent `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordMergeRequestNoteEventsRequest) Reset() {
	*x = RecordMergeRequestNoteEventsRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordMergeRequestNoteEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMergeRequestNoteEventsRequest) ProtoMessage() {}

func (x *RecordMergeRequestNoteEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMergeRequestNoteEventsRequest.ProtoReflect.Descriptor instead.
func (*RecordMergeRequestNoteEventsRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{11}
}

func (x *RecordMergeRequestNoteEventsRequest) GetData() []*typespb.MergeRequestNoteEvent {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordMetricsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*typespb.Metric      `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordMetricsRequest) Reset() {
	*x = RecordMetricsRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordMetricsRequest) ProtoMessage() {}

func (x *RecordMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordMetricsRequest.ProtoReflect.Descriptor instead.
func (*RecordMetricsRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{12}
}

func (x *RecordMetricsRequest) GetData() []*typespb.Metric {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordPipelinesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*typespb.Pipeline    `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordPipelinesRequest) Reset() {
	*x = RecordPipelinesRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordPipelinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordPipelinesRequest) ProtoMessage() {}

func (x *RecordPipelinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordPipelinesRequest.ProtoReflect.Descriptor instead.
func (*RecordPipelinesRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{13}
}

func (x *RecordPipelinesRequest) GetData() []*typespb.Pipeline {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordProjectsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*typespb.Project     `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordProjectsRequest) Reset() {
	*x = RecordProjectsRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordProjectsRequest) ProtoMessage() {}

func (x *RecordProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordProjectsRequest.ProtoReflect.Descriptor instead.
func (*RecordProjectsRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{14}
}

func (x *RecordProjectsRequest) GetData() []*typespb.Project {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordRunnersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*typespb.Runner      `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Metadata      *RecordRequestMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordRunnersRequest) Reset() {
	*x = RecordRunnersRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordRunnersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordRunnersRequest) ProtoMessage() {}

func (x *RecordRunnersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordRunnersRequest.ProtoReflect.Descriptor instead.
func (*RecordRunnersRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{15}
}

func (x *RecordRunnersRequest) GetData() []*typespb.Runner {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RecordRunnersRequest) GetMetadata() *RecordRequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RecordSectionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*typespb.Section     `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordSectionsRequest) Reset() {
	*x = RecordSectionsRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordSectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordSectionsRequest) ProtoMessage() {}

func (x *RecordSectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordSectionsRequest.ProtoReflect.Descriptor instead.
func (*RecordSectionsRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{16}
}

func (x *RecordSectionsRequest) GetData() []*typespb.Section {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordTestCasesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*typespb.TestCase    `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordTestCasesRequest) Reset() {
	*x = RecordTestCasesRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordTestCasesRequest) ProtoMessage() {}

func (x *RecordTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordTestCasesRequest.ProtoReflect.Descriptor instead.
func (*RecordTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{17}
}

func (x *RecordTestCasesRequest) GetData() []*typespb.TestCase {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordTestReportsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*typespb.TestReport  `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordTestReportsRequest) Reset() {
	*x = RecordTestReportsRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordTestReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordTestReportsRequest) ProtoMessage() {}

func (x *RecordTestReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordTestReportsRequest.ProtoReflect.Descriptor instead.
func (*RecordTestReportsRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{18}
}

func (x *RecordTestReportsRequest) GetData() []*typespb.TestReport {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordTestSuitesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*typespb.TestSuite   `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordTestSuitesRequest) Reset() {
	*x = RecordTestSuitesRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordTestSuitesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordTestSuitesRequest) ProtoMessage() {}

func (x *RecordTestSuitesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordTestSuitesRequest.ProtoReflect.Descriptor instead.
func (*RecordTestSuitesRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{19}
}

func (x *RecordTestSuitesRequest) GetData() []*typespb.TestSuite {
	if x != nil {
		return x.Data
	}
	return nil
}

type RecordTracesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*typespb.Trace       `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordTracesRequest) Reset() {
	*x = RecordTracesRequest{}
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordTracesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordTracesRequest) ProtoMessage() {}

func (x *RecordTracesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gitlabexporter_protobuf_service_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordTracesRequest.ProtoReflect.Descriptor instead.
func (*RecordTracesRequest) Descriptor() ([]byte, []int) {
	return file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP(), []int{20}
}

func (x *RecordTracesRequest) GetData() []*typespb.Trace {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_gitlabexporter_protobuf_service_service_proto protoreflect.FileDescriptor

const file_gitlabexporter_protobuf_service_service_proto_rawDesc = "" +
	"\n" +
	"-gitlabexporter/protobuf/service/service.proto\x12\x1fgitlabexporter.protobuf.service\x1a\x1fgoogle/protobuf/timestamp.proto\x1a$gitlabexporter/protobuf/commit.proto\x1a&gitlabexporter/protobuf/coverage.proto\x1a(gitlabexporter/protobuf/deployment.proto\x1a#gitlabexporter/protobuf/issue.proto\x1a!gitlabexporter/protobuf/job.proto\x1a+gitlabexporter/protobuf/merge_request.proto\x1a$gitlabexporter/protobuf/metric.proto\x1a&gitlabexporter/protobuf/pipeline.proto\x1a%gitlabexporter/protobuf/project.proto\x1a$gitlabexporter/protobuf/runner.proto\x1a%gitlabexporter/protobuf/section.proto\x1a)gitlabexporter/protobuf/test_report.proto\x1a#gitlabexporter/protobuf/trace.proto\"6\n" +
	"\rRecordSummary\x12%\n" +
	"\x0erecorded_count\x18\x01 \x01(\x05R\rrecordedCount\"\x8f\x01\n" +
	"\x15RecordRequestMetadata\x129\n" +
	"\n" +
	"fetched_at\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tfetchedAt\x12;\n" +
	"\vexported_at\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"exportedAt\"K\n" +
	"\x14RecordCommitsRequest\x123\n" +
	"\x04data\x18\x01 \x03(\v2\x1f.gitlabexporter.protobuf.CommitR\x04data\"[\n" +
	"\x1cRecordCoverageReportsRequest\x12;\n" +
	"\x04data\x18\x01 \x03(\v2'.gitlabexporter.protobuf.CoverageReportR\x04data\"]\n" +
	"\x1dRecordCoveragePackagesRequest\x12<\n" +
	"\x04data\x18\x01 \x03(\v2(.gitlabexporter.protobuf.CoveragePackageR\x04data\"Z\n" +
	"\x1cRecordCoverageClassesRequest\x12:\n" +
	"\x04data\x18\x01 \x03(\v2&.gitlabexporter.protobuf.CoverageClassR\x04data\"[\n" +
	"\x1cRecordCoverageMethodsRequest\x12;\n" +
	"\x04data\x18\x01 \x03(\v2'.gitlabexporter.protobuf.CoverageMethodR\x04data\"S\n" +
	"\x18RecordDeploymentsRequest\x127\n" +
	"\x04data\x18\x01 \x03(\v2#.gitlabexporter.protobuf.DeploymentR\x04data\"I\n" +
	"\x13RecordIssuesRequest\x122\n" +
	"\x04data\x18\x01 \x03(\v2\x1e.gitlabexporter.protobuf.IssueR\x04data\"E\n" +
	"\x11RecordJobsRequest\x120\n" +
	"\x04data\x18\x01 \x03(\v2\x1c.gitlabexporter.protobuf.JobR\x04data\"W\n" +
	"\x1aRecordMergeRequestsRequest\x129\n" +
	"\x04data\x18\x01 \x03(\v2%.gitlabexporter.protobuf.MergeRequestR\x04data\"i\n" +
	"#RecordMergeRequestNoteEventsRequest\x12B\n" +
	"\x04data\x18\x01 \x03(\v2..gitlabexporter.protobuf.MergeRequestNoteEventR\x04data\"K\n" +
	"\x14RecordMetricsRequest\x123\n" +
	"\x04data\x18\x01 \x03(\v2\x1f.gitlabexporter.protobuf.MetricR\x04data\"O\n" +
	"\x16RecordPipelinesRequest\x125\n" +
	"\x04data\x18\x01 \x03(\v2!.gitlabexporter.protobuf.PipelineR\x04data\"M\n" +
	"\x15RecordProjectsRequest\x124\n" +
	"\x04data\x18\x01 \x03(\v2 .gitlabexporter.protobuf.ProjectR\x04data\"\x9f\x01\n" +
	"\x14RecordRunnersRequest\x123\n" +
	"\x04data\x18\x01 \x03(\v2\x1f.gitlabexporter.protobuf.RunnerR\x04data\x12R\n" +
	"\bmetadata\x18\x02 \x01(\v26.gitlabexporter.protobuf.service.RecordRequestMetadataR\bmetadata\"M\n" +
	"\x15RecordSectionsRequest\x124\n" +
	"\x04data\x18\x01 \x03(\v2 .gitlabexporter.protobuf.SectionR\x04data\"O\n" +
	"\x16RecordTestCasesRequest\x125\n" +
	"\x04data\x18\x01 \x03(\v2!.gitlabexporter.protobuf.TestCaseR\x04data\"S\n" +
	"\x18RecordTestReportsRequest\x127\n" +
	"\x04data\x18\x01 \x03(\v2#.gitlabexporter.protobuf.TestReportR\x04data\"Q\n" +
	"\x17RecordTestSuitesRequest\x126\n" +
	"\x04data\x18\x01 \x03(\v2\".gitlabexporter.protobuf.TestSuiteR\x04data\"I\n" +
	"\x13RecordTracesRequest\x122\n" +
	"\x04data\x18\x01 \x03(\v2\x1e.gitlabexporter.protobuf.TraceR\x04data2\xaa\x13\n" +
	"\x0eGitLabExporter\x12x\n" +
	"\rRecordCommits\x125.gitlabexporter.protobuf.service.RecordCommitsRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12\x88\x01\n" +
	"\x15RecordCoverageReports\x12=.gitlabexporter.protobuf.service.RecordCoverageReportsRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12\x8a\x01\n" +
	"\x16RecordCoveragePackages\x12>.gitlabexporter.protobuf.service.RecordCoveragePackagesRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12\x88\x01\n" +
	"\x15RecordCoverageClasses\x12=.gitlabexporter.protobuf.service.RecordCoverageClassesRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12\x88\x01\n" +
	"\x15RecordCoverageMethods\x12=.gitlabexporter.protobuf.service.RecordCoverageMethodsRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12\x80\x01\n" +
	"\x11RecordDeployments\x129.gitlabexporter.protobuf.service.RecordDeploymentsRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12v\n" +
	"\fRecordIssues\x124.gitlabexporter.protobuf.service.RecordIssuesRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12r\n" +
	"\n" +
	"RecordJobs\x122.gitlabexporter.protobuf.service.RecordJobsRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12\x84\x01\n" +
	"\x13RecordMergeRequests\x12;.gitlabexporter.protobuf.service.RecordMergeRequestsRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12\x96\x01\n" +
	"\x1cRecordMergeRequestNoteEvents\x12D.gitlabexporter.protobuf.service.RecordMergeRequestNoteEventsRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12x\n" +
	"\rRecordMetrics\x125.gitlabexporter.protobuf.service.RecordMetricsRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12|\n" +
	"\x0fRecordPipelines\x127.gitlabexporter.protobuf.service.RecordPipelinesRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12z\n" +
	"\x0eRecordProjects\x126.gitlabexporter.protobuf.service.RecordProjectsRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12x\n" +
	"\rRecordRunners\x125.gitlabexporter.protobuf.service.RecordRunnersRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12z\n" +
	"\x0eRecordSections\x126.gitlabexporter.protobuf.service.RecordSectionsRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12|\n" +
	"\x0fRecordTestCases\x127.gitlabexporter.protobuf.service.RecordTestCasesRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12\x80\x01\n" +
	"\x11RecordTestReports\x129.gitlabexporter.protobuf.service.RecordTestReportsRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12~\n" +
	"\x10RecordTestSuites\x128.gitlabexporter.protobuf.service.RecordTestSuitesRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00\x12v\n" +
	"\fRecordTraces\x124.gitlabexporter.protobuf.service.RecordTracesRequest\x1a..gitlabexporter.protobuf.service.RecordSummary\"\x00B2Z0go.cluttr.dev/gitlab-exporter/protobuf/servicepbb\x06proto3"

var (
	file_gitlabexporter_protobuf_service_service_proto_rawDescOnce sync.Once
	file_gitlabexporter_protobuf_service_service_proto_rawDescData []byte
)

func file_gitlabexporter_protobuf_service_service_proto_rawDescGZIP() []byte {
	file_gitlabexporter_protobuf_service_service_proto_rawDescOnce.Do(func() {
		file_gitlabexporter_protobuf_service_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_service_service_proto_rawDesc), len(file_gitlabexporter_protobuf_service_service_proto_rawDesc)))
	})
	return file_gitlabexporter_protobuf_service_service_proto_rawDescData
}

var file_gitlabexporter_protobuf_service_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_gitlabexporter_protobuf_service_service_proto_goTypes = []any{
	(*RecordSummary)(nil),                       // 0: gitlabexporter.protobuf.service.RecordSummary
	(*RecordRequestMetadata)(nil),               // 1: gitlabexporter.protobuf.service.RecordRequestMetadata
	(*RecordCommitsRequest)(nil),                // 2: gitlabexporter.protobuf.service.RecordCommitsRequest
	(*RecordCoverageReportsRequest)(nil),        // 3: gitlabexporter.protobuf.service.RecordCoverageReportsRequest
	(*RecordCoveragePackagesRequest)(nil),       // 4: gitlabexporter.protobuf.service.RecordCoveragePackagesRequest
	(*RecordCoverageClassesRequest)(nil),        // 5: gitlabexporter.protobuf.service.RecordCoverageClassesRequest
	(*RecordCoverageMethodsRequest)(nil),        // 6: gitlabexporter.protobuf.service.RecordCoverageMethodsRequest
	(*RecordDeploymentsRequest)(nil),            // 7: gitlabexporter.protobuf.service.RecordDeploymentsRequest
	(*RecordIssuesRequest)(nil),                 // 8: gitlabexporter.protobuf.service.RecordIssuesRequest
	(*RecordJobsRequest)(nil),                   // 9: gitlabexporter.protobuf.service.RecordJobsRequest
	(*RecordMergeRequestsRequest)(nil),          // 10: gitlabexporter.protobuf.service.RecordMergeRequestsRequest
	(*RecordMergeRequestNoteEventsRequest)(nil), // 11: gitlabexporter.protobuf.service.RecordMergeRequestNoteEventsRequest
	(*RecordMetricsRequest)(nil),                // 12: gitlabexporter.protobuf.service.RecordMetricsRequest
	(*RecordPipelinesRequest)(nil),              // 13: gitlabexporter.protobuf.service.RecordPipelinesRequest
	(*RecordProjectsRequest)(nil),               // 14: gitlabexporter.protobuf.service.RecordProjectsRequest
	(*RecordRunnersRequest)(nil),                // 15: gitlabexporter.protobuf.service.RecordRunnersRequest
	(*RecordSectionsRequest)(nil),               // 16: gitlabexporter.protobuf.service.RecordSectionsRequest
	(*RecordTestCasesRequest)(nil),              // 17: gitlabexporter.protobuf.service.RecordTestCasesRequest
	(*RecordTestReportsRequest)(nil),            // 18: gitlabexporter.protobuf.service.RecordTestReportsRequest
	(*RecordTestSuitesRequest)(nil),             // 19: gitlabexporter.protobuf.service.RecordTestSuitesRequest
	(*RecordTracesRequest)(nil),                 // 20: gitlabexporter.protobuf.service.RecordTracesRequest
	(*timestamppb.Timestamp)(nil),               // 21: google.protobuf.Timestamp
	(*typespb.Commit)(nil),                      // 22: gitlabexporter.protobuf.Commit
	(*typespb.CoverageReport)(nil),              // 23: gitlabexporter.protobuf.CoverageReport
	(*typespb.CoveragePackage)(nil),             // 24: gitlabexporter.protobuf.CoveragePackage
	(*typespb.CoverageClass)(nil),               // 25: gitlabexporter.protobuf.CoverageClass
	(*typespb.CoverageMethod)(nil),              // 26: gitlabexporter.protobuf.CoverageMethod
	(*typespb.Deployment)(nil),                  // 27: gitlabexporter.protobuf.Deployment
	(*typespb.Issue)(nil),                       // 28: gitlabexporter.protobuf.Issue
	(*typespb.Job)(nil),                         // 29: gitlabexporter.protobuf.Job
	(*typespb.MergeRequest)(nil),                // 30: gitlabexporter.protobuf.MergeRequest
	(*typespb.MergeRequestNoteEvent)(nil),       // 31: gitlabexporter.protobuf.MergeRequestNoteEvent
	(*typespb.Metric)(nil),                      // 32: gitlabexporter.protobuf.Metric
	(*typespb.Pipeline)(nil),                    // 33: gitlabexporter.protobuf.Pipeline
	(*typespb.Project)(nil),                     // 34: gitlabexporter.protobuf.Project
	(*typespb.Runner)(nil),                      // 35: gitlabexporter.protobuf.Runner
	(*typespb.Section)(nil),                     // 36: gitlabexporter.protobuf.Section
	(*typespb.TestCase)(nil),                    // 37: gitlabexporter.protobuf.TestCase
	(*typespb.TestReport)(nil),                  // 38: gitlabexporter.protobuf.TestReport
	(*typespb.TestSuite)(nil),                   // 39: gitlabexporter.protobuf.TestSuite
	(*typespb.Trace)(nil),                       // 40: gitlabexporter.protobuf.Trace
}
var file_gitlabexporter_protobuf_service_service_proto_depIdxs = []int32{
	21, // 0: gitlabexporter.protobuf.service.RecordRequestMetadata.fetched_at:type_name -> google.protobuf.Timestamp
	21, // 1: gitlabexporter.protobuf.service.RecordRequestMetadata.exported_at:type_name -> google.protobuf.Timestamp
	22, // 2: gitlabexporter.protobuf.service.RecordCommitsRequest.data:type_name -> gitlabexporter.protobuf.Commit
	23, // 3: gitlabexporter.protobuf.service.RecordCoverageReportsRequest.data:type_name -> gitlabexporter.protobuf.CoverageReport
	24, // 4: gitlabexporter.protobuf.service.RecordCoveragePackagesRequest.data:type_name -> gitlabexporter.protobuf.CoveragePackage
	25, // 5: gitlabexporter.protobuf.service.RecordCoverageClassesRequest.data:type_name -> gitlabexporter.protobuf.CoverageClass
	26, // 6: gitlabexporter.protobuf.service.RecordCoverageMethodsRequest.data:type_name -> gitlabexporter.protobuf.CoverageMethod
	27, // 7: gitlabexporter.protobuf.service.RecordDeploymentsRequest.data:type_name -> gitlabexporter.protobuf.Deployment
	28, // 8: gitlabexporter.protobuf.service.RecordIssuesRequest.data:type_name -> gitlabexporter.protobuf.Issue
	29, // 9: gitlabexporter.protobuf.service.RecordJobsRequest.data:type_name -> gitlabexporter.protobuf.Job
	30, // 10: gitlabexporter.protobuf.service.RecordMergeRequestsRequest.data:type_name -> gitlabexporter.protobuf.MergeRequest
	31, // 11: gitlabexporter.protobuf.service.RecordMergeRequestNoteEventsRequest.data:type_name -> gitlabexporter.protobuf.MergeRequestNoteEvent
	32, // 12: gitlabexporter.protobuf.service.RecordMetricsRequest.data:type_name -> gitlabexporter.protobuf.Metric
	33, // 13: gitlabexporter.protobuf.service.RecordPipelinesRequest.data:type_name -> gitlabexporter.protobuf.Pipeline
	34, // 14: gitlabexporter.protobuf.service.RecordProjectsRequest.data:type_name -> gitlabexporter.protobuf.Project
	35, // 15: gitlabexporter.protobuf.service.RecordRunnersRequest.data:type_name -> gitlabexporter.protobuf.Runner
	1,  // 16: gitlabexporter.protobuf.service.RecordRunnersRequest.metadata:type_name -> gitlabexporter.protobuf.service.RecordRequestMetadata
	36, // 17: gitlabexporter.protobuf.service.RecordSectionsRequest.data:type_name -> gitlabexporter.protobuf.Section
	37, // 18: gitlabexporter.protobuf.service.RecordTestCasesRequest.data:type_name -> gitlabexporter.protobuf.TestCase
	38, // 19: gitlabexporter.protobuf.service.RecordTestReportsRequest.data:type_name -> gitlabexporter.protobuf.TestReport
	39, // 20: gitlabexporter.protobuf.service.RecordTestSuitesRequest.data:type_name -> gitlabexporter.protobuf.TestSuite
	40, // 21: gitlabexporter.protobuf.service.RecordTracesRequest.data:type_name -> gitlabexporter.protobuf.Trace
	2,  // 22: gitlabexporter.protobuf.service.GitLabExporter.RecordCommits:input_type -> gitlabexporter.protobuf.service.RecordCommitsRequest
	3,  // 23: gitlabexporter.protobuf.service.GitLabExporter.RecordCoverageReports:input_type -> gitlabexporter.protobuf.service.RecordCoverageReportsRequest
	4,  // 24: gitlabexporter.protobuf.service.GitLabExporter.RecordCoveragePackages:input_type -> gitlabexporter.protobuf.service.RecordCoveragePackagesRequest
	5,  // 25: gitlabexporter.protobuf.service.GitLabExporter.RecordCoverageClasses:input_type -> gitlabexporter.protobuf.service.RecordCoverageClassesRequest
	6,  // 26: gitlabexporter.protobuf.service.GitLabExporter.RecordCoverageMethods:input_type -> gitlabexporter.protobuf.service.RecordCoverageMethodsRequest
	7,  // 27: gitlabexporter.protobuf.service.GitLabExporter.RecordDeployments:input_type -> gitlabexporter.protobuf.service.RecordDeploymentsRequest
	8,  // 28: gitlabexporter.protobuf.service.GitLabExporter.RecordIssues:input_type -> gitlabexporter.protobuf.service.RecordIssuesRequest
	9,  // 29: gitlabexporter.protobuf.service.GitLabExporter.RecordJobs:input_type -> gitlabexporter.protobuf.service.RecordJobsRequest
	10, // 30: gitlabexporter.protobuf.service.GitLabExporter.RecordMergeRequests:input_type -> gitlabexporter.protobuf.service.RecordMergeRequestsRequest
	11, // 31: gitlabexporter.protobuf.service.GitLabExporter.RecordMergeRequestNoteEvents:input_type -> gitlabexporter.protobuf.service.RecordMergeRequestNoteEventsRequest
	12, // 32: gitlabexporter.protobuf.service.GitLabExporter.RecordMetrics:input_type -> gitlabexporter.protobuf.service.RecordMetricsRequest
	13, // 33: gitlabexporter.protobuf.service.GitLabExporter.RecordPipelines:input_type -> gitlabexporter.protobuf.service.RecordPipelinesRequest
	14, // 34: gitlabexporter.protobuf.service.GitLabExporter.RecordProjects:input_type -> gitlabexporter.protobuf.service.RecordProjectsRequest
	15, // 35: gitlabexporter.protobuf.service.GitLabExporter.RecordRunners:input_type -> gitlabexporter.protobuf.service.RecordRunnersRequest
	16, // 36: gitlabexporter.protobuf.service.GitLabExporter.RecordSections:input_type -> gitlabexporter.protobuf.service.RecordSectionsRequest
	17, // 37: gitlabexporter.protobuf.service.GitLabExporter.RecordTestCases:input_type -> gitlabexporter.protobuf.service.RecordTestCasesRequest
	18, // 38: gitlabexporter.protobuf.service.GitLabExporter.RecordTestReports:input_type -> gitlabexporter.protobuf.service.RecordTestReportsRequest
	19, // 39: gitlabexporter.protobuf.service.GitLabExporter.RecordTestSuites:input_type -> gitlabexporter.protobuf.service.RecordTestSuitesRequest
	20, // 40: gitlabexporter.protobuf.service.GitLabExporter.RecordTraces:input_type -> gitlabexporter.protobuf.service.RecordTracesRequest
	0,  // 41: gitlabexporter.protobuf.service.GitLabExporter.RecordCommits:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 42: gitlabexporter.protobuf.service.GitLabExporter.RecordCoverageReports:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 43: gitlabexporter.protobuf.service.GitLabExporter.RecordCoveragePackages:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 44: gitlabexporter.protobuf.service.GitLabExporter.RecordCoverageClasses:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 45: gitlabexporter.protobuf.service.GitLabExporter.RecordCoverageMethods:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 46: gitlabexporter.protobuf.service.GitLabExporter.RecordDeployments:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 47: gitlabexporter.protobuf.service.GitLabExporter.RecordIssues:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 48: gitlabexporter.protobuf.service.GitLabExporter.RecordJobs:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 49: gitlabexporter.protobuf.service.GitLabExporter.RecordMergeRequests:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 50: gitlabexporter.protobuf.service.GitLabExporter.RecordMergeRequestNoteEvents:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 51: gitlabexporter.protobuf.service.GitLabExporter.RecordMetrics:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 52: gitlabexporter.protobuf.service.GitLabExporter.RecordPipelines:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 53: gitlabexporter.protobuf.service.GitLabExporter.RecordProjects:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 54: gitlabexporter.protobuf.service.GitLabExporter.RecordRunners:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 55: gitlabexporter.protobuf.service.GitLabExporter.RecordSections:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 56: gitlabexporter.protobuf.service.GitLabExporter.RecordTestCases:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 57: gitlabexporter.protobuf.service.GitLabExporter.RecordTestReports:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 58: gitlabexporter.protobuf.service.GitLabExporter.RecordTestSuites:output_type -> gitlabexporter.protobuf.service.RecordSummary
	0,  // 59: gitlabexporter.protobuf.service.GitLabExporter.RecordTraces:output_type -> gitlabexporter.protobuf.service.RecordSummary
	41, // [41:60] is the sub-list for method output_type
	22, // [22:41] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_gitlabexporter_protobuf_service_service_proto_init() }
func file_gitlabexporter_protobuf_service_service_proto_init() {
	if File_gitlabexporter_protobuf_service_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gitlabexporter_protobuf_service_service_proto_rawDesc), len(file_gitlabexporter_protobuf_service_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gitlabexporter_protobuf_service_service_proto_goTypes,
		DependencyIndexes: file_gitlabexporter_protobuf_service_service_proto_depIdxs,
		MessageInfos:      file_gitlabexporter_protobuf_service_service_proto_msgTypes,
	}.Build()
	File_gitlabexporter_protobuf_service_service_proto = out.File
	file_gitlabexporter_protobuf_service_service_proto_goTypes = nil
	file_gitlabexporter_protobuf_service_service_proto_depIdxs = nil
}
