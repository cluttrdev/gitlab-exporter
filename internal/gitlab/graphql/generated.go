// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package graphql

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

type CiJobKind string

const (
	// Standard CI job.
	CiJobKindBuild CiJobKind = "BUILD"
	// Bridge CI job connecting a parent and child pipeline.
	CiJobKindBridge CiJobKind = "BRIDGE"
)

type CiJobStatus string

const (
	// A job that is created.
	CiJobStatusCreated CiJobStatus = "CREATED"
	// A job that is waiting for resource.
	CiJobStatusWaitingForResource CiJobStatus = "WAITING_FOR_RESOURCE"
	// A job that is preparing.
	CiJobStatusPreparing CiJobStatus = "PREPARING"
	// A job that is waiting for callback.
	CiJobStatusWaitingForCallback CiJobStatus = "WAITING_FOR_CALLBACK"
	// A job that is pending.
	CiJobStatusPending CiJobStatus = "PENDING"
	// A job that is running.
	CiJobStatusRunning CiJobStatus = "RUNNING"
	// A job that is success.
	CiJobStatusSuccess CiJobStatus = "SUCCESS"
	// A job that is failed.
	CiJobStatusFailed CiJobStatus = "FAILED"
	// A job that is canceling.
	CiJobStatusCanceling CiJobStatus = "CANCELING"
	// A job that is canceled.
	CiJobStatusCanceled CiJobStatus = "CANCELED"
	// A job that is skipped.
	CiJobStatusSkipped CiJobStatus = "SKIPPED"
	// A job that is manual.
	CiJobStatusManual CiJobStatus = "MANUAL"
	// A job that is scheduled.
	CiJobStatusScheduled CiJobStatus = "SCHEDULED"
)

// Detailed representation of whether a GitLab merge request can be merged.
type DetailedMergeStatus string

const (
	// Merge status has not been checked.
	DetailedMergeStatusUnchecked DetailedMergeStatus = "UNCHECKED"
	// Currently checking for mergeability.
	DetailedMergeStatusChecking DetailedMergeStatus = "CHECKING"
	// Branch can be merged.
	DetailedMergeStatusMergeable DetailedMergeStatus = "MERGEABLE"
	// Source branch exists and contains commits.
	DetailedMergeStatusCommitsStatus DetailedMergeStatus = "COMMITS_STATUS"
	// Pipeline must succeed before merging.
	DetailedMergeStatusCiMustPass DetailedMergeStatus = "CI_MUST_PASS"
	// Pipeline is still running.
	DetailedMergeStatusCiStillRunning DetailedMergeStatus = "CI_STILL_RUNNING"
	// Discussions must be resolved before merging.
	DetailedMergeStatusDiscussionsNotResolved DetailedMergeStatus = "DISCUSSIONS_NOT_RESOLVED"
	// Merge request must not be draft before merging.
	DetailedMergeStatusDraftStatus DetailedMergeStatus = "DRAFT_STATUS"
	// Merge request must be open before merging.
	DetailedMergeStatusNotOpen DetailedMergeStatus = "NOT_OPEN"
	// Merge request must be approved before merging.
	DetailedMergeStatusNotApproved DetailedMergeStatus = "NOT_APPROVED"
	// Merge request dependencies must be merged.
	DetailedMergeStatusBlockedStatus DetailedMergeStatus = "BLOCKED_STATUS"
	// Status checks must pass.
	DetailedMergeStatusExternalStatusChecks DetailedMergeStatus = "EXTERNAL_STATUS_CHECKS"
	// Merge request diff is being created.
	DetailedMergeStatusPreparing DetailedMergeStatus = "PREPARING"
	// Either the title or description must reference a Jira issue.
	DetailedMergeStatusJiraAssociation DetailedMergeStatus = "JIRA_ASSOCIATION"
	// There are conflicts between the source and target branches.
	DetailedMergeStatusConflict DetailedMergeStatus = "CONFLICT"
	// Merge request needs to be rebased.
	DetailedMergeStatusNeedRebase DetailedMergeStatus = "NEED_REBASE"
	// Merge request approvals currently syncing.
	DetailedMergeStatusApprovalsSyncing DetailedMergeStatus = "APPROVALS_SYNCING"
	// Merge request includes locked paths.
	DetailedMergeStatusLockedPaths DetailedMergeStatus = "LOCKED_PATHS"
	// Merge request includes locked LFS files.
	DetailedMergeStatusLockedLfsFiles DetailedMergeStatus = "LOCKED_LFS_FILES"
	// All security policies must be evaluated.
	DetailedMergeStatusSecurityPoliciesEvaluating DetailedMergeStatus = "SECURITY_POLICIES_EVALUATING"
	// Merge request may not be merged until after the specified time.
	DetailedMergeStatusMergeTime DetailedMergeStatus = "MERGE_TIME"
	// All policy rules must be satisfied.
	DetailedMergeStatusSecurityPoliciesViolations DetailedMergeStatus = "SECURITY_POLICIES_VIOLATIONS"
	// Indicates a reviewer has requested changes.
	DetailedMergeStatusRequestedChanges DetailedMergeStatus = "REQUESTED_CHANGES"
)

// JobFieldsCore includes the GraphQL fields of CiJob requested by the fragment JobFieldsCore.
type JobFieldsCore struct {
	// Name of the job.
	Name *string `json:"name"`
	// Ref name of the job.
	RefName *string `json:"refName"`
	// Status of the job.
	Status *CiJobStatus `json:"status"`
	// When the job was created.
	CreatedAt time.Time `json:"createdAt"`
	// When the job was enqueued and marked as pending.
	QueuedAt *time.Time `json:"queuedAt"`
	// When the job was started.
	StartedAt *time.Time `json:"startedAt"`
	// When a job has finished running.
	FinishedAt *time.Time `json:"finishedAt"`
	// When the job was erased.
	ErasedAt *time.Time `json:"erasedAt"`
	// Duration of the job in seconds.
	Duration *int `json:"duration"`
	// How long the job was enqueued before starting.
	QueuedDuration *float64 `json:"queuedDuration"`
	// Coverage level of the job.
	Coverage *float64 `json:"coverage"`
	// Whether the job is allowed to fail.
	AllowFailure bool `json:"allowFailure"`
	// Message on why the job failed.
	FailureMessage *string `json:"failureMessage"`
}

// GetName returns JobFieldsCore.Name, and is useful for accessing the field via an interface.
func (v *JobFieldsCore) GetName() *string { return v.Name }

// GetRefName returns JobFieldsCore.RefName, and is useful for accessing the field via an interface.
func (v *JobFieldsCore) GetRefName() *string { return v.RefName }

// GetStatus returns JobFieldsCore.Status, and is useful for accessing the field via an interface.
func (v *JobFieldsCore) GetStatus() *CiJobStatus { return v.Status }

// GetCreatedAt returns JobFieldsCore.CreatedAt, and is useful for accessing the field via an interface.
func (v *JobFieldsCore) GetCreatedAt() time.Time { return v.CreatedAt }

// GetQueuedAt returns JobFieldsCore.QueuedAt, and is useful for accessing the field via an interface.
func (v *JobFieldsCore) GetQueuedAt() *time.Time { return v.QueuedAt }

// GetStartedAt returns JobFieldsCore.StartedAt, and is useful for accessing the field via an interface.
func (v *JobFieldsCore) GetStartedAt() *time.Time { return v.StartedAt }

// GetFinishedAt returns JobFieldsCore.FinishedAt, and is useful for accessing the field via an interface.
func (v *JobFieldsCore) GetFinishedAt() *time.Time { return v.FinishedAt }

// GetErasedAt returns JobFieldsCore.ErasedAt, and is useful for accessing the field via an interface.
func (v *JobFieldsCore) GetErasedAt() *time.Time { return v.ErasedAt }

// GetDuration returns JobFieldsCore.Duration, and is useful for accessing the field via an interface.
func (v *JobFieldsCore) GetDuration() *int { return v.Duration }

// GetQueuedDuration returns JobFieldsCore.QueuedDuration, and is useful for accessing the field via an interface.
func (v *JobFieldsCore) GetQueuedDuration() *float64 { return v.QueuedDuration }

// GetCoverage returns JobFieldsCore.Coverage, and is useful for accessing the field via an interface.
func (v *JobFieldsCore) GetCoverage() *float64 { return v.Coverage }

// GetAllowFailure returns JobFieldsCore.AllowFailure, and is useful for accessing the field via an interface.
func (v *JobFieldsCore) GetAllowFailure() bool { return v.AllowFailure }

// GetFailureMessage returns JobFieldsCore.FailureMessage, and is useful for accessing the field via an interface.
func (v *JobFieldsCore) GetFailureMessage() *string { return v.FailureMessage }

// JobFieldsExtra includes the GraphQL fields of CiJob requested by the fragment JobFieldsExtra.
type JobFieldsExtra struct {
	// Stage of the job.
	Stage *JobFieldsExtraStageCiStage `json:"stage"`
	// Tags for the current job.
	Tags []string `json:"tags"`
	// Whether the job has a manual action.
	ManualJob *bool `json:"manualJob"`
	// Indicates the job can be retried.
	Retryable bool `json:"retryable"`
	// Indicates that the job has been retried.
	Retried *bool `json:"retried"`
	// Indicates the type of job.
	Kind CiJobKind `json:"kind"`
	// Downstream pipeline for a bridge.
	DownstreamPipeline *JobFieldsExtraDownstreamPipeline `json:"downstreamPipeline"`
	// Runner assigned to execute the job.
	Runner *JobFieldsExtraRunnerCiRunner `json:"runner"`
}

// GetStage returns JobFieldsExtra.Stage, and is useful for accessing the field via an interface.
func (v *JobFieldsExtra) GetStage() *JobFieldsExtraStageCiStage { return v.Stage }

// GetTags returns JobFieldsExtra.Tags, and is useful for accessing the field via an interface.
func (v *JobFieldsExtra) GetTags() []string { return v.Tags }

// GetManualJob returns JobFieldsExtra.ManualJob, and is useful for accessing the field via an interface.
func (v *JobFieldsExtra) GetManualJob() *bool { return v.ManualJob }

// GetRetryable returns JobFieldsExtra.Retryable, and is useful for accessing the field via an interface.
func (v *JobFieldsExtra) GetRetryable() bool { return v.Retryable }

// GetRetried returns JobFieldsExtra.Retried, and is useful for accessing the field via an interface.
func (v *JobFieldsExtra) GetRetried() *bool { return v.Retried }

// GetKind returns JobFieldsExtra.Kind, and is useful for accessing the field via an interface.
func (v *JobFieldsExtra) GetKind() CiJobKind { return v.Kind }

// GetDownstreamPipeline returns JobFieldsExtra.DownstreamPipeline, and is useful for accessing the field via an interface.
func (v *JobFieldsExtra) GetDownstreamPipeline() *JobFieldsExtraDownstreamPipeline {
	return v.DownstreamPipeline
}

// GetRunner returns JobFieldsExtra.Runner, and is useful for accessing the field via an interface.
func (v *JobFieldsExtra) GetRunner() *JobFieldsExtraRunnerCiRunner { return v.Runner }

// JobFieldsExtraDownstreamPipeline includes the requested fields of the GraphQL type Pipeline.
type JobFieldsExtraDownstreamPipeline struct {
	// ID of the pipeline.
	Id string `json:"id"`
	// Internal ID of the pipeline.
	Iid string `json:"iid"`
	// Project the pipeline belongs to.
	Project *JobFieldsExtraDownstreamPipelineProject `json:"project"`
}

// GetId returns JobFieldsExtraDownstreamPipeline.Id, and is useful for accessing the field via an interface.
func (v *JobFieldsExtraDownstreamPipeline) GetId() string { return v.Id }

// GetIid returns JobFieldsExtraDownstreamPipeline.Iid, and is useful for accessing the field via an interface.
func (v *JobFieldsExtraDownstreamPipeline) GetIid() string { return v.Iid }

// GetProject returns JobFieldsExtraDownstreamPipeline.Project, and is useful for accessing the field via an interface.
func (v *JobFieldsExtraDownstreamPipeline) GetProject() *JobFieldsExtraDownstreamPipelineProject {
	return v.Project
}

// JobFieldsExtraDownstreamPipelineProject includes the requested fields of the GraphQL type Project.
type JobFieldsExtraDownstreamPipelineProject struct {
	// ID of the project.
	Id string `json:"id"`
	// Full path of the project.
	FullPath string `json:"fullPath"`
}

// GetId returns JobFieldsExtraDownstreamPipelineProject.Id, and is useful for accessing the field via an interface.
func (v *JobFieldsExtraDownstreamPipelineProject) GetId() string { return v.Id }

// GetFullPath returns JobFieldsExtraDownstreamPipelineProject.FullPath, and is useful for accessing the field via an interface.
func (v *JobFieldsExtraDownstreamPipelineProject) GetFullPath() string { return v.FullPath }

// JobFieldsExtraRunnerCiRunner includes the requested fields of the GraphQL type CiRunner.
type JobFieldsExtraRunnerCiRunner struct {
	// ID of the runner.
	Id string `json:"id"`
}

// GetId returns JobFieldsExtraRunnerCiRunner.Id, and is useful for accessing the field via an interface.
func (v *JobFieldsExtraRunnerCiRunner) GetId() string { return v.Id }

// JobFieldsExtraStageCiStage includes the requested fields of the GraphQL type CiStage.
type JobFieldsExtraStageCiStage struct {
	// Name of the stage.
	Name *string `json:"name"`
}

// GetName returns JobFieldsExtraStageCiStage.Name, and is useful for accessing the field via an interface.
func (v *JobFieldsExtraStageCiStage) GetName() *string { return v.Name }

// JobReferenceFields includes the GraphQL fields of CiJob requested by the fragment JobReferenceFields.
type JobReferenceFields struct {
	// ID of the job.
	Id *string `json:"id"`
}

// GetId returns JobReferenceFields.Id, and is useful for accessing the field via an interface.
func (v *JobReferenceFields) GetId() *string { return v.Id }

// MergeRequestFieldsCore includes the GraphQL fields of MergeRequest requested by the fragment MergeRequestFieldsCore.
type MergeRequestFieldsCore struct {
	// Timestamp of when the merge request was created.
	CreatedAt time.Time `json:"createdAt"`
	// Timestamp of when the merge request was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// Timestamp of when the merge request was merged, null if not merged.
	MergedAt *time.Time `json:"mergedAt"`
	// Timestamp of when the merge request was closed, null if not closed.
	ClosedAt *time.Time `json:"closedAt"`
	// Name or title of this object.
	Name *string `json:"name"`
	// Title of the merge request.
	Title string `json:"title"`
	// Labels of the merge request.
	Labels *MergeRequestFieldsCoreLabelsLabelConnection `json:"labels"`
	// State of the merge request.
	State MergeRequestState `json:"state"`
	// Detailed merge status of the merge request.
	DetailedMergeStatus *DetailedMergeStatus `json:"detailedMergeStatus"`
	// Error message due to a merge error.
	MergeError *string `json:"mergeError"`
	// Indicates if the merge request has all the required approvals.
	Approved bool `json:"approved"`
	// Indicates if the merge request has conflicts.
	Conflicts bool `json:"conflicts"`
	// Indicates if the merge request is a draft.
	Draft bool `json:"draft"`
	// Indicates if the merge request is mergeable.
	Mergeable bool `json:"mergeable"`
}

// GetCreatedAt returns MergeRequestFieldsCore.CreatedAt, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns MergeRequestFieldsCore.UpdatedAt, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetMergedAt returns MergeRequestFieldsCore.MergedAt, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetMergedAt() *time.Time { return v.MergedAt }

// GetClosedAt returns MergeRequestFieldsCore.ClosedAt, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetClosedAt() *time.Time { return v.ClosedAt }

// GetName returns MergeRequestFieldsCore.Name, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetName() *string { return v.Name }

// GetTitle returns MergeRequestFieldsCore.Title, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetTitle() string { return v.Title }

// GetLabels returns MergeRequestFieldsCore.Labels, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetLabels() *MergeRequestFieldsCoreLabelsLabelConnection {
	return v.Labels
}

// GetState returns MergeRequestFieldsCore.State, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetState() MergeRequestState { return v.State }

// GetDetailedMergeStatus returns MergeRequestFieldsCore.DetailedMergeStatus, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetDetailedMergeStatus() *DetailedMergeStatus {
	return v.DetailedMergeStatus
}

// GetMergeError returns MergeRequestFieldsCore.MergeError, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetMergeError() *string { return v.MergeError }

// GetApproved returns MergeRequestFieldsCore.Approved, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetApproved() bool { return v.Approved }

// GetConflicts returns MergeRequestFieldsCore.Conflicts, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetConflicts() bool { return v.Conflicts }

// GetDraft returns MergeRequestFieldsCore.Draft, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetDraft() bool { return v.Draft }

// GetMergeable returns MergeRequestFieldsCore.Mergeable, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCore) GetMergeable() bool { return v.Mergeable }

// MergeRequestFieldsCoreLabelsLabelConnection includes the requested fields of the GraphQL type LabelConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Label.
type MergeRequestFieldsCoreLabelsLabelConnection struct {
	// A list of nodes.
	Nodes []*MergeRequestFieldsCoreLabelsLabelConnectionNodesLabel `json:"nodes"`
}

// GetNodes returns MergeRequestFieldsCoreLabelsLabelConnection.Nodes, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCoreLabelsLabelConnection) GetNodes() []*MergeRequestFieldsCoreLabelsLabelConnectionNodesLabel {
	return v.Nodes
}

// MergeRequestFieldsCoreLabelsLabelConnectionNodesLabel includes the requested fields of the GraphQL type Label.
type MergeRequestFieldsCoreLabelsLabelConnectionNodesLabel struct {
	// Content of the label.
	Title string `json:"title"`
}

// GetTitle returns MergeRequestFieldsCoreLabelsLabelConnectionNodesLabel.Title, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsCoreLabelsLabelConnectionNodesLabel) GetTitle() string { return v.Title }

// MergeRequestFieldsExtra includes the GraphQL fields of MergeRequest requested by the fragment MergeRequestFieldsExtra.
type MergeRequestFieldsExtra struct {
	// ID of the merge request source project.
	SourceProjectId *int `json:"sourceProjectId"`
	// ID of the merge request target project.
	TargetProjectId int `json:"targetProjectId"`
	// Source branch of the merge request.
	SourceBranch string `json:"sourceBranch"`
	// Target branch of the merge request.
	TargetBranch string `json:"targetBranch"`
	// SHA of the merge request commit (set once merged).
	MergeCommitSha *string `json:"mergeCommitSha"`
	// Rebase commit SHA of the merge request.
	RebaseCommitSha *string `json:"rebaseCommitSha"`
	// References of the base SHA, the head SHA, and the start SHA for this merge request.
	DiffRefs *MergeRequestFieldsExtraDiffRefs `json:"diffRefs"`
	// Summary of which files were changed in this merge request.
	DiffStatsSummary *MergeRequestFieldsExtraDiffStatsSummary `json:"diffStatsSummary"`
	// Number of commits in the merge request.
	CommitCount *int `json:"commitCount"`
	// User notes count of the merge request.
	UserNotesCount *int `json:"userNotesCount"`
	// Milestone of the merge request.
	Milestone *MergeRequestFieldsExtraMilestone `json:"milestone"`
}

// GetSourceProjectId returns MergeRequestFieldsExtra.SourceProjectId, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtra) GetSourceProjectId() *int { return v.SourceProjectId }

// GetTargetProjectId returns MergeRequestFieldsExtra.TargetProjectId, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtra) GetTargetProjectId() int { return v.TargetProjectId }

// GetSourceBranch returns MergeRequestFieldsExtra.SourceBranch, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtra) GetSourceBranch() string { return v.SourceBranch }

// GetTargetBranch returns MergeRequestFieldsExtra.TargetBranch, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtra) GetTargetBranch() string { return v.TargetBranch }

// GetMergeCommitSha returns MergeRequestFieldsExtra.MergeCommitSha, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtra) GetMergeCommitSha() *string { return v.MergeCommitSha }

// GetRebaseCommitSha returns MergeRequestFieldsExtra.RebaseCommitSha, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtra) GetRebaseCommitSha() *string { return v.RebaseCommitSha }

// GetDiffRefs returns MergeRequestFieldsExtra.DiffRefs, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtra) GetDiffRefs() *MergeRequestFieldsExtraDiffRefs { return v.DiffRefs }

// GetDiffStatsSummary returns MergeRequestFieldsExtra.DiffStatsSummary, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtra) GetDiffStatsSummary() *MergeRequestFieldsExtraDiffStatsSummary {
	return v.DiffStatsSummary
}

// GetCommitCount returns MergeRequestFieldsExtra.CommitCount, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtra) GetCommitCount() *int { return v.CommitCount }

// GetUserNotesCount returns MergeRequestFieldsExtra.UserNotesCount, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtra) GetUserNotesCount() *int { return v.UserNotesCount }

// GetMilestone returns MergeRequestFieldsExtra.Milestone, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtra) GetMilestone() *MergeRequestFieldsExtraMilestone {
	return v.Milestone
}

// MergeRequestFieldsExtraDiffRefs includes the requested fields of the GraphQL type DiffRefs.
type MergeRequestFieldsExtraDiffRefs struct {
	// Merge base of the branch the comment was made on.
	BaseSha *string `json:"baseSha"`
	// SHA of the HEAD at the time the comment was made.
	HeadSha string `json:"headSha"`
	// SHA of the branch being compared against.
	StartSha string `json:"startSha"`
}

// GetBaseSha returns MergeRequestFieldsExtraDiffRefs.BaseSha, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtraDiffRefs) GetBaseSha() *string { return v.BaseSha }

// GetHeadSha returns MergeRequestFieldsExtraDiffRefs.HeadSha, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtraDiffRefs) GetHeadSha() string { return v.HeadSha }

// GetStartSha returns MergeRequestFieldsExtraDiffRefs.StartSha, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtraDiffRefs) GetStartSha() string { return v.StartSha }

// MergeRequestFieldsExtraDiffStatsSummary includes the requested fields of the GraphQL type DiffStatsSummary.
// The GraphQL type's documentation follows.
//
// Aggregated summary of changes
type MergeRequestFieldsExtraDiffStatsSummary struct {
	// Number of lines added.
	Additions int `json:"additions"`
	// Number of lines changed.
	Changes int `json:"changes"`
	// Number of lines deleted.
	Deletions int `json:"deletions"`
	// Number of files changed.
	FileCount int `json:"fileCount"`
}

// GetAdditions returns MergeRequestFieldsExtraDiffStatsSummary.Additions, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtraDiffStatsSummary) GetAdditions() int { return v.Additions }

// GetChanges returns MergeRequestFieldsExtraDiffStatsSummary.Changes, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtraDiffStatsSummary) GetChanges() int { return v.Changes }

// GetDeletions returns MergeRequestFieldsExtraDiffStatsSummary.Deletions, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtraDiffStatsSummary) GetDeletions() int { return v.Deletions }

// GetFileCount returns MergeRequestFieldsExtraDiffStatsSummary.FileCount, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtraDiffStatsSummary) GetFileCount() int { return v.FileCount }

// MergeRequestFieldsExtraMilestone includes the requested fields of the GraphQL type Milestone.
// The GraphQL type's documentation follows.
//
// Represents a milestone
type MergeRequestFieldsExtraMilestone struct {
	// ID of the milestone.
	Id string `json:"id"`
	// Internal ID of the milestone.
	Iid string `json:"iid"`
	// Project of the milestone.
	Project *MergeRequestFieldsExtraMilestoneProject `json:"project"`
}

// GetId returns MergeRequestFieldsExtraMilestone.Id, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtraMilestone) GetId() string { return v.Id }

// GetIid returns MergeRequestFieldsExtraMilestone.Iid, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtraMilestone) GetIid() string { return v.Iid }

// GetProject returns MergeRequestFieldsExtraMilestone.Project, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtraMilestone) GetProject() *MergeRequestFieldsExtraMilestoneProject {
	return v.Project
}

// MergeRequestFieldsExtraMilestoneProject includes the requested fields of the GraphQL type Project.
type MergeRequestFieldsExtraMilestoneProject struct {
	// ID of the project.
	Id string `json:"id"`
	// Full path of the project.
	FullPath string `json:"fullPath"`
}

// GetId returns MergeRequestFieldsExtraMilestoneProject.Id, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtraMilestoneProject) GetId() string { return v.Id }

// GetFullPath returns MergeRequestFieldsExtraMilestoneProject.FullPath, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsExtraMilestoneProject) GetFullPath() string { return v.FullPath }

// MergeRequestFieldsParticipants includes the GraphQL fields of MergeRequest requested by the fragment MergeRequestFieldsParticipants.
type MergeRequestFieldsParticipants struct {
	// User who created this merge request.
	Author *MergeRequestFieldsParticipantsAuthorMergeRequestAuthor `json:"author"`
	// Assignees of the merge request.
	Assignees *MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnection `json:"assignees"`
	// Users from whom a review has been requested.
	Reviewers *MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnection `json:"reviewers"`
	// Users who approved the merge request.
	ApprovedBy *MergeRequestFieldsParticipantsApprovedByUserCoreConnection `json:"approvedBy"`
	// User who merged this merge request or set it to auto-merge.
	MergeUser *MergeRequestFieldsParticipantsMergeUserUserCore `json:"mergeUser"`
}

// GetAuthor returns MergeRequestFieldsParticipants.Author, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipants) GetAuthor() *MergeRequestFieldsParticipantsAuthorMergeRequestAuthor {
	return v.Author
}

// GetAssignees returns MergeRequestFieldsParticipants.Assignees, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipants) GetAssignees() *MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnection {
	return v.Assignees
}

// GetReviewers returns MergeRequestFieldsParticipants.Reviewers, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipants) GetReviewers() *MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnection {
	return v.Reviewers
}

// GetApprovedBy returns MergeRequestFieldsParticipants.ApprovedBy, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipants) GetApprovedBy() *MergeRequestFieldsParticipantsApprovedByUserCoreConnection {
	return v.ApprovedBy
}

// GetMergeUser returns MergeRequestFieldsParticipants.MergeUser, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipants) GetMergeUser() *MergeRequestFieldsParticipantsMergeUserUserCore {
	return v.MergeUser
}

// MergeRequestFieldsParticipantsApprovedByUserCoreConnection includes the requested fields of the GraphQL type UserCoreConnection.
// The GraphQL type's documentation follows.
//
// The connection type for UserCore.
type MergeRequestFieldsParticipantsApprovedByUserCoreConnection struct {
	// A list of nodes.
	Nodes []*MergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore `json:"nodes"`
}

// GetNodes returns MergeRequestFieldsParticipantsApprovedByUserCoreConnection.Nodes, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipantsApprovedByUserCoreConnection) GetNodes() []*MergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore {
	return v.Nodes
}

// MergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore includes the requested fields of the GraphQL type UserCore.
// The GraphQL type's documentation follows.
//
// Core representation of a GitLab user.
type MergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore struct {
	UserReferenceFieldsUserCore `json:"-"`
}

// GetId returns MergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore.Id, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore) GetId() string {
	return v.UserReferenceFieldsUserCore.Id
}

// GetUsername returns MergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore.Username, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore) GetUsername() string {
	return v.UserReferenceFieldsUserCore.Username
}

func (v *MergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore
		graphql.NoUnmarshalJSON
	}
	firstPass.MergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserReferenceFieldsUserCore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore struct {
	Id string `json:"id"`

	Username string `json:"username"`
}

func (v *MergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore) __premarshalJSON() (*__premarshalMergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore, error) {
	var retval __premarshalMergeRequestFieldsParticipantsApprovedByUserCoreConnectionNodesUserCore

	retval.Id = v.UserReferenceFieldsUserCore.Id
	retval.Username = v.UserReferenceFieldsUserCore.Username
	return &retval, nil
}

// MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnection includes the requested fields of the GraphQL type MergeRequestAssigneeConnection.
// The GraphQL type's documentation follows.
//
// The connection type for MergeRequestAssignee.
type MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnection struct {
	// A list of nodes.
	Nodes []*MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee `json:"nodes"`
}

// GetNodes returns MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnection.Nodes, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnection) GetNodes() []*MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee {
	return v.Nodes
}

// MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee includes the requested fields of the GraphQL type MergeRequestAssignee.
// The GraphQL type's documentation follows.
//
// A user assigned to a merge request.
type MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee struct {
	UserReferenceFieldsMergeRequestAssignee `json:"-"`
}

// GetId returns MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee.Id, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee) GetId() string {
	return v.UserReferenceFieldsMergeRequestAssignee.Id
}

// GetUsername returns MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee.Username, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee) GetUsername() string {
	return v.UserReferenceFieldsMergeRequestAssignee.Username
}

func (v *MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee
		graphql.NoUnmarshalJSON
	}
	firstPass.MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserReferenceFieldsMergeRequestAssignee)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee struct {
	Id string `json:"id"`

	Username string `json:"username"`
}

func (v *MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee) __premarshalJSON() (*__premarshalMergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee, error) {
	var retval __premarshalMergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnectionNodesMergeRequestAssignee

	retval.Id = v.UserReferenceFieldsMergeRequestAssignee.Id
	retval.Username = v.UserReferenceFieldsMergeRequestAssignee.Username
	return &retval, nil
}

// MergeRequestFieldsParticipantsAuthorMergeRequestAuthor includes the requested fields of the GraphQL type MergeRequestAuthor.
// The GraphQL type's documentation follows.
//
// The author of the merge request.
type MergeRequestFieldsParticipantsAuthorMergeRequestAuthor struct {
	UserReferenceFieldsMergeRequestAuthor `json:"-"`
}

// GetId returns MergeRequestFieldsParticipantsAuthorMergeRequestAuthor.Id, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipantsAuthorMergeRequestAuthor) GetId() string {
	return v.UserReferenceFieldsMergeRequestAuthor.Id
}

// GetUsername returns MergeRequestFieldsParticipantsAuthorMergeRequestAuthor.Username, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipantsAuthorMergeRequestAuthor) GetUsername() string {
	return v.UserReferenceFieldsMergeRequestAuthor.Username
}

func (v *MergeRequestFieldsParticipantsAuthorMergeRequestAuthor) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MergeRequestFieldsParticipantsAuthorMergeRequestAuthor
		graphql.NoUnmarshalJSON
	}
	firstPass.MergeRequestFieldsParticipantsAuthorMergeRequestAuthor = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserReferenceFieldsMergeRequestAuthor)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMergeRequestFieldsParticipantsAuthorMergeRequestAuthor struct {
	Id string `json:"id"`

	Username string `json:"username"`
}

func (v *MergeRequestFieldsParticipantsAuthorMergeRequestAuthor) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MergeRequestFieldsParticipantsAuthorMergeRequestAuthor) __premarshalJSON() (*__premarshalMergeRequestFieldsParticipantsAuthorMergeRequestAuthor, error) {
	var retval __premarshalMergeRequestFieldsParticipantsAuthorMergeRequestAuthor

	retval.Id = v.UserReferenceFieldsMergeRequestAuthor.Id
	retval.Username = v.UserReferenceFieldsMergeRequestAuthor.Username
	return &retval, nil
}

// MergeRequestFieldsParticipantsMergeUserUserCore includes the requested fields of the GraphQL type UserCore.
// The GraphQL type's documentation follows.
//
// Core representation of a GitLab user.
type MergeRequestFieldsParticipantsMergeUserUserCore struct {
	UserReferenceFieldsUserCore `json:"-"`
}

// GetId returns MergeRequestFieldsParticipantsMergeUserUserCore.Id, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipantsMergeUserUserCore) GetId() string {
	return v.UserReferenceFieldsUserCore.Id
}

// GetUsername returns MergeRequestFieldsParticipantsMergeUserUserCore.Username, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipantsMergeUserUserCore) GetUsername() string {
	return v.UserReferenceFieldsUserCore.Username
}

func (v *MergeRequestFieldsParticipantsMergeUserUserCore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MergeRequestFieldsParticipantsMergeUserUserCore
		graphql.NoUnmarshalJSON
	}
	firstPass.MergeRequestFieldsParticipantsMergeUserUserCore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserReferenceFieldsUserCore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMergeRequestFieldsParticipantsMergeUserUserCore struct {
	Id string `json:"id"`

	Username string `json:"username"`
}

func (v *MergeRequestFieldsParticipantsMergeUserUserCore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MergeRequestFieldsParticipantsMergeUserUserCore) __premarshalJSON() (*__premarshalMergeRequestFieldsParticipantsMergeUserUserCore, error) {
	var retval __premarshalMergeRequestFieldsParticipantsMergeUserUserCore

	retval.Id = v.UserReferenceFieldsUserCore.Id
	retval.Username = v.UserReferenceFieldsUserCore.Username
	return &retval, nil
}

// MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnection includes the requested fields of the GraphQL type MergeRequestReviewerConnection.
// The GraphQL type's documentation follows.
//
// The connection type for MergeRequestReviewer.
type MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnection struct {
	// A list of nodes.
	Nodes []*MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer `json:"nodes"`
}

// GetNodes returns MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnection.Nodes, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnection) GetNodes() []*MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer {
	return v.Nodes
}

// MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer includes the requested fields of the GraphQL type MergeRequestReviewer.
// The GraphQL type's documentation follows.
//
// A user assigned to a merge request as a reviewer.
type MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer struct {
	UserReferenceFieldsMergeRequestReviewer `json:"-"`
}

// GetId returns MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer.Id, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer) GetId() string {
	return v.UserReferenceFieldsMergeRequestReviewer.Id
}

// GetUsername returns MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer.Username, and is useful for accessing the field via an interface.
func (v *MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer) GetUsername() string {
	return v.UserReferenceFieldsMergeRequestReviewer.Username
}

func (v *MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer
		graphql.NoUnmarshalJSON
	}
	firstPass.MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserReferenceFieldsMergeRequestReviewer)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer struct {
	Id string `json:"id"`

	Username string `json:"username"`
}

func (v *MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer) __premarshalJSON() (*__premarshalMergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer, error) {
	var retval __premarshalMergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnectionNodesMergeRequestReviewer

	retval.Id = v.UserReferenceFieldsMergeRequestReviewer.Id
	retval.Username = v.UserReferenceFieldsMergeRequestReviewer.Username
	return &retval, nil
}

// MergeRequestNotesFieldsCore includes the GraphQL fields of Note requested by the fragment MergeRequestNotesFieldsCore.
type MergeRequestNotesFieldsCore struct {
	// ID of the note.
	Id string `json:"id"`
	// Timestamp of the note creation.
	CreatedAt time.Time `json:"createdAt"`
	// Timestamp of the note's last activity.
	UpdatedAt time.Time `json:"updatedAt"`
	// User who wrote the note.
	Author *MergeRequestNotesFieldsCoreAuthorUserCore `json:"author"`
	// Content of the note.
	Body string `json:"body"`
	// Indicates if the note is internal.
	Internal *bool `json:"internal"`
	// Indicates whether the note was created by the system or by a user.
	System bool `json:"system"`
	// Indicates if the object can be resolved.
	Resolvable bool `json:"resolvable"`
	// Indicates if the object is resolved.
	Resolved bool `json:"resolved"`
	// Timestamp of when the object was resolved.
	ResolvedAt *time.Time `json:"resolvedAt"`
	// User who resolved the object.
	ResolvedBy *MergeRequestNotesFieldsCoreResolvedByUserCore `json:"resolvedBy"`
}

// GetId returns MergeRequestNotesFieldsCore.Id, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCore) GetId() string { return v.Id }

// GetCreatedAt returns MergeRequestNotesFieldsCore.CreatedAt, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCore) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns MergeRequestNotesFieldsCore.UpdatedAt, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCore) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetAuthor returns MergeRequestNotesFieldsCore.Author, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCore) GetAuthor() *MergeRequestNotesFieldsCoreAuthorUserCore {
	return v.Author
}

// GetBody returns MergeRequestNotesFieldsCore.Body, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCore) GetBody() string { return v.Body }

// GetInternal returns MergeRequestNotesFieldsCore.Internal, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCore) GetInternal() *bool { return v.Internal }

// GetSystem returns MergeRequestNotesFieldsCore.System, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCore) GetSystem() bool { return v.System }

// GetResolvable returns MergeRequestNotesFieldsCore.Resolvable, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCore) GetResolvable() bool { return v.Resolvable }

// GetResolved returns MergeRequestNotesFieldsCore.Resolved, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCore) GetResolved() bool { return v.Resolved }

// GetResolvedAt returns MergeRequestNotesFieldsCore.ResolvedAt, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCore) GetResolvedAt() *time.Time { return v.ResolvedAt }

// GetResolvedBy returns MergeRequestNotesFieldsCore.ResolvedBy, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCore) GetResolvedBy() *MergeRequestNotesFieldsCoreResolvedByUserCore {
	return v.ResolvedBy
}

// MergeRequestNotesFieldsCoreAuthorUserCore includes the requested fields of the GraphQL type UserCore.
// The GraphQL type's documentation follows.
//
// Core representation of a GitLab user.
type MergeRequestNotesFieldsCoreAuthorUserCore struct {
	UserReferenceFieldsUserCore `json:"-"`
}

// GetId returns MergeRequestNotesFieldsCoreAuthorUserCore.Id, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCoreAuthorUserCore) GetId() string {
	return v.UserReferenceFieldsUserCore.Id
}

// GetUsername returns MergeRequestNotesFieldsCoreAuthorUserCore.Username, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCoreAuthorUserCore) GetUsername() string {
	return v.UserReferenceFieldsUserCore.Username
}

func (v *MergeRequestNotesFieldsCoreAuthorUserCore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MergeRequestNotesFieldsCoreAuthorUserCore
		graphql.NoUnmarshalJSON
	}
	firstPass.MergeRequestNotesFieldsCoreAuthorUserCore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserReferenceFieldsUserCore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMergeRequestNotesFieldsCoreAuthorUserCore struct {
	Id string `json:"id"`

	Username string `json:"username"`
}

func (v *MergeRequestNotesFieldsCoreAuthorUserCore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MergeRequestNotesFieldsCoreAuthorUserCore) __premarshalJSON() (*__premarshalMergeRequestNotesFieldsCoreAuthorUserCore, error) {
	var retval __premarshalMergeRequestNotesFieldsCoreAuthorUserCore

	retval.Id = v.UserReferenceFieldsUserCore.Id
	retval.Username = v.UserReferenceFieldsUserCore.Username
	return &retval, nil
}

// MergeRequestNotesFieldsCoreResolvedByUserCore includes the requested fields of the GraphQL type UserCore.
// The GraphQL type's documentation follows.
//
// Core representation of a GitLab user.
type MergeRequestNotesFieldsCoreResolvedByUserCore struct {
	UserReferenceFieldsUserCore `json:"-"`
}

// GetId returns MergeRequestNotesFieldsCoreResolvedByUserCore.Id, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCoreResolvedByUserCore) GetId() string {
	return v.UserReferenceFieldsUserCore.Id
}

// GetUsername returns MergeRequestNotesFieldsCoreResolvedByUserCore.Username, and is useful for accessing the field via an interface.
func (v *MergeRequestNotesFieldsCoreResolvedByUserCore) GetUsername() string {
	return v.UserReferenceFieldsUserCore.Username
}

func (v *MergeRequestNotesFieldsCoreResolvedByUserCore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MergeRequestNotesFieldsCoreResolvedByUserCore
		graphql.NoUnmarshalJSON
	}
	firstPass.MergeRequestNotesFieldsCoreResolvedByUserCore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserReferenceFieldsUserCore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMergeRequestNotesFieldsCoreResolvedByUserCore struct {
	Id string `json:"id"`

	Username string `json:"username"`
}

func (v *MergeRequestNotesFieldsCoreResolvedByUserCore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MergeRequestNotesFieldsCoreResolvedByUserCore) __premarshalJSON() (*__premarshalMergeRequestNotesFieldsCoreResolvedByUserCore, error) {
	var retval __premarshalMergeRequestNotesFieldsCoreResolvedByUserCore

	retval.Id = v.UserReferenceFieldsUserCore.Id
	retval.Username = v.UserReferenceFieldsUserCore.Username
	return &retval, nil
}

// MergeRequestReferenceFields includes the GraphQL fields of MergeRequest requested by the fragment MergeRequestReferenceFields.
type MergeRequestReferenceFields struct {
	// ID of the merge request.
	Id string `json:"id"`
	// Internal ID of the merge request.
	Iid string `json:"iid"`
}

// GetId returns MergeRequestReferenceFields.Id, and is useful for accessing the field via an interface.
func (v *MergeRequestReferenceFields) GetId() string { return v.Id }

// GetIid returns MergeRequestReferenceFields.Iid, and is useful for accessing the field via an interface.
func (v *MergeRequestReferenceFields) GetIid() string { return v.Iid }

// State of a GitLab merge request
type MergeRequestState string

const (
	// Merge request has been merged.
	MergeRequestStateMerged MergeRequestState = "merged"
	// Opened merge request.
	MergeRequestStateOpened MergeRequestState = "opened"
	// In closed state.
	MergeRequestStateClosed MergeRequestState = "closed"
	// Discussion has been locked.
	MergeRequestStateLocked MergeRequestState = "locked"
	// All available.
	MergeRequestStateAll MergeRequestState = "all"
)

// NamespaceReferenceFields includes the GraphQL fields of Namespace requested by the fragment NamespaceReferenceFields.
type NamespaceReferenceFields struct {
	// ID of the namespace.
	Id string `json:"id"`
	// Full path of the namespace.
	FullPath string `json:"fullPath"`
}

// GetId returns NamespaceReferenceFields.Id, and is useful for accessing the field via an interface.
func (v *NamespaceReferenceFields) GetId() string { return v.Id }

// GetFullPath returns NamespaceReferenceFields.FullPath, and is useful for accessing the field via an interface.
func (v *NamespaceReferenceFields) GetFullPath() string { return v.FullPath }

// PipelineFieldsCore includes the GraphQL fields of Pipeline requested by the fragment PipelineFieldsCore.
type PipelineFieldsCore struct {
	// Name of the pipeline.
	Name *string `json:"name"`
	// Reference to the branch from which the pipeline was triggered.
	Ref *string `json:"ref"`
	// Status of the pipeline (CREATED, WAITING_FOR_RESOURCE, PREPARING,
	// WAITING_FOR_CALLBACK, PENDING, RUNNING, FAILED, SUCCESS, CANCELED, CANCELING,
	// SKIPPED, MANUAL, SCHEDULED)
	Status PipelineStatusEnum `json:"status"`
	// Source of the pipeline.
	Source *string `json:"source"`
	// SHA of the pipeline's commit.
	Sha *string `json:"sha"`
	// Timestamp of the pipeline's commit.
	CommittedAt *time.Time `json:"committedAt"`
	// Timestamp of the pipeline's creation.
	CreatedAt time.Time `json:"createdAt"`
	// Timestamp of the pipeline's last activity.
	UpdatedAt time.Time `json:"updatedAt"`
	// Timestamp when the pipeline was started.
	StartedAt *time.Time `json:"startedAt"`
	// Timestamp of the pipeline's completion.
	FinishedAt *time.Time `json:"finishedAt"`
	// How long the pipeline was queued before starting.
	QueuedDuration *float64 `json:"queuedDuration"`
	// Duration of the pipeline in seconds.
	Duration *int `json:"duration"`
	// Coverage percentage.
	Coverage *float64 `json:"coverage"`
	// Reason why the pipeline failed.
	FailureReason *string `json:"failureReason"`
	// Indicates if a pipeline has warnings.
	Warnings bool `json:"warnings"`
	// If the pipeline has YAML errors.
	YamlErrors bool `json:"yamlErrors"`
	// If the pipeline is a child or not.
	Child bool `json:"child"`
	// Pipeline that triggered the pipeline.
	Upstream *PipelineFieldsCoreUpstreamPipeline `json:"upstream"`
	// MR which the Pipeline is attached to.
	MergeRequest *PipelineFieldsCoreMergeRequest `json:"mergeRequest"`
	// Pipeline user.
	User *PipelineFieldsCoreUserUserCore `json:"user"`
}

// GetName returns PipelineFieldsCore.Name, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetName() *string { return v.Name }

// GetRef returns PipelineFieldsCore.Ref, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetRef() *string { return v.Ref }

// GetStatus returns PipelineFieldsCore.Status, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetStatus() PipelineStatusEnum { return v.Status }

// GetSource returns PipelineFieldsCore.Source, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetSource() *string { return v.Source }

// GetSha returns PipelineFieldsCore.Sha, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetSha() *string { return v.Sha }

// GetCommittedAt returns PipelineFieldsCore.CommittedAt, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetCommittedAt() *time.Time { return v.CommittedAt }

// GetCreatedAt returns PipelineFieldsCore.CreatedAt, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns PipelineFieldsCore.UpdatedAt, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetStartedAt returns PipelineFieldsCore.StartedAt, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetStartedAt() *time.Time { return v.StartedAt }

// GetFinishedAt returns PipelineFieldsCore.FinishedAt, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetFinishedAt() *time.Time { return v.FinishedAt }

// GetQueuedDuration returns PipelineFieldsCore.QueuedDuration, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetQueuedDuration() *float64 { return v.QueuedDuration }

// GetDuration returns PipelineFieldsCore.Duration, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetDuration() *int { return v.Duration }

// GetCoverage returns PipelineFieldsCore.Coverage, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetCoverage() *float64 { return v.Coverage }

// GetFailureReason returns PipelineFieldsCore.FailureReason, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetFailureReason() *string { return v.FailureReason }

// GetWarnings returns PipelineFieldsCore.Warnings, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetWarnings() bool { return v.Warnings }

// GetYamlErrors returns PipelineFieldsCore.YamlErrors, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetYamlErrors() bool { return v.YamlErrors }

// GetChild returns PipelineFieldsCore.Child, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetChild() bool { return v.Child }

// GetUpstream returns PipelineFieldsCore.Upstream, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetUpstream() *PipelineFieldsCoreUpstreamPipeline { return v.Upstream }

// GetMergeRequest returns PipelineFieldsCore.MergeRequest, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetMergeRequest() *PipelineFieldsCoreMergeRequest { return v.MergeRequest }

// GetUser returns PipelineFieldsCore.User, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCore) GetUser() *PipelineFieldsCoreUserUserCore { return v.User }

// PipelineFieldsCoreMergeRequest includes the requested fields of the GraphQL type MergeRequest.
type PipelineFieldsCoreMergeRequest struct {
	MergeRequestReferenceFields `json:"-"`
	// Alias for target_project.
	Project PipelineFieldsCoreMergeRequestProject `json:"project"`
}

// GetProject returns PipelineFieldsCoreMergeRequest.Project, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCoreMergeRequest) GetProject() PipelineFieldsCoreMergeRequestProject {
	return v.Project
}

// GetId returns PipelineFieldsCoreMergeRequest.Id, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCoreMergeRequest) GetId() string { return v.MergeRequestReferenceFields.Id }

// GetIid returns PipelineFieldsCoreMergeRequest.Iid, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCoreMergeRequest) GetIid() string { return v.MergeRequestReferenceFields.Iid }

func (v *PipelineFieldsCoreMergeRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PipelineFieldsCoreMergeRequest
		graphql.NoUnmarshalJSON
	}
	firstPass.PipelineFieldsCoreMergeRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MergeRequestReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPipelineFieldsCoreMergeRequest struct {
	Project PipelineFieldsCoreMergeRequestProject `json:"project"`

	Id string `json:"id"`

	Iid string `json:"iid"`
}

func (v *PipelineFieldsCoreMergeRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PipelineFieldsCoreMergeRequest) __premarshalJSON() (*__premarshalPipelineFieldsCoreMergeRequest, error) {
	var retval __premarshalPipelineFieldsCoreMergeRequest

	retval.Project = v.Project
	retval.Id = v.MergeRequestReferenceFields.Id
	retval.Iid = v.MergeRequestReferenceFields.Iid
	return &retval, nil
}

// PipelineFieldsCoreMergeRequestProject includes the requested fields of the GraphQL type Project.
type PipelineFieldsCoreMergeRequestProject struct {
	ProjectReferenceFields `json:"-"`
}

// GetId returns PipelineFieldsCoreMergeRequestProject.Id, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCoreMergeRequestProject) GetId() string { return v.ProjectReferenceFields.Id }

// GetFullPath returns PipelineFieldsCoreMergeRequestProject.FullPath, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCoreMergeRequestProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *PipelineFieldsCoreMergeRequestProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PipelineFieldsCoreMergeRequestProject
		graphql.NoUnmarshalJSON
	}
	firstPass.PipelineFieldsCoreMergeRequestProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPipelineFieldsCoreMergeRequestProject struct {
	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *PipelineFieldsCoreMergeRequestProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PipelineFieldsCoreMergeRequestProject) __premarshalJSON() (*__premarshalPipelineFieldsCoreMergeRequestProject, error) {
	var retval __premarshalPipelineFieldsCoreMergeRequestProject

	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// PipelineFieldsCoreUpstreamPipeline includes the requested fields of the GraphQL type Pipeline.
type PipelineFieldsCoreUpstreamPipeline struct {
	PipelineReferenceFields `json:"-"`
	// Project the pipeline belongs to.
	Project *PipelineFieldsCoreUpstreamPipelineProject `json:"project"`
}

// GetProject returns PipelineFieldsCoreUpstreamPipeline.Project, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCoreUpstreamPipeline) GetProject() *PipelineFieldsCoreUpstreamPipelineProject {
	return v.Project
}

// GetId returns PipelineFieldsCoreUpstreamPipeline.Id, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCoreUpstreamPipeline) GetId() string { return v.PipelineReferenceFields.Id }

// GetIid returns PipelineFieldsCoreUpstreamPipeline.Iid, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCoreUpstreamPipeline) GetIid() string { return v.PipelineReferenceFields.Iid }

func (v *PipelineFieldsCoreUpstreamPipeline) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PipelineFieldsCoreUpstreamPipeline
		graphql.NoUnmarshalJSON
	}
	firstPass.PipelineFieldsCoreUpstreamPipeline = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PipelineReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPipelineFieldsCoreUpstreamPipeline struct {
	Project *PipelineFieldsCoreUpstreamPipelineProject `json:"project"`

	Id string `json:"id"`

	Iid string `json:"iid"`
}

func (v *PipelineFieldsCoreUpstreamPipeline) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PipelineFieldsCoreUpstreamPipeline) __premarshalJSON() (*__premarshalPipelineFieldsCoreUpstreamPipeline, error) {
	var retval __premarshalPipelineFieldsCoreUpstreamPipeline

	retval.Project = v.Project
	retval.Id = v.PipelineReferenceFields.Id
	retval.Iid = v.PipelineReferenceFields.Iid
	return &retval, nil
}

// PipelineFieldsCoreUpstreamPipelineProject includes the requested fields of the GraphQL type Project.
type PipelineFieldsCoreUpstreamPipelineProject struct {
	ProjectReferenceFields `json:"-"`
}

// GetId returns PipelineFieldsCoreUpstreamPipelineProject.Id, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCoreUpstreamPipelineProject) GetId() string {
	return v.ProjectReferenceFields.Id
}

// GetFullPath returns PipelineFieldsCoreUpstreamPipelineProject.FullPath, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCoreUpstreamPipelineProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *PipelineFieldsCoreUpstreamPipelineProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PipelineFieldsCoreUpstreamPipelineProject
		graphql.NoUnmarshalJSON
	}
	firstPass.PipelineFieldsCoreUpstreamPipelineProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPipelineFieldsCoreUpstreamPipelineProject struct {
	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *PipelineFieldsCoreUpstreamPipelineProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PipelineFieldsCoreUpstreamPipelineProject) __premarshalJSON() (*__premarshalPipelineFieldsCoreUpstreamPipelineProject, error) {
	var retval __premarshalPipelineFieldsCoreUpstreamPipelineProject

	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// PipelineFieldsCoreUserUserCore includes the requested fields of the GraphQL type UserCore.
// The GraphQL type's documentation follows.
//
// Core representation of a GitLab user.
type PipelineFieldsCoreUserUserCore struct {
	UserReferenceFieldsUserCore `json:"-"`
}

// GetId returns PipelineFieldsCoreUserUserCore.Id, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCoreUserUserCore) GetId() string { return v.UserReferenceFieldsUserCore.Id }

// GetUsername returns PipelineFieldsCoreUserUserCore.Username, and is useful for accessing the field via an interface.
func (v *PipelineFieldsCoreUserUserCore) GetUsername() string {
	return v.UserReferenceFieldsUserCore.Username
}

func (v *PipelineFieldsCoreUserUserCore) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PipelineFieldsCoreUserUserCore
		graphql.NoUnmarshalJSON
	}
	firstPass.PipelineFieldsCoreUserUserCore = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserReferenceFieldsUserCore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPipelineFieldsCoreUserUserCore struct {
	Id string `json:"id"`

	Username string `json:"username"`
}

func (v *PipelineFieldsCoreUserUserCore) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PipelineFieldsCoreUserUserCore) __premarshalJSON() (*__premarshalPipelineFieldsCoreUserUserCore, error) {
	var retval __premarshalPipelineFieldsCoreUserUserCore

	retval.Id = v.UserReferenceFieldsUserCore.Id
	retval.Username = v.UserReferenceFieldsUserCore.Username
	return &retval, nil
}

// PipelineReferenceFields includes the GraphQL fields of Pipeline requested by the fragment PipelineReferenceFields.
type PipelineReferenceFields struct {
	// ID of the pipeline.
	Id string `json:"id"`
	// Internal ID of the pipeline.
	Iid string `json:"iid"`
}

// GetId returns PipelineReferenceFields.Id, and is useful for accessing the field via an interface.
func (v *PipelineReferenceFields) GetId() string { return v.Id }

// GetIid returns PipelineReferenceFields.Iid, and is useful for accessing the field via an interface.
func (v *PipelineReferenceFields) GetIid() string { return v.Iid }

type PipelineStatusEnum string

const (
	// Pipeline has been created.
	PipelineStatusEnumCreated PipelineStatusEnum = "CREATED"
	// A resource (for example, a runner) that the pipeline requires to run is unavailable.
	PipelineStatusEnumWaitingForResource PipelineStatusEnum = "WAITING_FOR_RESOURCE"
	// Pipeline is preparing to run.
	PipelineStatusEnumPreparing PipelineStatusEnum = "PREPARING"
	// Pipeline is waiting for an external action.
	PipelineStatusEnumWaitingForCallback PipelineStatusEnum = "WAITING_FOR_CALLBACK"
	// Pipeline has not started running yet.
	PipelineStatusEnumPending PipelineStatusEnum = "PENDING"
	// Pipeline is running.
	PipelineStatusEnumRunning PipelineStatusEnum = "RUNNING"
	// At least one stage of the pipeline failed.
	PipelineStatusEnumFailed PipelineStatusEnum = "FAILED"
	// Pipeline completed successfully.
	PipelineStatusEnumSuccess PipelineStatusEnum = "SUCCESS"
	// Pipeline is in the process of canceling.
	PipelineStatusEnumCanceling PipelineStatusEnum = "CANCELING"
	// Pipeline was canceled before completion.
	PipelineStatusEnumCanceled PipelineStatusEnum = "CANCELED"
	// Pipeline was skipped.
	PipelineStatusEnumSkipped PipelineStatusEnum = "SKIPPED"
	// Pipeline needs to be manually started.
	PipelineStatusEnumManual PipelineStatusEnum = "MANUAL"
	// Pipeline is scheduled to run.
	PipelineStatusEnumScheduled PipelineStatusEnum = "SCHEDULED"
)

// ProjectFieldsCore includes the GraphQL fields of Project requested by the fragment ProjectFieldsCore.
type ProjectFieldsCore struct {
	// Name of the project (without namespace).
	Name string `json:"name"`
	// Full name of the project with its namespace.
	NameWithNamespace string `json:"nameWithNamespace"`
	// Path of the project.
	Path string `json:"path"`
	// Short description of the project.
	Description *string `json:"description"`
	// Timestamp of the project creation.
	CreatedAt *time.Time `json:"createdAt"`
	// Timestamp of when the project was last updated.
	UpdatedAt *time.Time `json:"updatedAt"`
	// Timestamp of the project last activity.
	LastActivityAt *time.Time `json:"lastActivityAt"`
	// Statistics of the project.
	Statistics *ProjectFieldsCoreStatisticsProjectStatistics `json:"statistics"`
	// Number of times the project has been starred.
	StarCount int `json:"starCount"`
	// Number of times the project has been forked.
	ForksCount int `json:"forksCount"`
	// Indicates the archived status of the project.
	Archived *bool `json:"archived"`
	// Visibility of the project.
	Visibility *string `json:"visibility"`
}

// GetName returns ProjectFieldsCore.Name, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCore) GetName() string { return v.Name }

// GetNameWithNamespace returns ProjectFieldsCore.NameWithNamespace, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCore) GetNameWithNamespace() string { return v.NameWithNamespace }

// GetPath returns ProjectFieldsCore.Path, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCore) GetPath() string { return v.Path }

// GetDescription returns ProjectFieldsCore.Description, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCore) GetDescription() *string { return v.Description }

// GetCreatedAt returns ProjectFieldsCore.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCore) GetCreatedAt() *time.Time { return v.CreatedAt }

// GetUpdatedAt returns ProjectFieldsCore.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCore) GetUpdatedAt() *time.Time { return v.UpdatedAt }

// GetLastActivityAt returns ProjectFieldsCore.LastActivityAt, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCore) GetLastActivityAt() *time.Time { return v.LastActivityAt }

// GetStatistics returns ProjectFieldsCore.Statistics, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCore) GetStatistics() *ProjectFieldsCoreStatisticsProjectStatistics {
	return v.Statistics
}

// GetStarCount returns ProjectFieldsCore.StarCount, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCore) GetStarCount() int { return v.StarCount }

// GetForksCount returns ProjectFieldsCore.ForksCount, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCore) GetForksCount() int { return v.ForksCount }

// GetArchived returns ProjectFieldsCore.Archived, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCore) GetArchived() *bool { return v.Archived }

// GetVisibility returns ProjectFieldsCore.Visibility, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCore) GetVisibility() *string { return v.Visibility }

// ProjectFieldsCoreStatisticsProjectStatistics includes the requested fields of the GraphQL type ProjectStatistics.
type ProjectFieldsCoreStatisticsProjectStatistics struct {
	// Build artifacts size of the project in bytes.
	BuildArtifactsSize float64 `json:"buildArtifactsSize"`
	// Container Registry size of the project in bytes.
	ContainerRegistrySize *float64 `json:"containerRegistrySize"`
	// Large File Storage (LFS) object size of the project in bytes.
	LfsObjectsSize float64 `json:"lfsObjectsSize"`
	// Packages size of the project in bytes.
	PackagesSize float64 `json:"packagesSize"`
	// CI Pipeline artifacts size in bytes.
	PipelineArtifactsSize *float64 `json:"pipelineArtifactsSize"`
	// Repository size of the project in bytes.
	RepositorySize float64 `json:"repositorySize"`
	// Snippets size of the project in bytes.
	SnippetsSize *float64 `json:"snippetsSize"`
	// Storage size of the project in bytes.
	StorageSize float64 `json:"storageSize"`
	// Uploads size of the project in bytes.
	UploadsSize *float64 `json:"uploadsSize"`
	// Wiki size of the project in bytes.
	WikiSize *float64 `json:"wikiSize"`
	// Commit count of the project.
	CommitCount float64 `json:"commitCount"`
}

// GetBuildArtifactsSize returns ProjectFieldsCoreStatisticsProjectStatistics.BuildArtifactsSize, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCoreStatisticsProjectStatistics) GetBuildArtifactsSize() float64 {
	return v.BuildArtifactsSize
}

// GetContainerRegistrySize returns ProjectFieldsCoreStatisticsProjectStatistics.ContainerRegistrySize, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCoreStatisticsProjectStatistics) GetContainerRegistrySize() *float64 {
	return v.ContainerRegistrySize
}

// GetLfsObjectsSize returns ProjectFieldsCoreStatisticsProjectStatistics.LfsObjectsSize, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCoreStatisticsProjectStatistics) GetLfsObjectsSize() float64 {
	return v.LfsObjectsSize
}

// GetPackagesSize returns ProjectFieldsCoreStatisticsProjectStatistics.PackagesSize, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCoreStatisticsProjectStatistics) GetPackagesSize() float64 {
	return v.PackagesSize
}

// GetPipelineArtifactsSize returns ProjectFieldsCoreStatisticsProjectStatistics.PipelineArtifactsSize, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCoreStatisticsProjectStatistics) GetPipelineArtifactsSize() *float64 {
	return v.PipelineArtifactsSize
}

// GetRepositorySize returns ProjectFieldsCoreStatisticsProjectStatistics.RepositorySize, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCoreStatisticsProjectStatistics) GetRepositorySize() float64 {
	return v.RepositorySize
}

// GetSnippetsSize returns ProjectFieldsCoreStatisticsProjectStatistics.SnippetsSize, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCoreStatisticsProjectStatistics) GetSnippetsSize() *float64 {
	return v.SnippetsSize
}

// GetStorageSize returns ProjectFieldsCoreStatisticsProjectStatistics.StorageSize, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCoreStatisticsProjectStatistics) GetStorageSize() float64 { return v.StorageSize }

// GetUploadsSize returns ProjectFieldsCoreStatisticsProjectStatistics.UploadsSize, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCoreStatisticsProjectStatistics) GetUploadsSize() *float64 {
	return v.UploadsSize
}

// GetWikiSize returns ProjectFieldsCoreStatisticsProjectStatistics.WikiSize, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCoreStatisticsProjectStatistics) GetWikiSize() *float64 { return v.WikiSize }

// GetCommitCount returns ProjectFieldsCoreStatisticsProjectStatistics.CommitCount, and is useful for accessing the field via an interface.
func (v *ProjectFieldsCoreStatisticsProjectStatistics) GetCommitCount() float64 { return v.CommitCount }

// ProjectReferenceFields includes the GraphQL fields of Project requested by the fragment ProjectReferenceFields.
type ProjectReferenceFields struct {
	// ID of the project.
	Id string `json:"id"`
	// Full path of the project.
	FullPath string `json:"fullPath"`
}

// GetId returns ProjectReferenceFields.Id, and is useful for accessing the field via an interface.
func (v *ProjectReferenceFields) GetId() string { return v.Id }

// GetFullPath returns ProjectReferenceFields.FullPath, and is useful for accessing the field via an interface.
func (v *ProjectReferenceFields) GetFullPath() string { return v.FullPath }

// TestReportSummaryFields includes the GraphQL fields of TestReportTotal requested by the fragment TestReportSummaryFields.
// The GraphQL type's documentation follows.
//
// Total test report statistics.
type TestReportSummaryFields struct {
	// Total number of the test cases.
	Count *int `json:"count"`
	// Total number of test cases that had an error.
	Error *int `json:"error"`
	// Total number of test cases that failed.
	Failed *int `json:"failed"`
	// Total number of test cases that were skipped.
	Skipped *int `json:"skipped"`
	// Total number of test cases that succeeded.
	Success *int `json:"success"`
	// Total duration of the tests.
	Time *float64 `json:"time"`
}

// GetCount returns TestReportSummaryFields.Count, and is useful for accessing the field via an interface.
func (v *TestReportSummaryFields) GetCount() *int { return v.Count }

// GetError returns TestReportSummaryFields.Error, and is useful for accessing the field via an interface.
func (v *TestReportSummaryFields) GetError() *int { return v.Error }

// GetFailed returns TestReportSummaryFields.Failed, and is useful for accessing the field via an interface.
func (v *TestReportSummaryFields) GetFailed() *int { return v.Failed }

// GetSkipped returns TestReportSummaryFields.Skipped, and is useful for accessing the field via an interface.
func (v *TestReportSummaryFields) GetSkipped() *int { return v.Skipped }

// GetSuccess returns TestReportSummaryFields.Success, and is useful for accessing the field via an interface.
func (v *TestReportSummaryFields) GetSuccess() *int { return v.Success }

// GetTime returns TestReportSummaryFields.Time, and is useful for accessing the field via an interface.
func (v *TestReportSummaryFields) GetTime() *float64 { return v.Time }

// TestSuiteSummaryFields includes the GraphQL fields of TestSuiteSummary requested by the fragment TestSuiteSummaryFields.
// The GraphQL type's documentation follows.
//
// Test suite summary in a pipeline test report.
type TestSuiteSummaryFields struct {
	// Name of the test suite.
	Name *string `json:"name"`
	// IDs of the builds used to run the test suite.
	BuildIds []string `json:"buildIds"`
	// Total number of test cases that had an error.
	ErrorCount *int `json:"errorCount"`
	// Total number of test cases that failed in the test suite.
	FailedCount *int `json:"failedCount"`
	// Total number of test cases that were skipped in the test suite.
	SkippedCount *int `json:"skippedCount"`
	// Total number of test cases that succeeded in the test suite.
	SuccessCount *int `json:"successCount"`
	// Test suite error message.
	SuiteError *string `json:"suiteError"`
	// Total number of the test cases in the test suite.
	TotalCount *int `json:"totalCount"`
	// Total duration of the tests in the test suite.
	TotalTime *float64 `json:"totalTime"`
}

// GetName returns TestSuiteSummaryFields.Name, and is useful for accessing the field via an interface.
func (v *TestSuiteSummaryFields) GetName() *string { return v.Name }

// GetBuildIds returns TestSuiteSummaryFields.BuildIds, and is useful for accessing the field via an interface.
func (v *TestSuiteSummaryFields) GetBuildIds() []string { return v.BuildIds }

// GetErrorCount returns TestSuiteSummaryFields.ErrorCount, and is useful for accessing the field via an interface.
func (v *TestSuiteSummaryFields) GetErrorCount() *int { return v.ErrorCount }

// GetFailedCount returns TestSuiteSummaryFields.FailedCount, and is useful for accessing the field via an interface.
func (v *TestSuiteSummaryFields) GetFailedCount() *int { return v.FailedCount }

// GetSkippedCount returns TestSuiteSummaryFields.SkippedCount, and is useful for accessing the field via an interface.
func (v *TestSuiteSummaryFields) GetSkippedCount() *int { return v.SkippedCount }

// GetSuccessCount returns TestSuiteSummaryFields.SuccessCount, and is useful for accessing the field via an interface.
func (v *TestSuiteSummaryFields) GetSuccessCount() *int { return v.SuccessCount }

// GetSuiteError returns TestSuiteSummaryFields.SuiteError, and is useful for accessing the field via an interface.
func (v *TestSuiteSummaryFields) GetSuiteError() *string { return v.SuiteError }

// GetTotalCount returns TestSuiteSummaryFields.TotalCount, and is useful for accessing the field via an interface.
func (v *TestSuiteSummaryFields) GetTotalCount() *int { return v.TotalCount }

// GetTotalTime returns TestSuiteSummaryFields.TotalTime, and is useful for accessing the field via an interface.
func (v *TestSuiteSummaryFields) GetTotalTime() *float64 { return v.TotalTime }

// UserReferenceFields includes the GraphQL fields of User requested by the fragment UserReferenceFields.
// The GraphQL type's documentation follows.
//
// Representation of a GitLab user.
//
// UserReferenceFields is implemented by the following types:
// UserReferenceFieldsAddOnUser
// UserReferenceFieldsAutocompletedUser
// UserReferenceFieldsCurrentUser
// UserReferenceFieldsMergeRequestAssignee
// UserReferenceFieldsMergeRequestAuthor
// UserReferenceFieldsMergeRequestParticipant
// UserReferenceFieldsMergeRequestReviewer
// UserReferenceFieldsUserCore
type UserReferenceFields interface {
	implementsGraphQLInterfaceUserReferenceFields()
	// GetId returns the interface-field "id" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// ID of the user.
	GetId() string
	// GetUsername returns the interface-field "username" from its implementation.
	// The GraphQL interface field's documentation follows.
	//
	// Username of the user. Unique within this instance of GitLab.
	GetUsername() string
}

func (v *UserReferenceFieldsAddOnUser) implementsGraphQLInterfaceUserReferenceFields()            {}
func (v *UserReferenceFieldsAutocompletedUser) implementsGraphQLInterfaceUserReferenceFields()    {}
func (v *UserReferenceFieldsCurrentUser) implementsGraphQLInterfaceUserReferenceFields()          {}
func (v *UserReferenceFieldsMergeRequestAssignee) implementsGraphQLInterfaceUserReferenceFields() {}
func (v *UserReferenceFieldsMergeRequestAuthor) implementsGraphQLInterfaceUserReferenceFields()   {}
func (v *UserReferenceFieldsMergeRequestParticipant) implementsGraphQLInterfaceUserReferenceFields() {
}
func (v *UserReferenceFieldsMergeRequestReviewer) implementsGraphQLInterfaceUserReferenceFields() {}
func (v *UserReferenceFieldsUserCore) implementsGraphQLInterfaceUserReferenceFields()             {}

func __unmarshalUserReferenceFields(b []byte, v *UserReferenceFields) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AddOnUser":
		*v = new(UserReferenceFieldsAddOnUser)
		return json.Unmarshal(b, *v)
	case "AutocompletedUser":
		*v = new(UserReferenceFieldsAutocompletedUser)
		return json.Unmarshal(b, *v)
	case "CurrentUser":
		*v = new(UserReferenceFieldsCurrentUser)
		return json.Unmarshal(b, *v)
	case "MergeRequestAssignee":
		*v = new(UserReferenceFieldsMergeRequestAssignee)
		return json.Unmarshal(b, *v)
	case "MergeRequestAuthor":
		*v = new(UserReferenceFieldsMergeRequestAuthor)
		return json.Unmarshal(b, *v)
	case "MergeRequestParticipant":
		*v = new(UserReferenceFieldsMergeRequestParticipant)
		return json.Unmarshal(b, *v)
	case "MergeRequestReviewer":
		*v = new(UserReferenceFieldsMergeRequestReviewer)
		return json.Unmarshal(b, *v)
	case "UserCore":
		*v = new(UserReferenceFieldsUserCore)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing User.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UserReferenceFields: "%v"`, tn.TypeName)
	}
}

func __marshalUserReferenceFields(v *UserReferenceFields) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UserReferenceFieldsAddOnUser:
		typename = "AddOnUser"

		result := struct {
			TypeName string `json:"__typename"`
			*UserReferenceFieldsAddOnUser
		}{typename, v}
		return json.Marshal(result)
	case *UserReferenceFieldsAutocompletedUser:
		typename = "AutocompletedUser"

		result := struct {
			TypeName string `json:"__typename"`
			*UserReferenceFieldsAutocompletedUser
		}{typename, v}
		return json.Marshal(result)
	case *UserReferenceFieldsCurrentUser:
		typename = "CurrentUser"

		result := struct {
			TypeName string `json:"__typename"`
			*UserReferenceFieldsCurrentUser
		}{typename, v}
		return json.Marshal(result)
	case *UserReferenceFieldsMergeRequestAssignee:
		typename = "MergeRequestAssignee"

		result := struct {
			TypeName string `json:"__typename"`
			*UserReferenceFieldsMergeRequestAssignee
		}{typename, v}
		return json.Marshal(result)
	case *UserReferenceFieldsMergeRequestAuthor:
		typename = "MergeRequestAuthor"

		result := struct {
			TypeName string `json:"__typename"`
			*UserReferenceFieldsMergeRequestAuthor
		}{typename, v}
		return json.Marshal(result)
	case *UserReferenceFieldsMergeRequestParticipant:
		typename = "MergeRequestParticipant"

		result := struct {
			TypeName string `json:"__typename"`
			*UserReferenceFieldsMergeRequestParticipant
		}{typename, v}
		return json.Marshal(result)
	case *UserReferenceFieldsMergeRequestReviewer:
		typename = "MergeRequestReviewer"

		result := struct {
			TypeName string `json:"__typename"`
			*UserReferenceFieldsMergeRequestReviewer
		}{typename, v}
		return json.Marshal(result)
	case *UserReferenceFieldsUserCore:
		typename = "UserCore"

		result := struct {
			TypeName string `json:"__typename"`
			*UserReferenceFieldsUserCore
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UserReferenceFields: "%T"`, v)
	}
}

// UserReferenceFields includes the GraphQL fields of AddOnUser requested by the fragment UserReferenceFields.
// The GraphQL type's documentation follows.
//
// Representation of a GitLab user.
type UserReferenceFieldsAddOnUser struct {
	// ID of the user.
	Id string `json:"id"`
	// Username of the user. Unique within this instance of GitLab.
	Username string `json:"username"`
}

// GetId returns UserReferenceFieldsAddOnUser.Id, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsAddOnUser) GetId() string { return v.Id }

// GetUsername returns UserReferenceFieldsAddOnUser.Username, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsAddOnUser) GetUsername() string { return v.Username }

// UserReferenceFields includes the GraphQL fields of AutocompletedUser requested by the fragment UserReferenceFields.
// The GraphQL type's documentation follows.
//
// Representation of a GitLab user.
type UserReferenceFieldsAutocompletedUser struct {
	// ID of the user.
	Id string `json:"id"`
	// Username of the user. Unique within this instance of GitLab.
	Username string `json:"username"`
}

// GetId returns UserReferenceFieldsAutocompletedUser.Id, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsAutocompletedUser) GetId() string { return v.Id }

// GetUsername returns UserReferenceFieldsAutocompletedUser.Username, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsAutocompletedUser) GetUsername() string { return v.Username }

// UserReferenceFields includes the GraphQL fields of CurrentUser requested by the fragment UserReferenceFields.
// The GraphQL type's documentation follows.
//
// Representation of a GitLab user.
type UserReferenceFieldsCurrentUser struct {
	// ID of the user.
	Id string `json:"id"`
	// Username of the user. Unique within this instance of GitLab.
	Username string `json:"username"`
}

// GetId returns UserReferenceFieldsCurrentUser.Id, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsCurrentUser) GetId() string { return v.Id }

// GetUsername returns UserReferenceFieldsCurrentUser.Username, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsCurrentUser) GetUsername() string { return v.Username }

// UserReferenceFields includes the GraphQL fields of MergeRequestAssignee requested by the fragment UserReferenceFields.
// The GraphQL type's documentation follows.
//
// Representation of a GitLab user.
type UserReferenceFieldsMergeRequestAssignee struct {
	// ID of the user.
	Id string `json:"id"`
	// Username of the user. Unique within this instance of GitLab.
	Username string `json:"username"`
}

// GetId returns UserReferenceFieldsMergeRequestAssignee.Id, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsMergeRequestAssignee) GetId() string { return v.Id }

// GetUsername returns UserReferenceFieldsMergeRequestAssignee.Username, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsMergeRequestAssignee) GetUsername() string { return v.Username }

// UserReferenceFields includes the GraphQL fields of MergeRequestAuthor requested by the fragment UserReferenceFields.
// The GraphQL type's documentation follows.
//
// Representation of a GitLab user.
type UserReferenceFieldsMergeRequestAuthor struct {
	// ID of the user.
	Id string `json:"id"`
	// Username of the user. Unique within this instance of GitLab.
	Username string `json:"username"`
}

// GetId returns UserReferenceFieldsMergeRequestAuthor.Id, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsMergeRequestAuthor) GetId() string { return v.Id }

// GetUsername returns UserReferenceFieldsMergeRequestAuthor.Username, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsMergeRequestAuthor) GetUsername() string { return v.Username }

// UserReferenceFields includes the GraphQL fields of MergeRequestParticipant requested by the fragment UserReferenceFields.
// The GraphQL type's documentation follows.
//
// Representation of a GitLab user.
type UserReferenceFieldsMergeRequestParticipant struct {
	// ID of the user.
	Id string `json:"id"`
	// Username of the user. Unique within this instance of GitLab.
	Username string `json:"username"`
}

// GetId returns UserReferenceFieldsMergeRequestParticipant.Id, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsMergeRequestParticipant) GetId() string { return v.Id }

// GetUsername returns UserReferenceFieldsMergeRequestParticipant.Username, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsMergeRequestParticipant) GetUsername() string { return v.Username }

// UserReferenceFields includes the GraphQL fields of MergeRequestReviewer requested by the fragment UserReferenceFields.
// The GraphQL type's documentation follows.
//
// Representation of a GitLab user.
type UserReferenceFieldsMergeRequestReviewer struct {
	// ID of the user.
	Id string `json:"id"`
	// Username of the user. Unique within this instance of GitLab.
	Username string `json:"username"`
}

// GetId returns UserReferenceFieldsMergeRequestReviewer.Id, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsMergeRequestReviewer) GetId() string { return v.Id }

// GetUsername returns UserReferenceFieldsMergeRequestReviewer.Username, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsMergeRequestReviewer) GetUsername() string { return v.Username }

// UserReferenceFields includes the GraphQL fields of UserCore requested by the fragment UserReferenceFields.
// The GraphQL type's documentation follows.
//
// Representation of a GitLab user.
type UserReferenceFieldsUserCore struct {
	// ID of the user.
	Id string `json:"id"`
	// Username of the user. Unique within this instance of GitLab.
	Username string `json:"username"`
}

// GetId returns UserReferenceFieldsUserCore.Id, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsUserCore) GetId() string { return v.Id }

// GetUsername returns UserReferenceFieldsUserCore.Username, and is useful for accessing the field via an interface.
func (v *UserReferenceFieldsUserCore) GetUsername() string { return v.Username }

// __getProjectIdPipelineInput is used internally by genqlient
type __getProjectIdPipelineInput struct {
	ProjectId  string `json:"projectId"`
	PipelineId string `json:"pipelineId"`
}

// GetProjectId returns __getProjectIdPipelineInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getProjectIdPipelineInput) GetProjectId() string { return v.ProjectId }

// GetPipelineId returns __getProjectIdPipelineInput.PipelineId, and is useful for accessing the field via an interface.
func (v *__getProjectIdPipelineInput) GetPipelineId() string { return v.PipelineId }

// __getProjectMergeRequestNotesInput is used internally by genqlient
type __getProjectMergeRequestNotesInput struct {
	ProjectPath     string  `json:"projectPath"`
	MergeRequestIid string  `json:"mergeRequestIid"`
	EndCursor       *string `json:"endCursor"`
}

// GetProjectPath returns __getProjectMergeRequestNotesInput.ProjectPath, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestNotesInput) GetProjectPath() string { return v.ProjectPath }

// GetMergeRequestIid returns __getProjectMergeRequestNotesInput.MergeRequestIid, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestNotesInput) GetMergeRequestIid() string { return v.MergeRequestIid }

// GetEndCursor returns __getProjectMergeRequestNotesInput.EndCursor, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestNotesInput) GetEndCursor() *string { return v.EndCursor }

// __getProjectMergeRequestsInput is used internally by genqlient
type __getProjectMergeRequestsInput struct {
	ProjectPath   string     `json:"projectPath"`
	UpdatedAfter  *time.Time `json:"updatedAfter"`
	UpdatedBefore *time.Time `json:"updatedBefore"`
	EndCursor     *string    `json:"endCursor"`
	Core          *bool      `json:"_core"`
	Extra         *bool      `json:"_extra"`
	Participants  *bool      `json:"_participants"`
}

// GetProjectPath returns __getProjectMergeRequestsInput.ProjectPath, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestsInput) GetProjectPath() string { return v.ProjectPath }

// GetUpdatedAfter returns __getProjectMergeRequestsInput.UpdatedAfter, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestsInput) GetUpdatedAfter() *time.Time { return v.UpdatedAfter }

// GetUpdatedBefore returns __getProjectMergeRequestsInput.UpdatedBefore, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestsInput) GetUpdatedBefore() *time.Time { return v.UpdatedBefore }

// GetEndCursor returns __getProjectMergeRequestsInput.EndCursor, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestsInput) GetEndCursor() *string { return v.EndCursor }

// GetCore returns __getProjectMergeRequestsInput.Core, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestsInput) GetCore() *bool { return v.Core }

// GetExtra returns __getProjectMergeRequestsInput.Extra, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestsInput) GetExtra() *bool { return v.Extra }

// GetParticipants returns __getProjectMergeRequestsInput.Participants, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestsInput) GetParticipants() *bool { return v.Participants }

// __getProjectMergeRequestsNotesInput is used internally by genqlient
type __getProjectMergeRequestsNotesInput struct {
	ProjectPath   string     `json:"projectPath"`
	UpdatedAfter  *time.Time `json:"updatedAfter"`
	UpdatedBefore *time.Time `json:"updatedBefore"`
	EndCursor     *string    `json:"endCursor"`
}

// GetProjectPath returns __getProjectMergeRequestsNotesInput.ProjectPath, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestsNotesInput) GetProjectPath() string { return v.ProjectPath }

// GetUpdatedAfter returns __getProjectMergeRequestsNotesInput.UpdatedAfter, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestsNotesInput) GetUpdatedAfter() *time.Time { return v.UpdatedAfter }

// GetUpdatedBefore returns __getProjectMergeRequestsNotesInput.UpdatedBefore, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestsNotesInput) GetUpdatedBefore() *time.Time { return v.UpdatedBefore }

// GetEndCursor returns __getProjectMergeRequestsNotesInput.EndCursor, and is useful for accessing the field via an interface.
func (v *__getProjectMergeRequestsNotesInput) GetEndCursor() *string { return v.EndCursor }

// __getProjectPipelineJobsInput is used internally by genqlient
type __getProjectPipelineJobsInput struct {
	ProjectPath string  `json:"projectPath"`
	PipelineIid string  `json:"pipelineIid"`
	EndCursor   *string `json:"endCursor"`
	Core        bool    `json:"_core"`
	Extra       bool    `json:"_extra"`
}

// GetProjectPath returns __getProjectPipelineJobsInput.ProjectPath, and is useful for accessing the field via an interface.
func (v *__getProjectPipelineJobsInput) GetProjectPath() string { return v.ProjectPath }

// GetPipelineIid returns __getProjectPipelineJobsInput.PipelineIid, and is useful for accessing the field via an interface.
func (v *__getProjectPipelineJobsInput) GetPipelineIid() string { return v.PipelineIid }

// GetEndCursor returns __getProjectPipelineJobsInput.EndCursor, and is useful for accessing the field via an interface.
func (v *__getProjectPipelineJobsInput) GetEndCursor() *string { return v.EndCursor }

// GetCore returns __getProjectPipelineJobsInput.Core, and is useful for accessing the field via an interface.
func (v *__getProjectPipelineJobsInput) GetCore() bool { return v.Core }

// GetExtra returns __getProjectPipelineJobsInput.Extra, and is useful for accessing the field via an interface.
func (v *__getProjectPipelineJobsInput) GetExtra() bool { return v.Extra }

// __getProjectPipelinesInput is used internally by genqlient
type __getProjectPipelinesInput struct {
	ProjectPath   string     `json:"projectPath"`
	Source        *string    `json:"source"`
	UpdatedAfter  *time.Time `json:"updatedAfter"`
	UpdatedBefore *time.Time `json:"updatedBefore"`
	EndCursor     *string    `json:"endCursor"`
}

// GetProjectPath returns __getProjectPipelinesInput.ProjectPath, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesInput) GetProjectPath() string { return v.ProjectPath }

// GetSource returns __getProjectPipelinesInput.Source, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesInput) GetSource() *string { return v.Source }

// GetUpdatedAfter returns __getProjectPipelinesInput.UpdatedAfter, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesInput) GetUpdatedAfter() *time.Time { return v.UpdatedAfter }

// GetUpdatedBefore returns __getProjectPipelinesInput.UpdatedBefore, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesInput) GetUpdatedBefore() *time.Time { return v.UpdatedBefore }

// GetEndCursor returns __getProjectPipelinesInput.EndCursor, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesInput) GetEndCursor() *string { return v.EndCursor }

// __getProjectPipelinesJobsInput is used internally by genqlient
type __getProjectPipelinesJobsInput struct {
	ProjectPath   string     `json:"projectPath"`
	Source        *string    `json:"source"`
	UpdatedAfter  *time.Time `json:"updatedAfter"`
	UpdatedBefore *time.Time `json:"updatedBefore"`
	EndCursor     *string    `json:"endCursor"`
	Core          bool       `json:"_core"`
	Extra         bool       `json:"_extra"`
}

// GetProjectPath returns __getProjectPipelinesJobsInput.ProjectPath, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesJobsInput) GetProjectPath() string { return v.ProjectPath }

// GetSource returns __getProjectPipelinesJobsInput.Source, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesJobsInput) GetSource() *string { return v.Source }

// GetUpdatedAfter returns __getProjectPipelinesJobsInput.UpdatedAfter, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesJobsInput) GetUpdatedAfter() *time.Time { return v.UpdatedAfter }

// GetUpdatedBefore returns __getProjectPipelinesJobsInput.UpdatedBefore, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesJobsInput) GetUpdatedBefore() *time.Time { return v.UpdatedBefore }

// GetEndCursor returns __getProjectPipelinesJobsInput.EndCursor, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesJobsInput) GetEndCursor() *string { return v.EndCursor }

// GetCore returns __getProjectPipelinesJobsInput.Core, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesJobsInput) GetCore() bool { return v.Core }

// GetExtra returns __getProjectPipelinesJobsInput.Extra, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesJobsInput) GetExtra() bool { return v.Extra }

// __getProjectPipelinesTestReportSummaryInput is used internally by genqlient
type __getProjectPipelinesTestReportSummaryInput struct {
	ProjectPath   string     `json:"projectPath"`
	UpdatedAfter  *time.Time `json:"updatedAfter"`
	UpdatedBefore *time.Time `json:"updatedBefore"`
	Source        *string    `json:"source"`
	EndCursor     *string    `json:"endCursor"`
}

// GetProjectPath returns __getProjectPipelinesTestReportSummaryInput.ProjectPath, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesTestReportSummaryInput) GetProjectPath() string { return v.ProjectPath }

// GetUpdatedAfter returns __getProjectPipelinesTestReportSummaryInput.UpdatedAfter, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesTestReportSummaryInput) GetUpdatedAfter() *time.Time {
	return v.UpdatedAfter
}

// GetUpdatedBefore returns __getProjectPipelinesTestReportSummaryInput.UpdatedBefore, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesTestReportSummaryInput) GetUpdatedBefore() *time.Time {
	return v.UpdatedBefore
}

// GetSource returns __getProjectPipelinesTestReportSummaryInput.Source, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesTestReportSummaryInput) GetSource() *string { return v.Source }

// GetEndCursor returns __getProjectPipelinesTestReportSummaryInput.EndCursor, and is useful for accessing the field via an interface.
func (v *__getProjectPipelinesTestReportSummaryInput) GetEndCursor() *string { return v.EndCursor }

// __getProjectsInput is used internally by genqlient
type __getProjectsInput struct {
	Ids           []string   `json:"ids"`
	UpdatedAfter  *time.Time `json:"updatedAfter"`
	UpdatedBefore *time.Time `json:"updatedBefore"`
	EndCursor     *string    `json:"endCursor"`
}

// GetIds returns __getProjectsInput.Ids, and is useful for accessing the field via an interface.
func (v *__getProjectsInput) GetIds() []string { return v.Ids }

// GetUpdatedAfter returns __getProjectsInput.UpdatedAfter, and is useful for accessing the field via an interface.
func (v *__getProjectsInput) GetUpdatedAfter() *time.Time { return v.UpdatedAfter }

// GetUpdatedBefore returns __getProjectsInput.UpdatedBefore, and is useful for accessing the field via an interface.
func (v *__getProjectsInput) GetUpdatedBefore() *time.Time { return v.UpdatedBefore }

// GetEndCursor returns __getProjectsInput.EndCursor, and is useful for accessing the field via an interface.
func (v *__getProjectsInput) GetEndCursor() *string { return v.EndCursor }

// __getProjectsMergeRequestNotesInput is used internally by genqlient
type __getProjectsMergeRequestNotesInput struct {
	ProjectIds    []string   `json:"projectIds"`
	UpdatedAfter  *time.Time `json:"updatedAfter"`
	UpdatedBefore *time.Time `json:"updatedBefore"`
	EndCursor     *string    `json:"endCursor"`
}

// GetProjectIds returns __getProjectsMergeRequestNotesInput.ProjectIds, and is useful for accessing the field via an interface.
func (v *__getProjectsMergeRequestNotesInput) GetProjectIds() []string { return v.ProjectIds }

// GetUpdatedAfter returns __getProjectsMergeRequestNotesInput.UpdatedAfter, and is useful for accessing the field via an interface.
func (v *__getProjectsMergeRequestNotesInput) GetUpdatedAfter() *time.Time { return v.UpdatedAfter }

// GetUpdatedBefore returns __getProjectsMergeRequestNotesInput.UpdatedBefore, and is useful for accessing the field via an interface.
func (v *__getProjectsMergeRequestNotesInput) GetUpdatedBefore() *time.Time { return v.UpdatedBefore }

// GetEndCursor returns __getProjectsMergeRequestNotesInput.EndCursor, and is useful for accessing the field via an interface.
func (v *__getProjectsMergeRequestNotesInput) GetEndCursor() *string { return v.EndCursor }

// __getProjectsMergeRequestsInput is used internally by genqlient
type __getProjectsMergeRequestsInput struct {
	ProjectIds    []string   `json:"projectIds"`
	UpdatedAfter  *time.Time `json:"updatedAfter"`
	UpdatedBefore *time.Time `json:"updatedBefore"`
	EndCursor     *string    `json:"endCursor"`
	Core          *bool      `json:"_core"`
	Extra         *bool      `json:"_extra"`
	Participants  *bool      `json:"_participants"`
}

// GetProjectIds returns __getProjectsMergeRequestsInput.ProjectIds, and is useful for accessing the field via an interface.
func (v *__getProjectsMergeRequestsInput) GetProjectIds() []string { return v.ProjectIds }

// GetUpdatedAfter returns __getProjectsMergeRequestsInput.UpdatedAfter, and is useful for accessing the field via an interface.
func (v *__getProjectsMergeRequestsInput) GetUpdatedAfter() *time.Time { return v.UpdatedAfter }

// GetUpdatedBefore returns __getProjectsMergeRequestsInput.UpdatedBefore, and is useful for accessing the field via an interface.
func (v *__getProjectsMergeRequestsInput) GetUpdatedBefore() *time.Time { return v.UpdatedBefore }

// GetEndCursor returns __getProjectsMergeRequestsInput.EndCursor, and is useful for accessing the field via an interface.
func (v *__getProjectsMergeRequestsInput) GetEndCursor() *string { return v.EndCursor }

// GetCore returns __getProjectsMergeRequestsInput.Core, and is useful for accessing the field via an interface.
func (v *__getProjectsMergeRequestsInput) GetCore() *bool { return v.Core }

// GetExtra returns __getProjectsMergeRequestsInput.Extra, and is useful for accessing the field via an interface.
func (v *__getProjectsMergeRequestsInput) GetExtra() *bool { return v.Extra }

// GetParticipants returns __getProjectsMergeRequestsInput.Participants, and is useful for accessing the field via an interface.
func (v *__getProjectsMergeRequestsInput) GetParticipants() *bool { return v.Participants }

// __getProjectsPipelinesInput is used internally by genqlient
type __getProjectsPipelinesInput struct {
	Ids           []string   `json:"ids"`
	Source        *string    `json:"source"`
	UpdatedAfter  *time.Time `json:"updatedAfter"`
	UpdatedBefore *time.Time `json:"updatedBefore"`
	EndCursor     *string    `json:"endCursor"`
}

// GetIds returns __getProjectsPipelinesInput.Ids, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesInput) GetIds() []string { return v.Ids }

// GetSource returns __getProjectsPipelinesInput.Source, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesInput) GetSource() *string { return v.Source }

// GetUpdatedAfter returns __getProjectsPipelinesInput.UpdatedAfter, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesInput) GetUpdatedAfter() *time.Time { return v.UpdatedAfter }

// GetUpdatedBefore returns __getProjectsPipelinesInput.UpdatedBefore, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesInput) GetUpdatedBefore() *time.Time { return v.UpdatedBefore }

// GetEndCursor returns __getProjectsPipelinesInput.EndCursor, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesInput) GetEndCursor() *string { return v.EndCursor }

// __getProjectsPipelinesJobsInput is used internally by genqlient
type __getProjectsPipelinesJobsInput struct {
	Ids           []string   `json:"ids"`
	Source        *string    `json:"source"`
	UpdatedAfter  *time.Time `json:"updatedAfter"`
	UpdatedBefore *time.Time `json:"updatedBefore"`
	EndCursor     *string    `json:"endCursor"`
	Core          bool       `json:"_core"`
	Extra         bool       `json:"_extra"`
}

// GetIds returns __getProjectsPipelinesJobsInput.Ids, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesJobsInput) GetIds() []string { return v.Ids }

// GetSource returns __getProjectsPipelinesJobsInput.Source, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesJobsInput) GetSource() *string { return v.Source }

// GetUpdatedAfter returns __getProjectsPipelinesJobsInput.UpdatedAfter, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesJobsInput) GetUpdatedAfter() *time.Time { return v.UpdatedAfter }

// GetUpdatedBefore returns __getProjectsPipelinesJobsInput.UpdatedBefore, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesJobsInput) GetUpdatedBefore() *time.Time { return v.UpdatedBefore }

// GetEndCursor returns __getProjectsPipelinesJobsInput.EndCursor, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesJobsInput) GetEndCursor() *string { return v.EndCursor }

// GetCore returns __getProjectsPipelinesJobsInput.Core, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesJobsInput) GetCore() bool { return v.Core }

// GetExtra returns __getProjectsPipelinesJobsInput.Extra, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesJobsInput) GetExtra() bool { return v.Extra }

// __getProjectsPipelinesTestReportSummaryInput is used internally by genqlient
type __getProjectsPipelinesTestReportSummaryInput struct {
	Ids           []string   `json:"ids"`
	UpdatedAfter  *time.Time `json:"updatedAfter"`
	UpdatedBefore *time.Time `json:"updatedBefore"`
	Source        *string    `json:"source"`
	EndCursor     *string    `json:"endCursor"`
}

// GetIds returns __getProjectsPipelinesTestReportSummaryInput.Ids, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesTestReportSummaryInput) GetIds() []string { return v.Ids }

// GetUpdatedAfter returns __getProjectsPipelinesTestReportSummaryInput.UpdatedAfter, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesTestReportSummaryInput) GetUpdatedAfter() *time.Time {
	return v.UpdatedAfter
}

// GetUpdatedBefore returns __getProjectsPipelinesTestReportSummaryInput.UpdatedBefore, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesTestReportSummaryInput) GetUpdatedBefore() *time.Time {
	return v.UpdatedBefore
}

// GetSource returns __getProjectsPipelinesTestReportSummaryInput.Source, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesTestReportSummaryInput) GetSource() *string { return v.Source }

// GetEndCursor returns __getProjectsPipelinesTestReportSummaryInput.EndCursor, and is useful for accessing the field via an interface.
func (v *__getProjectsPipelinesTestReportSummaryInput) GetEndCursor() *string { return v.EndCursor }

// getProjectIdPipelineProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Project.
type getProjectIdPipelineProjectsProjectConnection struct {
	// A list of nodes.
	Nodes []*getProjectIdPipelineProjectsProjectConnectionNodesProject `json:"nodes"`
}

// GetNodes returns getProjectIdPipelineProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnection) GetNodes() []*getProjectIdPipelineProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// getProjectIdPipelineProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type getProjectIdPipelineProjectsProjectConnectionNodesProject struct {
	ProjectReferenceFields `json:"-"`
	// Build pipeline of the project.
	Pipeline *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline `json:"pipeline"`
}

// GetPipeline returns getProjectIdPipelineProjectsProjectConnectionNodesProject.Pipeline, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProject) GetPipeline() *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline {
	return v.Pipeline
}

// GetId returns getProjectIdPipelineProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProject) GetId() string {
	return v.ProjectReferenceFields.Id
}

// GetFullPath returns getProjectIdPipelineProjectsProjectConnectionNodesProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *getProjectIdPipelineProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectIdPipelineProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectIdPipelineProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectIdPipelineProjectsProjectConnectionNodesProject struct {
	Pipeline *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline `json:"pipeline"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectIdPipelineProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectIdPipelineProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalgetProjectIdPipelineProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalgetProjectIdPipelineProjectsProjectConnectionNodesProject

	retval.Pipeline = v.Pipeline
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline includes the requested fields of the GraphQL type Pipeline.
type getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline struct {
	PipelineReferenceFields `json:"-"`
	PipelineFieldsCore      `json:"-"`
}

// GetId returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.Id, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetId() string {
	return v.PipelineReferenceFields.Id
}

// GetIid returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.Iid, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetIid() string {
	return v.PipelineReferenceFields.Iid
}

// GetName returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.Name, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetName() *string {
	return v.PipelineFieldsCore.Name
}

// GetRef returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.Ref, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetRef() *string {
	return v.PipelineFieldsCore.Ref
}

// GetStatus returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.Status, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetStatus() PipelineStatusEnum {
	return v.PipelineFieldsCore.Status
}

// GetSource returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.Source, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetSource() *string {
	return v.PipelineFieldsCore.Source
}

// GetSha returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.Sha, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetSha() *string {
	return v.PipelineFieldsCore.Sha
}

// GetCommittedAt returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.CommittedAt, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetCommittedAt() *time.Time {
	return v.PipelineFieldsCore.CommittedAt
}

// GetCreatedAt returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.CreatedAt, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetCreatedAt() time.Time {
	return v.PipelineFieldsCore.CreatedAt
}

// GetUpdatedAt returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetUpdatedAt() time.Time {
	return v.PipelineFieldsCore.UpdatedAt
}

// GetStartedAt returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.StartedAt, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetStartedAt() *time.Time {
	return v.PipelineFieldsCore.StartedAt
}

// GetFinishedAt returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.FinishedAt, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetFinishedAt() *time.Time {
	return v.PipelineFieldsCore.FinishedAt
}

// GetQueuedDuration returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.QueuedDuration, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetQueuedDuration() *float64 {
	return v.PipelineFieldsCore.QueuedDuration
}

// GetDuration returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.Duration, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetDuration() *int {
	return v.PipelineFieldsCore.Duration
}

// GetCoverage returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.Coverage, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetCoverage() *float64 {
	return v.PipelineFieldsCore.Coverage
}

// GetFailureReason returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.FailureReason, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetFailureReason() *string {
	return v.PipelineFieldsCore.FailureReason
}

// GetWarnings returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.Warnings, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetWarnings() bool {
	return v.PipelineFieldsCore.Warnings
}

// GetYamlErrors returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.YamlErrors, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetYamlErrors() bool {
	return v.PipelineFieldsCore.YamlErrors
}

// GetChild returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.Child, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetChild() bool {
	return v.PipelineFieldsCore.Child
}

// GetUpstream returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.Upstream, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetUpstream() *PipelineFieldsCoreUpstreamPipeline {
	return v.PipelineFieldsCore.Upstream
}

// GetMergeRequest returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.MergeRequest, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetMergeRequest() *PipelineFieldsCoreMergeRequest {
	return v.PipelineFieldsCore.MergeRequest
}

// GetUser returns getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline.User, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) GetUser() *PipelineFieldsCoreUserUserCore {
	return v.PipelineFieldsCore.User
}

func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PipelineReferenceFields)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.PipelineFieldsCore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline struct {
	Id string `json:"id"`

	Iid string `json:"iid"`

	Name *string `json:"name"`

	Ref *string `json:"ref"`

	Status PipelineStatusEnum `json:"status"`

	Source *string `json:"source"`

	Sha *string `json:"sha"`

	CommittedAt *time.Time `json:"committedAt"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	StartedAt *time.Time `json:"startedAt"`

	FinishedAt *time.Time `json:"finishedAt"`

	QueuedDuration *float64 `json:"queuedDuration"`

	Duration *int `json:"duration"`

	Coverage *float64 `json:"coverage"`

	FailureReason *string `json:"failureReason"`

	Warnings bool `json:"warnings"`

	YamlErrors bool `json:"yamlErrors"`

	Child bool `json:"child"`

	Upstream *PipelineFieldsCoreUpstreamPipeline `json:"upstream"`

	MergeRequest *PipelineFieldsCoreMergeRequest `json:"mergeRequest"`

	User *PipelineFieldsCoreUserUserCore `json:"user"`
}

func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline) __premarshalJSON() (*__premarshalgetProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline, error) {
	var retval __premarshalgetProjectIdPipelineProjectsProjectConnectionNodesProjectPipeline

	retval.Id = v.PipelineReferenceFields.Id
	retval.Iid = v.PipelineReferenceFields.Iid
	retval.Name = v.PipelineFieldsCore.Name
	retval.Ref = v.PipelineFieldsCore.Ref
	retval.Status = v.PipelineFieldsCore.Status
	retval.Source = v.PipelineFieldsCore.Source
	retval.Sha = v.PipelineFieldsCore.Sha
	retval.CommittedAt = v.PipelineFieldsCore.CommittedAt
	retval.CreatedAt = v.PipelineFieldsCore.CreatedAt
	retval.UpdatedAt = v.PipelineFieldsCore.UpdatedAt
	retval.StartedAt = v.PipelineFieldsCore.StartedAt
	retval.FinishedAt = v.PipelineFieldsCore.FinishedAt
	retval.QueuedDuration = v.PipelineFieldsCore.QueuedDuration
	retval.Duration = v.PipelineFieldsCore.Duration
	retval.Coverage = v.PipelineFieldsCore.Coverage
	retval.FailureReason = v.PipelineFieldsCore.FailureReason
	retval.Warnings = v.PipelineFieldsCore.Warnings
	retval.YamlErrors = v.PipelineFieldsCore.YamlErrors
	retval.Child = v.PipelineFieldsCore.Child
	retval.Upstream = v.PipelineFieldsCore.Upstream
	retval.MergeRequest = v.PipelineFieldsCore.MergeRequest
	retval.User = v.PipelineFieldsCore.User
	return &retval, nil
}

// getProjectIdPipelineResponse is returned by getProjectIdPipeline on success.
type getProjectIdPipelineResponse struct {
	// Find projects visible to the current user.
	Projects *getProjectIdPipelineProjectsProjectConnection `json:"projects"`
}

// GetProjects returns getProjectIdPipelineResponse.Projects, and is useful for accessing the field via an interface.
func (v *getProjectIdPipelineResponse) GetProjects() *getProjectIdPipelineProjectsProjectConnection {
	return v.Projects
}

// getProjectMergeRequestNotesProject includes the requested fields of the GraphQL type Project.
type getProjectMergeRequestNotesProject struct {
	ProjectReferenceFields `json:"-"`
	// A single merge request of the project.
	MergeRequest *getProjectMergeRequestNotesProjectMergeRequest `json:"mergeRequest"`
}

// GetMergeRequest returns getProjectMergeRequestNotesProject.MergeRequest, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProject) GetMergeRequest() *getProjectMergeRequestNotesProjectMergeRequest {
	return v.MergeRequest
}

// GetId returns getProjectMergeRequestNotesProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProject) GetId() string { return v.ProjectReferenceFields.Id }

// GetFullPath returns getProjectMergeRequestNotesProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *getProjectMergeRequestNotesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectMergeRequestNotesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectMergeRequestNotesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectMergeRequestNotesProject struct {
	MergeRequest *getProjectMergeRequestNotesProjectMergeRequest `json:"mergeRequest"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectMergeRequestNotesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectMergeRequestNotesProject) __premarshalJSON() (*__premarshalgetProjectMergeRequestNotesProject, error) {
	var retval __premarshalgetProjectMergeRequestNotesProject

	retval.MergeRequest = v.MergeRequest
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// getProjectMergeRequestNotesProjectMergeRequest includes the requested fields of the GraphQL type MergeRequest.
type getProjectMergeRequestNotesProjectMergeRequest struct {
	MergeRequestReferenceFields `json:"-"`
	// All notes on this noteable.
	Notes getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnection `json:"notes"`
}

// GetNotes returns getProjectMergeRequestNotesProjectMergeRequest.Notes, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequest) GetNotes() getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnection {
	return v.Notes
}

// GetId returns getProjectMergeRequestNotesProjectMergeRequest.Id, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequest) GetId() string {
	return v.MergeRequestReferenceFields.Id
}

// GetIid returns getProjectMergeRequestNotesProjectMergeRequest.Iid, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequest) GetIid() string {
	return v.MergeRequestReferenceFields.Iid
}

func (v *getProjectMergeRequestNotesProjectMergeRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectMergeRequestNotesProjectMergeRequest
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectMergeRequestNotesProjectMergeRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MergeRequestReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectMergeRequestNotesProjectMergeRequest struct {
	Notes getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnection `json:"notes"`

	Id string `json:"id"`

	Iid string `json:"iid"`
}

func (v *getProjectMergeRequestNotesProjectMergeRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectMergeRequestNotesProjectMergeRequest) __premarshalJSON() (*__premarshalgetProjectMergeRequestNotesProjectMergeRequest, error) {
	var retval __premarshalgetProjectMergeRequestNotesProjectMergeRequest

	retval.Notes = v.Notes
	retval.Id = v.MergeRequestReferenceFields.Id
	retval.Iid = v.MergeRequestReferenceFields.Iid
	return &retval, nil
}

// getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnection includes the requested fields of the GraphQL type NoteConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Note.
type getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnection struct {
	// A list of nodes.
	Nodes []*getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnection) GetNodes() []*getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote {
	return v.Nodes
}

// GetPageInfo returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnection) GetPageInfo() getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo {
	return v.PageInfo
}

// getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote includes the requested fields of the GraphQL type Note.
type getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote struct {
	MergeRequestNotesFieldsCore `json:"-"`
}

// GetId returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote.Id, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) GetId() string {
	return v.MergeRequestNotesFieldsCore.Id
}

// GetCreatedAt returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote.CreatedAt, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) GetCreatedAt() time.Time {
	return v.MergeRequestNotesFieldsCore.CreatedAt
}

// GetUpdatedAt returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) GetUpdatedAt() time.Time {
	return v.MergeRequestNotesFieldsCore.UpdatedAt
}

// GetAuthor returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote.Author, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) GetAuthor() *MergeRequestNotesFieldsCoreAuthorUserCore {
	return v.MergeRequestNotesFieldsCore.Author
}

// GetBody returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote.Body, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) GetBody() string {
	return v.MergeRequestNotesFieldsCore.Body
}

// GetInternal returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote.Internal, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) GetInternal() *bool {
	return v.MergeRequestNotesFieldsCore.Internal
}

// GetSystem returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote.System, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) GetSystem() bool {
	return v.MergeRequestNotesFieldsCore.System
}

// GetResolvable returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote.Resolvable, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) GetResolvable() bool {
	return v.MergeRequestNotesFieldsCore.Resolvable
}

// GetResolved returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote.Resolved, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) GetResolved() bool {
	return v.MergeRequestNotesFieldsCore.Resolved
}

// GetResolvedAt returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote.ResolvedAt, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) GetResolvedAt() *time.Time {
	return v.MergeRequestNotesFieldsCore.ResolvedAt
}

// GetResolvedBy returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote.ResolvedBy, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) GetResolvedBy() *MergeRequestNotesFieldsCoreResolvedByUserCore {
	return v.MergeRequestNotesFieldsCore.ResolvedBy
}

func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MergeRequestNotesFieldsCore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Author *MergeRequestNotesFieldsCoreAuthorUserCore `json:"author"`

	Body string `json:"body"`

	Internal *bool `json:"internal"`

	System bool `json:"system"`

	Resolvable bool `json:"resolvable"`

	Resolved bool `json:"resolved"`

	ResolvedAt *time.Time `json:"resolvedAt"`

	ResolvedBy *MergeRequestNotesFieldsCoreResolvedByUserCore `json:"resolvedBy"`
}

func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote) __premarshalJSON() (*__premarshalgetProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote, error) {
	var retval __premarshalgetProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionNodesNote

	retval.Id = v.MergeRequestNotesFieldsCore.Id
	retval.CreatedAt = v.MergeRequestNotesFieldsCore.CreatedAt
	retval.UpdatedAt = v.MergeRequestNotesFieldsCore.UpdatedAt
	retval.Author = v.MergeRequestNotesFieldsCore.Author
	retval.Body = v.MergeRequestNotesFieldsCore.Body
	retval.Internal = v.MergeRequestNotesFieldsCore.Internal
	retval.System = v.MergeRequestNotesFieldsCore.System
	retval.Resolvable = v.MergeRequestNotesFieldsCore.Resolvable
	retval.Resolved = v.MergeRequestNotesFieldsCore.Resolved
	retval.ResolvedAt = v.MergeRequestNotesFieldsCore.ResolvedAt
	retval.ResolvedBy = v.MergeRequestNotesFieldsCore.ResolvedBy
	return &retval, nil
}

// getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo, error) {
	var retval __premarshalgetProjectMergeRequestNotesProjectMergeRequestNotesNoteConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectMergeRequestNotesResponse is returned by getProjectMergeRequestNotes on success.
type getProjectMergeRequestNotesResponse struct {
	// Find a project.
	Project *getProjectMergeRequestNotesProject `json:"project"`
}

// GetProject returns getProjectMergeRequestNotesResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestNotesResponse) GetProject() *getProjectMergeRequestNotesProject {
	return v.Project
}

// getProjectMergeRequestsNotesProject includes the requested fields of the GraphQL type Project.
type getProjectMergeRequestsNotesProject struct {
	ProjectReferenceFields `json:"-"`
	// Merge requests of the project.
	MergeRequests *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnection `json:"mergeRequests"`
}

// GetMergeRequests returns getProjectMergeRequestsNotesProject.MergeRequests, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProject) GetMergeRequests() *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnection {
	return v.MergeRequests
}

// GetId returns getProjectMergeRequestsNotesProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProject) GetId() string { return v.ProjectReferenceFields.Id }

// GetFullPath returns getProjectMergeRequestsNotesProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *getProjectMergeRequestsNotesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectMergeRequestsNotesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectMergeRequestsNotesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectMergeRequestsNotesProject struct {
	MergeRequests *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnection `json:"mergeRequests"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectMergeRequestsNotesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectMergeRequestsNotesProject) __premarshalJSON() (*__premarshalgetProjectMergeRequestsNotesProject, error) {
	var retval __premarshalgetProjectMergeRequestsNotesProject

	retval.MergeRequests = v.MergeRequests
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnection includes the requested fields of the GraphQL type MergeRequestConnection.
// The GraphQL type's documentation follows.
//
// The connection type for MergeRequest.
type getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnection struct {
	// A list of nodes.
	Nodes []*getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnection) GetNodes() []*getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest {
	return v.Nodes
}

// GetPageInfo returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnection) GetPageInfo() getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo {
	return v.PageInfo
}

// getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest includes the requested fields of the GraphQL type MergeRequest.
type getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest struct {
	MergeRequestReferenceFields `json:"-"`
	// All notes on this noteable.
	Notes getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection `json:"notes"`
}

// GetNotes returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Notes, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetNotes() getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection {
	return v.Notes
}

// GetId returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Id, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetId() string {
	return v.MergeRequestReferenceFields.Id
}

// GetIid returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Iid, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetIid() string {
	return v.MergeRequestReferenceFields.Iid
}

func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MergeRequestReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest struct {
	Notes getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection `json:"notes"`

	Id string `json:"id"`

	Iid string `json:"iid"`
}

func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) __premarshalJSON() (*__premarshalgetProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest, error) {
	var retval __premarshalgetProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest

	retval.Notes = v.Notes
	retval.Id = v.MergeRequestReferenceFields.Id
	retval.Iid = v.MergeRequestReferenceFields.Iid
	return &retval, nil
}

// getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection includes the requested fields of the GraphQL type NoteConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Note.
type getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection struct {
	// A list of nodes.
	Nodes []*getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection) GetNodes() []*getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote {
	return v.Nodes
}

// GetPageInfo returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection) GetPageInfo() getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo {
	return v.PageInfo
}

// getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote includes the requested fields of the GraphQL type Note.
type getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote struct {
	MergeRequestNotesFieldsCore `json:"-"`
}

// GetId returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.Id, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetId() string {
	return v.MergeRequestNotesFieldsCore.Id
}

// GetCreatedAt returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.CreatedAt, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetCreatedAt() time.Time {
	return v.MergeRequestNotesFieldsCore.CreatedAt
}

// GetUpdatedAt returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetUpdatedAt() time.Time {
	return v.MergeRequestNotesFieldsCore.UpdatedAt
}

// GetAuthor returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.Author, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetAuthor() *MergeRequestNotesFieldsCoreAuthorUserCore {
	return v.MergeRequestNotesFieldsCore.Author
}

// GetBody returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.Body, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetBody() string {
	return v.MergeRequestNotesFieldsCore.Body
}

// GetInternal returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.Internal, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetInternal() *bool {
	return v.MergeRequestNotesFieldsCore.Internal
}

// GetSystem returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.System, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetSystem() bool {
	return v.MergeRequestNotesFieldsCore.System
}

// GetResolvable returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.Resolvable, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetResolvable() bool {
	return v.MergeRequestNotesFieldsCore.Resolvable
}

// GetResolved returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.Resolved, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetResolved() bool {
	return v.MergeRequestNotesFieldsCore.Resolved
}

// GetResolvedAt returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.ResolvedAt, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetResolvedAt() *time.Time {
	return v.MergeRequestNotesFieldsCore.ResolvedAt
}

// GetResolvedBy returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.ResolvedBy, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetResolvedBy() *MergeRequestNotesFieldsCoreResolvedByUserCore {
	return v.MergeRequestNotesFieldsCore.ResolvedBy
}

func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MergeRequestNotesFieldsCore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Author *MergeRequestNotesFieldsCoreAuthorUserCore `json:"author"`

	Body string `json:"body"`

	Internal *bool `json:"internal"`

	System bool `json:"system"`

	Resolvable bool `json:"resolvable"`

	Resolved bool `json:"resolved"`

	ResolvedAt *time.Time `json:"resolvedAt"`

	ResolvedBy *MergeRequestNotesFieldsCoreResolvedByUserCore `json:"resolvedBy"`
}

func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) __premarshalJSON() (*__premarshalgetProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote, error) {
	var retval __premarshalgetProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote

	retval.Id = v.MergeRequestNotesFieldsCore.Id
	retval.CreatedAt = v.MergeRequestNotesFieldsCore.CreatedAt
	retval.UpdatedAt = v.MergeRequestNotesFieldsCore.UpdatedAt
	retval.Author = v.MergeRequestNotesFieldsCore.Author
	retval.Body = v.MergeRequestNotesFieldsCore.Body
	retval.Internal = v.MergeRequestNotesFieldsCore.Internal
	retval.System = v.MergeRequestNotesFieldsCore.System
	retval.Resolvable = v.MergeRequestNotesFieldsCore.Resolvable
	retval.Resolved = v.MergeRequestNotesFieldsCore.Resolved
	retval.ResolvedAt = v.MergeRequestNotesFieldsCore.ResolvedAt
	retval.ResolvedBy = v.MergeRequestNotesFieldsCore.ResolvedBy
	return &retval, nil
}

// getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo, error) {
	var retval __premarshalgetProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo, error) {
	var retval __premarshalgetProjectMergeRequestsNotesProjectMergeRequestsMergeRequestConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectMergeRequestsNotesResponse is returned by getProjectMergeRequestsNotes on success.
type getProjectMergeRequestsNotesResponse struct {
	// Find a project.
	Project *getProjectMergeRequestsNotesProject `json:"project"`
}

// GetProject returns getProjectMergeRequestsNotesResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsNotesResponse) GetProject() *getProjectMergeRequestsNotesProject {
	return v.Project
}

// getProjectMergeRequestsProject includes the requested fields of the GraphQL type Project.
type getProjectMergeRequestsProject struct {
	ProjectReferenceFields `json:"-"`
	// Merge requests of the project.
	MergeRequests *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnection `json:"mergeRequests"`
}

// GetMergeRequests returns getProjectMergeRequestsProject.MergeRequests, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProject) GetMergeRequests() *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnection {
	return v.MergeRequests
}

// GetId returns getProjectMergeRequestsProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProject) GetId() string { return v.ProjectReferenceFields.Id }

// GetFullPath returns getProjectMergeRequestsProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *getProjectMergeRequestsProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectMergeRequestsProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectMergeRequestsProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectMergeRequestsProject struct {
	MergeRequests *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnection `json:"mergeRequests"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectMergeRequestsProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectMergeRequestsProject) __premarshalJSON() (*__premarshalgetProjectMergeRequestsProject, error) {
	var retval __premarshalgetProjectMergeRequestsProject

	retval.MergeRequests = v.MergeRequests
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// getProjectMergeRequestsProjectMergeRequestsMergeRequestConnection includes the requested fields of the GraphQL type MergeRequestConnection.
// The GraphQL type's documentation follows.
//
// The connection type for MergeRequest.
type getProjectMergeRequestsProjectMergeRequestsMergeRequestConnection struct {
	// A list of nodes.
	Nodes []*getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnection) GetNodes() []*getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest {
	return v.Nodes
}

// GetPageInfo returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnection) GetPageInfo() getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo {
	return v.PageInfo
}

// getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest includes the requested fields of the GraphQL type MergeRequest.
type getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest struct {
	MergeRequestReferenceFields    `json:"-"`
	MergeRequestFieldsCore         `json:"-"`
	MergeRequestFieldsExtra        `json:"-"`
	MergeRequestFieldsParticipants `json:"-"`
}

// GetId returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Id, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetId() string {
	return v.MergeRequestReferenceFields.Id
}

// GetIid returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Iid, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetIid() string {
	return v.MergeRequestReferenceFields.Iid
}

// GetCreatedAt returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.CreatedAt, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetCreatedAt() time.Time {
	return v.MergeRequestFieldsCore.CreatedAt
}

// GetUpdatedAt returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetUpdatedAt() time.Time {
	return v.MergeRequestFieldsCore.UpdatedAt
}

// GetMergedAt returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.MergedAt, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetMergedAt() *time.Time {
	return v.MergeRequestFieldsCore.MergedAt
}

// GetClosedAt returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.ClosedAt, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetClosedAt() *time.Time {
	return v.MergeRequestFieldsCore.ClosedAt
}

// GetName returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Name, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetName() *string {
	return v.MergeRequestFieldsCore.Name
}

// GetTitle returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Title, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetTitle() string {
	return v.MergeRequestFieldsCore.Title
}

// GetLabels returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Labels, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetLabels() *MergeRequestFieldsCoreLabelsLabelConnection {
	return v.MergeRequestFieldsCore.Labels
}

// GetState returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.State, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetState() MergeRequestState {
	return v.MergeRequestFieldsCore.State
}

// GetDetailedMergeStatus returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.DetailedMergeStatus, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetDetailedMergeStatus() *DetailedMergeStatus {
	return v.MergeRequestFieldsCore.DetailedMergeStatus
}

// GetMergeError returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.MergeError, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetMergeError() *string {
	return v.MergeRequestFieldsCore.MergeError
}

// GetApproved returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Approved, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetApproved() bool {
	return v.MergeRequestFieldsCore.Approved
}

// GetConflicts returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Conflicts, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetConflicts() bool {
	return v.MergeRequestFieldsCore.Conflicts
}

// GetDraft returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Draft, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetDraft() bool {
	return v.MergeRequestFieldsCore.Draft
}

// GetMergeable returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Mergeable, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetMergeable() bool {
	return v.MergeRequestFieldsCore.Mergeable
}

// GetSourceProjectId returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.SourceProjectId, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetSourceProjectId() *int {
	return v.MergeRequestFieldsExtra.SourceProjectId
}

// GetTargetProjectId returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.TargetProjectId, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetTargetProjectId() int {
	return v.MergeRequestFieldsExtra.TargetProjectId
}

// GetSourceBranch returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.SourceBranch, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetSourceBranch() string {
	return v.MergeRequestFieldsExtra.SourceBranch
}

// GetTargetBranch returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.TargetBranch, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetTargetBranch() string {
	return v.MergeRequestFieldsExtra.TargetBranch
}

// GetMergeCommitSha returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.MergeCommitSha, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetMergeCommitSha() *string {
	return v.MergeRequestFieldsExtra.MergeCommitSha
}

// GetRebaseCommitSha returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.RebaseCommitSha, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetRebaseCommitSha() *string {
	return v.MergeRequestFieldsExtra.RebaseCommitSha
}

// GetDiffRefs returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.DiffRefs, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetDiffRefs() *MergeRequestFieldsExtraDiffRefs {
	return v.MergeRequestFieldsExtra.DiffRefs
}

// GetDiffStatsSummary returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.DiffStatsSummary, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetDiffStatsSummary() *MergeRequestFieldsExtraDiffStatsSummary {
	return v.MergeRequestFieldsExtra.DiffStatsSummary
}

// GetCommitCount returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.CommitCount, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetCommitCount() *int {
	return v.MergeRequestFieldsExtra.CommitCount
}

// GetUserNotesCount returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.UserNotesCount, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetUserNotesCount() *int {
	return v.MergeRequestFieldsExtra.UserNotesCount
}

// GetMilestone returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Milestone, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetMilestone() *MergeRequestFieldsExtraMilestone {
	return v.MergeRequestFieldsExtra.Milestone
}

// GetAuthor returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Author, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetAuthor() *MergeRequestFieldsParticipantsAuthorMergeRequestAuthor {
	return v.MergeRequestFieldsParticipants.Author
}

// GetAssignees returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Assignees, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetAssignees() *MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnection {
	return v.MergeRequestFieldsParticipants.Assignees
}

// GetReviewers returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Reviewers, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetReviewers() *MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnection {
	return v.MergeRequestFieldsParticipants.Reviewers
}

// GetApprovedBy returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.ApprovedBy, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetApprovedBy() *MergeRequestFieldsParticipantsApprovedByUserCoreConnection {
	return v.MergeRequestFieldsParticipants.ApprovedBy
}

// GetMergeUser returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.MergeUser, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetMergeUser() *MergeRequestFieldsParticipantsMergeUserUserCore {
	return v.MergeRequestFieldsParticipants.MergeUser
}

func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MergeRequestReferenceFields)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.MergeRequestFieldsCore)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.MergeRequestFieldsExtra)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.MergeRequestFieldsParticipants)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest struct {
	Id string `json:"id"`

	Iid string `json:"iid"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	MergedAt *time.Time `json:"mergedAt"`

	ClosedAt *time.Time `json:"closedAt"`

	Name *string `json:"name"`

	Title string `json:"title"`

	Labels *MergeRequestFieldsCoreLabelsLabelConnection `json:"labels"`

	State MergeRequestState `json:"state"`

	DetailedMergeStatus *DetailedMergeStatus `json:"detailedMergeStatus"`

	MergeError *string `json:"mergeError"`

	Approved bool `json:"approved"`

	Conflicts bool `json:"conflicts"`

	Draft bool `json:"draft"`

	Mergeable bool `json:"mergeable"`

	SourceProjectId *int `json:"sourceProjectId"`

	TargetProjectId int `json:"targetProjectId"`

	SourceBranch string `json:"sourceBranch"`

	TargetBranch string `json:"targetBranch"`

	MergeCommitSha *string `json:"mergeCommitSha"`

	RebaseCommitSha *string `json:"rebaseCommitSha"`

	DiffRefs *MergeRequestFieldsExtraDiffRefs `json:"diffRefs"`

	DiffStatsSummary *MergeRequestFieldsExtraDiffStatsSummary `json:"diffStatsSummary"`

	CommitCount *int `json:"commitCount"`

	UserNotesCount *int `json:"userNotesCount"`

	Milestone *MergeRequestFieldsExtraMilestone `json:"milestone"`

	Author *MergeRequestFieldsParticipantsAuthorMergeRequestAuthor `json:"author"`

	Assignees *MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnection `json:"assignees"`

	Reviewers *MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnection `json:"reviewers"`

	ApprovedBy *MergeRequestFieldsParticipantsApprovedByUserCoreConnection `json:"approvedBy"`

	MergeUser *MergeRequestFieldsParticipantsMergeUserUserCore `json:"mergeUser"`
}

func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) __premarshalJSON() (*__premarshalgetProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest, error) {
	var retval __premarshalgetProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionNodesMergeRequest

	retval.Id = v.MergeRequestReferenceFields.Id
	retval.Iid = v.MergeRequestReferenceFields.Iid
	retval.CreatedAt = v.MergeRequestFieldsCore.CreatedAt
	retval.UpdatedAt = v.MergeRequestFieldsCore.UpdatedAt
	retval.MergedAt = v.MergeRequestFieldsCore.MergedAt
	retval.ClosedAt = v.MergeRequestFieldsCore.ClosedAt
	retval.Name = v.MergeRequestFieldsCore.Name
	retval.Title = v.MergeRequestFieldsCore.Title
	retval.Labels = v.MergeRequestFieldsCore.Labels
	retval.State = v.MergeRequestFieldsCore.State
	retval.DetailedMergeStatus = v.MergeRequestFieldsCore.DetailedMergeStatus
	retval.MergeError = v.MergeRequestFieldsCore.MergeError
	retval.Approved = v.MergeRequestFieldsCore.Approved
	retval.Conflicts = v.MergeRequestFieldsCore.Conflicts
	retval.Draft = v.MergeRequestFieldsCore.Draft
	retval.Mergeable = v.MergeRequestFieldsCore.Mergeable
	retval.SourceProjectId = v.MergeRequestFieldsExtra.SourceProjectId
	retval.TargetProjectId = v.MergeRequestFieldsExtra.TargetProjectId
	retval.SourceBranch = v.MergeRequestFieldsExtra.SourceBranch
	retval.TargetBranch = v.MergeRequestFieldsExtra.TargetBranch
	retval.MergeCommitSha = v.MergeRequestFieldsExtra.MergeCommitSha
	retval.RebaseCommitSha = v.MergeRequestFieldsExtra.RebaseCommitSha
	retval.DiffRefs = v.MergeRequestFieldsExtra.DiffRefs
	retval.DiffStatsSummary = v.MergeRequestFieldsExtra.DiffStatsSummary
	retval.CommitCount = v.MergeRequestFieldsExtra.CommitCount
	retval.UserNotesCount = v.MergeRequestFieldsExtra.UserNotesCount
	retval.Milestone = v.MergeRequestFieldsExtra.Milestone
	retval.Author = v.MergeRequestFieldsParticipants.Author
	retval.Assignees = v.MergeRequestFieldsParticipants.Assignees
	retval.Reviewers = v.MergeRequestFieldsParticipants.Reviewers
	retval.ApprovedBy = v.MergeRequestFieldsParticipants.ApprovedBy
	retval.MergeUser = v.MergeRequestFieldsParticipants.MergeUser
	return &retval, nil
}

// getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo, error) {
	var retval __premarshalgetProjectMergeRequestsProjectMergeRequestsMergeRequestConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectMergeRequestsResponse is returned by getProjectMergeRequests on success.
type getProjectMergeRequestsResponse struct {
	// Find a project.
	Project *getProjectMergeRequestsProject `json:"project"`
}

// GetProject returns getProjectMergeRequestsResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectMergeRequestsResponse) GetProject() *getProjectMergeRequestsProject {
	return v.Project
}

// getProjectPipelineJobsProject includes the requested fields of the GraphQL type Project.
type getProjectPipelineJobsProject struct {
	ProjectReferenceFields `json:"-"`
	// Build pipeline of the project.
	Pipeline *getProjectPipelineJobsProjectPipeline `json:"pipeline"`
}

// GetPipeline returns getProjectPipelineJobsProject.Pipeline, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProject) GetPipeline() *getProjectPipelineJobsProjectPipeline {
	return v.Pipeline
}

// GetId returns getProjectPipelineJobsProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProject) GetId() string { return v.ProjectReferenceFields.Id }

// GetFullPath returns getProjectPipelineJobsProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *getProjectPipelineJobsProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelineJobsProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelineJobsProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelineJobsProject struct {
	Pipeline *getProjectPipelineJobsProjectPipeline `json:"pipeline"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectPipelineJobsProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelineJobsProject) __premarshalJSON() (*__premarshalgetProjectPipelineJobsProject, error) {
	var retval __premarshalgetProjectPipelineJobsProject

	retval.Pipeline = v.Pipeline
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// getProjectPipelineJobsProjectPipeline includes the requested fields of the GraphQL type Pipeline.
type getProjectPipelineJobsProjectPipeline struct {
	PipelineReferenceFields `json:"-"`
	// Jobs belonging to the pipeline.
	Jobs *getProjectPipelineJobsProjectPipelineJobsCiJobConnection `json:"jobs"`
}

// GetJobs returns getProjectPipelineJobsProjectPipeline.Jobs, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipeline) GetJobs() *getProjectPipelineJobsProjectPipelineJobsCiJobConnection {
	return v.Jobs
}

// GetId returns getProjectPipelineJobsProjectPipeline.Id, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipeline) GetId() string { return v.PipelineReferenceFields.Id }

// GetIid returns getProjectPipelineJobsProjectPipeline.Iid, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipeline) GetIid() string { return v.PipelineReferenceFields.Iid }

func (v *getProjectPipelineJobsProjectPipeline) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelineJobsProjectPipeline
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelineJobsProjectPipeline = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PipelineReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelineJobsProjectPipeline struct {
	Jobs *getProjectPipelineJobsProjectPipelineJobsCiJobConnection `json:"jobs"`

	Id string `json:"id"`

	Iid string `json:"iid"`
}

func (v *getProjectPipelineJobsProjectPipeline) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelineJobsProjectPipeline) __premarshalJSON() (*__premarshalgetProjectPipelineJobsProjectPipeline, error) {
	var retval __premarshalgetProjectPipelineJobsProjectPipeline

	retval.Jobs = v.Jobs
	retval.Id = v.PipelineReferenceFields.Id
	retval.Iid = v.PipelineReferenceFields.Iid
	return &retval, nil
}

// getProjectPipelineJobsProjectPipelineJobsCiJobConnection includes the requested fields of the GraphQL type CiJobConnection.
// The GraphQL type's documentation follows.
//
// The connection type for CiJob.
type getProjectPipelineJobsProjectPipelineJobsCiJobConnection struct {
	// A list of nodes.
	Nodes []*getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectPipelineJobsProjectPipelineJobsCiJobConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnection) GetNodes() []*getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob {
	return v.Nodes
}

// GetPageInfo returns getProjectPipelineJobsProjectPipelineJobsCiJobConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnection) GetPageInfo() getProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo {
	return v.PageInfo
}

// getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob includes the requested fields of the GraphQL type CiJob.
type getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob struct {
	JobReferenceFields `json:"-"`
	JobFieldsCore      `json:"-"`
	JobFieldsExtra     `json:"-"`
}

// GetId returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.Id, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetId() *string {
	return v.JobReferenceFields.Id
}

// GetName returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.Name, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetName() *string {
	return v.JobFieldsCore.Name
}

// GetRefName returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.RefName, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetRefName() *string {
	return v.JobFieldsCore.RefName
}

// GetStatus returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.Status, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetStatus() *CiJobStatus {
	return v.JobFieldsCore.Status
}

// GetCreatedAt returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.CreatedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetCreatedAt() time.Time {
	return v.JobFieldsCore.CreatedAt
}

// GetQueuedAt returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.QueuedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetQueuedAt() *time.Time {
	return v.JobFieldsCore.QueuedAt
}

// GetStartedAt returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.StartedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetStartedAt() *time.Time {
	return v.JobFieldsCore.StartedAt
}

// GetFinishedAt returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.FinishedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetFinishedAt() *time.Time {
	return v.JobFieldsCore.FinishedAt
}

// GetErasedAt returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.ErasedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetErasedAt() *time.Time {
	return v.JobFieldsCore.ErasedAt
}

// GetDuration returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.Duration, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetDuration() *int {
	return v.JobFieldsCore.Duration
}

// GetQueuedDuration returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.QueuedDuration, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetQueuedDuration() *float64 {
	return v.JobFieldsCore.QueuedDuration
}

// GetCoverage returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.Coverage, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetCoverage() *float64 {
	return v.JobFieldsCore.Coverage
}

// GetAllowFailure returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.AllowFailure, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetAllowFailure() bool {
	return v.JobFieldsCore.AllowFailure
}

// GetFailureMessage returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.FailureMessage, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetFailureMessage() *string {
	return v.JobFieldsCore.FailureMessage
}

// GetStage returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.Stage, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetStage() *JobFieldsExtraStageCiStage {
	return v.JobFieldsExtra.Stage
}

// GetTags returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.Tags, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetTags() []string {
	return v.JobFieldsExtra.Tags
}

// GetManualJob returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.ManualJob, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetManualJob() *bool {
	return v.JobFieldsExtra.ManualJob
}

// GetRetryable returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.Retryable, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetRetryable() bool {
	return v.JobFieldsExtra.Retryable
}

// GetRetried returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.Retried, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetRetried() *bool {
	return v.JobFieldsExtra.Retried
}

// GetKind returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.Kind, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetKind() CiJobKind {
	return v.JobFieldsExtra.Kind
}

// GetDownstreamPipeline returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.DownstreamPipeline, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetDownstreamPipeline() *JobFieldsExtraDownstreamPipeline {
	return v.JobFieldsExtra.DownstreamPipeline
}

// GetRunner returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob.Runner, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) GetRunner() *JobFieldsExtraRunnerCiRunner {
	return v.JobFieldsExtra.Runner
}

func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobReferenceFields)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.JobFieldsCore)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.JobFieldsExtra)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob struct {
	Id *string `json:"id"`

	Name *string `json:"name"`

	RefName *string `json:"refName"`

	Status *CiJobStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	QueuedAt *time.Time `json:"queuedAt"`

	StartedAt *time.Time `json:"startedAt"`

	FinishedAt *time.Time `json:"finishedAt"`

	ErasedAt *time.Time `json:"erasedAt"`

	Duration *int `json:"duration"`

	QueuedDuration *float64 `json:"queuedDuration"`

	Coverage *float64 `json:"coverage"`

	AllowFailure bool `json:"allowFailure"`

	FailureMessage *string `json:"failureMessage"`

	Stage *JobFieldsExtraStageCiStage `json:"stage"`

	Tags []string `json:"tags"`

	ManualJob *bool `json:"manualJob"`

	Retryable bool `json:"retryable"`

	Retried *bool `json:"retried"`

	Kind CiJobKind `json:"kind"`

	DownstreamPipeline *JobFieldsExtraDownstreamPipeline `json:"downstreamPipeline"`

	Runner *JobFieldsExtraRunnerCiRunner `json:"runner"`
}

func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob) __premarshalJSON() (*__premarshalgetProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob, error) {
	var retval __premarshalgetProjectPipelineJobsProjectPipelineJobsCiJobConnectionNodesCiJob

	retval.Id = v.JobReferenceFields.Id
	retval.Name = v.JobFieldsCore.Name
	retval.RefName = v.JobFieldsCore.RefName
	retval.Status = v.JobFieldsCore.Status
	retval.CreatedAt = v.JobFieldsCore.CreatedAt
	retval.QueuedAt = v.JobFieldsCore.QueuedAt
	retval.StartedAt = v.JobFieldsCore.StartedAt
	retval.FinishedAt = v.JobFieldsCore.FinishedAt
	retval.ErasedAt = v.JobFieldsCore.ErasedAt
	retval.Duration = v.JobFieldsCore.Duration
	retval.QueuedDuration = v.JobFieldsCore.QueuedDuration
	retval.Coverage = v.JobFieldsCore.Coverage
	retval.AllowFailure = v.JobFieldsCore.AllowFailure
	retval.FailureMessage = v.JobFieldsCore.FailureMessage
	retval.Stage = v.JobFieldsExtra.Stage
	retval.Tags = v.JobFieldsExtra.Tags
	retval.ManualJob = v.JobFieldsExtra.ManualJob
	retval.Retryable = v.JobFieldsExtra.Retryable
	retval.Retried = v.JobFieldsExtra.Retried
	retval.Kind = v.JobFieldsExtra.Kind
	retval.DownstreamPipeline = v.JobFieldsExtra.DownstreamPipeline
	retval.Runner = v.JobFieldsExtra.Runner
	return &retval, nil
}

// getProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo, error) {
	var retval __premarshalgetProjectPipelineJobsProjectPipelineJobsCiJobConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectPipelineJobsResponse is returned by getProjectPipelineJobs on success.
type getProjectPipelineJobsResponse struct {
	// Find a project.
	Project *getProjectPipelineJobsProject `json:"project"`
}

// GetProject returns getProjectPipelineJobsResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectPipelineJobsResponse) GetProject() *getProjectPipelineJobsProject {
	return v.Project
}

// getProjectPipelinesJobsProject includes the requested fields of the GraphQL type Project.
type getProjectPipelinesJobsProject struct {
	ProjectReferenceFields `json:"-"`
	// Build pipelines of the project.
	Pipelines *getProjectPipelinesJobsProjectPipelinesPipelineConnection `json:"pipelines"`
}

// GetPipelines returns getProjectPipelinesJobsProject.Pipelines, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProject) GetPipelines() *getProjectPipelinesJobsProjectPipelinesPipelineConnection {
	return v.Pipelines
}

// GetId returns getProjectPipelinesJobsProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProject) GetId() string { return v.ProjectReferenceFields.Id }

// GetFullPath returns getProjectPipelinesJobsProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *getProjectPipelinesJobsProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesJobsProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesJobsProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesJobsProject struct {
	Pipelines *getProjectPipelinesJobsProjectPipelinesPipelineConnection `json:"pipelines"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectPipelinesJobsProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesJobsProject) __premarshalJSON() (*__premarshalgetProjectPipelinesJobsProject, error) {
	var retval __premarshalgetProjectPipelinesJobsProject

	retval.Pipelines = v.Pipelines
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// getProjectPipelinesJobsProjectPipelinesPipelineConnection includes the requested fields of the GraphQL type PipelineConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Pipeline.
type getProjectPipelinesJobsProjectPipelinesPipelineConnection struct {
	// A list of nodes.
	Nodes []*getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectPipelinesJobsProjectPipelinesPipelineConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnection) GetNodes() []*getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline {
	return v.Nodes
}

// GetPageInfo returns getProjectPipelinesJobsProjectPipelinesPipelineConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnection) GetPageInfo() getProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo {
	return v.PageInfo
}

// getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline includes the requested fields of the GraphQL type Pipeline.
type getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline struct {
	PipelineReferenceFields `json:"-"`
	// Jobs belonging to the pipeline.
	Jobs *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection `json:"jobs"`
}

// GetJobs returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline.Jobs, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline) GetJobs() *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection {
	return v.Jobs
}

// GetId returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline.Id, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline) GetId() string {
	return v.PipelineReferenceFields.Id
}

// GetIid returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline.Iid, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline) GetIid() string {
	return v.PipelineReferenceFields.Iid
}

func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PipelineReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline struct {
	Jobs *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection `json:"jobs"`

	Id string `json:"id"`

	Iid string `json:"iid"`
}

func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline) __premarshalJSON() (*__premarshalgetProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline, error) {
	var retval __premarshalgetProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipeline

	retval.Jobs = v.Jobs
	retval.Id = v.PipelineReferenceFields.Id
	retval.Iid = v.PipelineReferenceFields.Iid
	return &retval, nil
}

// getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection includes the requested fields of the GraphQL type CiJobConnection.
// The GraphQL type's documentation follows.
//
// The connection type for CiJob.
type getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection struct {
	// A list of nodes.
	Nodes []*getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection) GetNodes() []*getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob {
	return v.Nodes
}

// GetPageInfo returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection) GetPageInfo() getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo {
	return v.PageInfo
}

// getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob includes the requested fields of the GraphQL type CiJob.
type getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob struct {
	JobReferenceFields `json:"-"`
	JobFieldsCore      `json:"-"`
	JobFieldsExtra     `json:"-"`
}

// GetId returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Id, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetId() *string {
	return v.JobReferenceFields.Id
}

// GetName returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Name, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetName() *string {
	return v.JobFieldsCore.Name
}

// GetRefName returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.RefName, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetRefName() *string {
	return v.JobFieldsCore.RefName
}

// GetStatus returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Status, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetStatus() *CiJobStatus {
	return v.JobFieldsCore.Status
}

// GetCreatedAt returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.CreatedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetCreatedAt() time.Time {
	return v.JobFieldsCore.CreatedAt
}

// GetQueuedAt returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.QueuedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetQueuedAt() *time.Time {
	return v.JobFieldsCore.QueuedAt
}

// GetStartedAt returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.StartedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetStartedAt() *time.Time {
	return v.JobFieldsCore.StartedAt
}

// GetFinishedAt returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.FinishedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetFinishedAt() *time.Time {
	return v.JobFieldsCore.FinishedAt
}

// GetErasedAt returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.ErasedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetErasedAt() *time.Time {
	return v.JobFieldsCore.ErasedAt
}

// GetDuration returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Duration, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetDuration() *int {
	return v.JobFieldsCore.Duration
}

// GetQueuedDuration returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.QueuedDuration, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetQueuedDuration() *float64 {
	return v.JobFieldsCore.QueuedDuration
}

// GetCoverage returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Coverage, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetCoverage() *float64 {
	return v.JobFieldsCore.Coverage
}

// GetAllowFailure returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.AllowFailure, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetAllowFailure() bool {
	return v.JobFieldsCore.AllowFailure
}

// GetFailureMessage returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.FailureMessage, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetFailureMessage() *string {
	return v.JobFieldsCore.FailureMessage
}

// GetStage returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Stage, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetStage() *JobFieldsExtraStageCiStage {
	return v.JobFieldsExtra.Stage
}

// GetTags returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Tags, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetTags() []string {
	return v.JobFieldsExtra.Tags
}

// GetManualJob returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.ManualJob, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetManualJob() *bool {
	return v.JobFieldsExtra.ManualJob
}

// GetRetryable returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Retryable, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetRetryable() bool {
	return v.JobFieldsExtra.Retryable
}

// GetRetried returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Retried, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetRetried() *bool {
	return v.JobFieldsExtra.Retried
}

// GetKind returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Kind, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetKind() CiJobKind {
	return v.JobFieldsExtra.Kind
}

// GetDownstreamPipeline returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.DownstreamPipeline, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetDownstreamPipeline() *JobFieldsExtraDownstreamPipeline {
	return v.JobFieldsExtra.DownstreamPipeline
}

// GetRunner returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Runner, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetRunner() *JobFieldsExtraRunnerCiRunner {
	return v.JobFieldsExtra.Runner
}

func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobReferenceFields)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.JobFieldsCore)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.JobFieldsExtra)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob struct {
	Id *string `json:"id"`

	Name *string `json:"name"`

	RefName *string `json:"refName"`

	Status *CiJobStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	QueuedAt *time.Time `json:"queuedAt"`

	StartedAt *time.Time `json:"startedAt"`

	FinishedAt *time.Time `json:"finishedAt"`

	ErasedAt *time.Time `json:"erasedAt"`

	Duration *int `json:"duration"`

	QueuedDuration *float64 `json:"queuedDuration"`

	Coverage *float64 `json:"coverage"`

	AllowFailure bool `json:"allowFailure"`

	FailureMessage *string `json:"failureMessage"`

	Stage *JobFieldsExtraStageCiStage `json:"stage"`

	Tags []string `json:"tags"`

	ManualJob *bool `json:"manualJob"`

	Retryable bool `json:"retryable"`

	Retried *bool `json:"retried"`

	Kind CiJobKind `json:"kind"`

	DownstreamPipeline *JobFieldsExtraDownstreamPipeline `json:"downstreamPipeline"`

	Runner *JobFieldsExtraRunnerCiRunner `json:"runner"`
}

func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) __premarshalJSON() (*__premarshalgetProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob, error) {
	var retval __premarshalgetProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob

	retval.Id = v.JobReferenceFields.Id
	retval.Name = v.JobFieldsCore.Name
	retval.RefName = v.JobFieldsCore.RefName
	retval.Status = v.JobFieldsCore.Status
	retval.CreatedAt = v.JobFieldsCore.CreatedAt
	retval.QueuedAt = v.JobFieldsCore.QueuedAt
	retval.StartedAt = v.JobFieldsCore.StartedAt
	retval.FinishedAt = v.JobFieldsCore.FinishedAt
	retval.ErasedAt = v.JobFieldsCore.ErasedAt
	retval.Duration = v.JobFieldsCore.Duration
	retval.QueuedDuration = v.JobFieldsCore.QueuedDuration
	retval.Coverage = v.JobFieldsCore.Coverage
	retval.AllowFailure = v.JobFieldsCore.AllowFailure
	retval.FailureMessage = v.JobFieldsCore.FailureMessage
	retval.Stage = v.JobFieldsExtra.Stage
	retval.Tags = v.JobFieldsExtra.Tags
	retval.ManualJob = v.JobFieldsExtra.ManualJob
	retval.Retryable = v.JobFieldsExtra.Retryable
	retval.Retried = v.JobFieldsExtra.Retried
	retval.Kind = v.JobFieldsExtra.Kind
	retval.DownstreamPipeline = v.JobFieldsExtra.DownstreamPipeline
	retval.Runner = v.JobFieldsExtra.Runner
	return &retval, nil
}

// getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo, error) {
	var retval __premarshalgetProjectPipelinesJobsProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo, error) {
	var retval __premarshalgetProjectPipelinesJobsProjectPipelinesPipelineConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectPipelinesJobsResponse is returned by getProjectPipelinesJobs on success.
type getProjectPipelinesJobsResponse struct {
	// Find a project.
	Project *getProjectPipelinesJobsProject `json:"project"`
}

// GetProject returns getProjectPipelinesJobsResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesJobsResponse) GetProject() *getProjectPipelinesJobsProject {
	return v.Project
}

// getProjectPipelinesProject includes the requested fields of the GraphQL type Project.
type getProjectPipelinesProject struct {
	ProjectReferenceFields `json:"-"`
	// Build pipelines of the project.
	Pipelines *getProjectPipelinesProjectPipelinesPipelineConnection `json:"pipelines"`
}

// GetPipelines returns getProjectPipelinesProject.Pipelines, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProject) GetPipelines() *getProjectPipelinesProjectPipelinesPipelineConnection {
	return v.Pipelines
}

// GetId returns getProjectPipelinesProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProject) GetId() string { return v.ProjectReferenceFields.Id }

// GetFullPath returns getProjectPipelinesProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProject) GetFullPath() string { return v.ProjectReferenceFields.FullPath }

func (v *getProjectPipelinesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesProject struct {
	Pipelines *getProjectPipelinesProjectPipelinesPipelineConnection `json:"pipelines"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectPipelinesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesProject) __premarshalJSON() (*__premarshalgetProjectPipelinesProject, error) {
	var retval __premarshalgetProjectPipelinesProject

	retval.Pipelines = v.Pipelines
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// getProjectPipelinesProjectPipelinesPipelineConnection includes the requested fields of the GraphQL type PipelineConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Pipeline.
type getProjectPipelinesProjectPipelinesPipelineConnection struct {
	// A list of nodes.
	Nodes []*getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectPipelinesProjectPipelinesPipelineConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectPipelinesProjectPipelinesPipelineConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnection) GetNodes() []*getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline {
	return v.Nodes
}

// GetPageInfo returns getProjectPipelinesProjectPipelinesPipelineConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnection) GetPageInfo() getProjectPipelinesProjectPipelinesPipelineConnectionPageInfo {
	return v.PageInfo
}

// getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline includes the requested fields of the GraphQL type Pipeline.
type getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline struct {
	PipelineReferenceFields `json:"-"`
	PipelineFieldsCore      `json:"-"`
}

// GetId returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.Id, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetId() string {
	return v.PipelineReferenceFields.Id
}

// GetIid returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.Iid, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetIid() string {
	return v.PipelineReferenceFields.Iid
}

// GetName returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.Name, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetName() *string {
	return v.PipelineFieldsCore.Name
}

// GetRef returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.Ref, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetRef() *string {
	return v.PipelineFieldsCore.Ref
}

// GetStatus returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.Status, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetStatus() PipelineStatusEnum {
	return v.PipelineFieldsCore.Status
}

// GetSource returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.Source, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetSource() *string {
	return v.PipelineFieldsCore.Source
}

// GetSha returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.Sha, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetSha() *string {
	return v.PipelineFieldsCore.Sha
}

// GetCommittedAt returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.CommittedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetCommittedAt() *time.Time {
	return v.PipelineFieldsCore.CommittedAt
}

// GetCreatedAt returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.CreatedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetCreatedAt() time.Time {
	return v.PipelineFieldsCore.CreatedAt
}

// GetUpdatedAt returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetUpdatedAt() time.Time {
	return v.PipelineFieldsCore.UpdatedAt
}

// GetStartedAt returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.StartedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetStartedAt() *time.Time {
	return v.PipelineFieldsCore.StartedAt
}

// GetFinishedAt returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.FinishedAt, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetFinishedAt() *time.Time {
	return v.PipelineFieldsCore.FinishedAt
}

// GetQueuedDuration returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.QueuedDuration, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetQueuedDuration() *float64 {
	return v.PipelineFieldsCore.QueuedDuration
}

// GetDuration returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.Duration, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetDuration() *int {
	return v.PipelineFieldsCore.Duration
}

// GetCoverage returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.Coverage, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetCoverage() *float64 {
	return v.PipelineFieldsCore.Coverage
}

// GetFailureReason returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.FailureReason, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetFailureReason() *string {
	return v.PipelineFieldsCore.FailureReason
}

// GetWarnings returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.Warnings, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetWarnings() bool {
	return v.PipelineFieldsCore.Warnings
}

// GetYamlErrors returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.YamlErrors, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetYamlErrors() bool {
	return v.PipelineFieldsCore.YamlErrors
}

// GetChild returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.Child, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetChild() bool {
	return v.PipelineFieldsCore.Child
}

// GetUpstream returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.Upstream, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetUpstream() *PipelineFieldsCoreUpstreamPipeline {
	return v.PipelineFieldsCore.Upstream
}

// GetMergeRequest returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.MergeRequest, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetMergeRequest() *PipelineFieldsCoreMergeRequest {
	return v.PipelineFieldsCore.MergeRequest
}

// GetUser returns getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline.User, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) GetUser() *PipelineFieldsCoreUserUserCore {
	return v.PipelineFieldsCore.User
}

func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PipelineReferenceFields)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.PipelineFieldsCore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline struct {
	Id string `json:"id"`

	Iid string `json:"iid"`

	Name *string `json:"name"`

	Ref *string `json:"ref"`

	Status PipelineStatusEnum `json:"status"`

	Source *string `json:"source"`

	Sha *string `json:"sha"`

	CommittedAt *time.Time `json:"committedAt"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	StartedAt *time.Time `json:"startedAt"`

	FinishedAt *time.Time `json:"finishedAt"`

	QueuedDuration *float64 `json:"queuedDuration"`

	Duration *int `json:"duration"`

	Coverage *float64 `json:"coverage"`

	FailureReason *string `json:"failureReason"`

	Warnings bool `json:"warnings"`

	YamlErrors bool `json:"yamlErrors"`

	Child bool `json:"child"`

	Upstream *PipelineFieldsCoreUpstreamPipeline `json:"upstream"`

	MergeRequest *PipelineFieldsCoreMergeRequest `json:"mergeRequest"`

	User *PipelineFieldsCoreUserUserCore `json:"user"`
}

func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline) __premarshalJSON() (*__premarshalgetProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline, error) {
	var retval __premarshalgetProjectPipelinesProjectPipelinesPipelineConnectionNodesPipeline

	retval.Id = v.PipelineReferenceFields.Id
	retval.Iid = v.PipelineReferenceFields.Iid
	retval.Name = v.PipelineFieldsCore.Name
	retval.Ref = v.PipelineFieldsCore.Ref
	retval.Status = v.PipelineFieldsCore.Status
	retval.Source = v.PipelineFieldsCore.Source
	retval.Sha = v.PipelineFieldsCore.Sha
	retval.CommittedAt = v.PipelineFieldsCore.CommittedAt
	retval.CreatedAt = v.PipelineFieldsCore.CreatedAt
	retval.UpdatedAt = v.PipelineFieldsCore.UpdatedAt
	retval.StartedAt = v.PipelineFieldsCore.StartedAt
	retval.FinishedAt = v.PipelineFieldsCore.FinishedAt
	retval.QueuedDuration = v.PipelineFieldsCore.QueuedDuration
	retval.Duration = v.PipelineFieldsCore.Duration
	retval.Coverage = v.PipelineFieldsCore.Coverage
	retval.FailureReason = v.PipelineFieldsCore.FailureReason
	retval.Warnings = v.PipelineFieldsCore.Warnings
	retval.YamlErrors = v.PipelineFieldsCore.YamlErrors
	retval.Child = v.PipelineFieldsCore.Child
	retval.Upstream = v.PipelineFieldsCore.Upstream
	retval.MergeRequest = v.PipelineFieldsCore.MergeRequest
	retval.User = v.PipelineFieldsCore.User
	return &retval, nil
}

// getProjectPipelinesProjectPipelinesPipelineConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectPipelinesProjectPipelinesPipelineConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectPipelinesProjectPipelinesPipelineConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectPipelinesProjectPipelinesPipelineConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesProjectPipelinesPipelineConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectPipelinesProjectPipelinesPipelineConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesProjectPipelinesPipelineConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesProjectPipelinesPipelineConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesProjectPipelinesPipelineConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectPipelinesProjectPipelinesPipelineConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesProjectPipelinesPipelineConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectPipelinesProjectPipelinesPipelineConnectionPageInfo, error) {
	var retval __premarshalgetProjectPipelinesProjectPipelinesPipelineConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectPipelinesResponse is returned by getProjectPipelines on success.
type getProjectPipelinesResponse struct {
	// Find a project.
	Project *getProjectPipelinesProject `json:"project"`
}

// GetProject returns getProjectPipelinesResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesResponse) GetProject() *getProjectPipelinesProject { return v.Project }

// getProjectPipelinesTestReportSummaryProject includes the requested fields of the GraphQL type Project.
type getProjectPipelinesTestReportSummaryProject struct {
	ProjectReferenceFields `json:"-"`
	// Build pipelines of the project.
	Pipelines *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnection `json:"pipelines"`
}

// GetPipelines returns getProjectPipelinesTestReportSummaryProject.Pipelines, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProject) GetPipelines() *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnection {
	return v.Pipelines
}

// GetId returns getProjectPipelinesTestReportSummaryProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProject) GetId() string {
	return v.ProjectReferenceFields.Id
}

// GetFullPath returns getProjectPipelinesTestReportSummaryProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *getProjectPipelinesTestReportSummaryProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesTestReportSummaryProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesTestReportSummaryProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesTestReportSummaryProject struct {
	Pipelines *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnection `json:"pipelines"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectPipelinesTestReportSummaryProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesTestReportSummaryProject) __premarshalJSON() (*__premarshalgetProjectPipelinesTestReportSummaryProject, error) {
	var retval __premarshalgetProjectPipelinesTestReportSummaryProject

	retval.Pipelines = v.Pipelines
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnection includes the requested fields of the GraphQL type PipelineConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Pipeline.
type getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnection struct {
	// A list of nodes.
	Nodes []*getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnection) GetNodes() []*getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline {
	return v.Nodes
}

// GetPageInfo returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnection) GetPageInfo() getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo {
	return v.PageInfo
}

// getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline includes the requested fields of the GraphQL type Pipeline.
type getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline struct {
	PipelineReferenceFields `json:"-"`
	// Summary of the test report generated by the pipeline.
	TestReportSummary getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary `json:"testReportSummary"`
}

// GetTestReportSummary returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline.TestReportSummary, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline) GetTestReportSummary() getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary {
	return v.TestReportSummary
}

// GetId returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline.Id, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline) GetId() string {
	return v.PipelineReferenceFields.Id
}

// GetIid returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline.Iid, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline) GetIid() string {
	return v.PipelineReferenceFields.Iid
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PipelineReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline struct {
	TestReportSummary getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary `json:"testReportSummary"`

	Id string `json:"id"`

	Iid string `json:"iid"`
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline) __premarshalJSON() (*__premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline, error) {
	var retval __premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipeline

	retval.TestReportSummary = v.TestReportSummary
	retval.Id = v.PipelineReferenceFields.Id
	retval.Iid = v.PipelineReferenceFields.Iid
	return &retval, nil
}

// getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary includes the requested fields of the GraphQL type TestReportSummary.
// The GraphQL type's documentation follows.
//
// Test report for a pipeline
type getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary struct {
	// Total report statistics for a pipeline test report.
	Total getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal `json:"total"`
	// Test suites belonging to a pipeline test report.
	TestSuites getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection `json:"testSuites"`
}

// GetTotal returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary.Total, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary) GetTotal() getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal {
	return v.Total
}

// GetTestSuites returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary.TestSuites, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary) GetTestSuites() getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection {
	return v.TestSuites
}

// getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection includes the requested fields of the GraphQL type TestSuiteSummaryConnection.
// The GraphQL type's documentation follows.
//
// The connection type for TestSuiteSummary.
type getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection struct {
	// A list of nodes.
	Nodes []*getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection) GetNodes() []*getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary {
	return v.Nodes
}

// GetPageInfo returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection) GetPageInfo() getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo {
	return v.PageInfo
}

// getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary includes the requested fields of the GraphQL type TestSuiteSummary.
// The GraphQL type's documentation follows.
//
// Test suite summary in a pipeline test report.
type getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary struct {
	TestSuiteSummaryFields `json:"-"`
}

// GetName returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.Name, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetName() *string {
	return v.TestSuiteSummaryFields.Name
}

// GetBuildIds returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.BuildIds, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetBuildIds() []string {
	return v.TestSuiteSummaryFields.BuildIds
}

// GetErrorCount returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.ErrorCount, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetErrorCount() *int {
	return v.TestSuiteSummaryFields.ErrorCount
}

// GetFailedCount returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.FailedCount, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetFailedCount() *int {
	return v.TestSuiteSummaryFields.FailedCount
}

// GetSkippedCount returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.SkippedCount, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetSkippedCount() *int {
	return v.TestSuiteSummaryFields.SkippedCount
}

// GetSuccessCount returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.SuccessCount, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetSuccessCount() *int {
	return v.TestSuiteSummaryFields.SuccessCount
}

// GetSuiteError returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.SuiteError, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetSuiteError() *string {
	return v.TestSuiteSummaryFields.SuiteError
}

// GetTotalCount returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.TotalCount, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetTotalCount() *int {
	return v.TestSuiteSummaryFields.TotalCount
}

// GetTotalTime returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.TotalTime, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetTotalTime() *float64 {
	return v.TestSuiteSummaryFields.TotalTime
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TestSuiteSummaryFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary struct {
	Name *string `json:"name"`

	BuildIds []string `json:"buildIds"`

	ErrorCount *int `json:"errorCount"`

	FailedCount *int `json:"failedCount"`

	SkippedCount *int `json:"skippedCount"`

	SuccessCount *int `json:"successCount"`

	SuiteError *string `json:"suiteError"`

	TotalCount *int `json:"totalCount"`

	TotalTime *float64 `json:"totalTime"`
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) __premarshalJSON() (*__premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary, error) {
	var retval __premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary

	retval.Name = v.TestSuiteSummaryFields.Name
	retval.BuildIds = v.TestSuiteSummaryFields.BuildIds
	retval.ErrorCount = v.TestSuiteSummaryFields.ErrorCount
	retval.FailedCount = v.TestSuiteSummaryFields.FailedCount
	retval.SkippedCount = v.TestSuiteSummaryFields.SkippedCount
	retval.SuccessCount = v.TestSuiteSummaryFields.SuccessCount
	retval.SuiteError = v.TestSuiteSummaryFields.SuiteError
	retval.TotalCount = v.TestSuiteSummaryFields.TotalCount
	retval.TotalTime = v.TestSuiteSummaryFields.TotalTime
	return &retval, nil
}

// getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo, error) {
	var retval __premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal includes the requested fields of the GraphQL type TestReportTotal.
// The GraphQL type's documentation follows.
//
// Total test report statistics.
type getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal struct {
	TestReportSummaryFields `json:"-"`
}

// GetCount returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal.Count, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) GetCount() *int {
	return v.TestReportSummaryFields.Count
}

// GetError returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal.Error, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) GetError() *int {
	return v.TestReportSummaryFields.Error
}

// GetFailed returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal.Failed, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) GetFailed() *int {
	return v.TestReportSummaryFields.Failed
}

// GetSkipped returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal.Skipped, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) GetSkipped() *int {
	return v.TestReportSummaryFields.Skipped
}

// GetSuccess returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal.Success, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) GetSuccess() *int {
	return v.TestReportSummaryFields.Success
}

// GetTime returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal.Time, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) GetTime() *float64 {
	return v.TestReportSummaryFields.Time
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TestReportSummaryFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal struct {
	Count *int `json:"count"`

	Error *int `json:"error"`

	Failed *int `json:"failed"`

	Skipped *int `json:"skipped"`

	Success *int `json:"success"`

	Time *float64 `json:"time"`
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) __premarshalJSON() (*__premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal, error) {
	var retval __premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal

	retval.Count = v.TestReportSummaryFields.Count
	retval.Error = v.TestReportSummaryFields.Error
	retval.Failed = v.TestReportSummaryFields.Failed
	retval.Skipped = v.TestReportSummaryFields.Skipped
	retval.Success = v.TestReportSummaryFields.Success
	retval.Time = v.TestReportSummaryFields.Time
	return &retval, nil
}

// getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo, error) {
	var retval __premarshalgetProjectPipelinesTestReportSummaryProjectPipelinesPipelineConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectPipelinesTestReportSummaryResponse is returned by getProjectPipelinesTestReportSummary on success.
type getProjectPipelinesTestReportSummaryResponse struct {
	// Find a project.
	Project *getProjectPipelinesTestReportSummaryProject `json:"project"`
}

// GetProject returns getProjectPipelinesTestReportSummaryResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectPipelinesTestReportSummaryResponse) GetProject() *getProjectPipelinesTestReportSummaryProject {
	return v.Project
}

// getProjectsMergeRequestNotesProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Project.
type getProjectsMergeRequestNotesProjectsProjectConnection struct {
	// A list of nodes.
	Nodes []*getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsMergeRequestNotesProjectsProjectConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsMergeRequestNotesProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnection) GetNodes() []*getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// GetPageInfo returns getProjectsMergeRequestNotesProjectsProjectConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnection) GetPageInfo() getProjectsMergeRequestNotesProjectsProjectConnectionPageInfo {
	return v.PageInfo
}

// getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject struct {
	ProjectReferenceFields `json:"-"`
	// Merge requests of the project.
	MergeRequests *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection `json:"mergeRequests"`
}

// GetMergeRequests returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject.MergeRequests, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject) GetMergeRequests() *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection {
	return v.MergeRequests
}

// GetId returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject) GetId() string {
	return v.ProjectReferenceFields.Id
}

// GetFullPath returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProject struct {
	MergeRequests *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection `json:"mergeRequests"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProject

	retval.MergeRequests = v.MergeRequests
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection includes the requested fields of the GraphQL type MergeRequestConnection.
// The GraphQL type's documentation follows.
//
// The connection type for MergeRequest.
type getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection struct {
	// A list of nodes.
	Nodes []*getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection) GetNodes() []*getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest {
	return v.Nodes
}

// GetPageInfo returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection) GetPageInfo() getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo {
	return v.PageInfo
}

// getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest includes the requested fields of the GraphQL type MergeRequest.
type getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest struct {
	MergeRequestReferenceFields `json:"-"`
	// All notes on this noteable.
	Notes getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection `json:"notes"`
}

// GetNotes returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Notes, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetNotes() getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection {
	return v.Notes
}

// GetId returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Id, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetId() string {
	return v.MergeRequestReferenceFields.Id
}

// GetIid returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Iid, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetIid() string {
	return v.MergeRequestReferenceFields.Iid
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MergeRequestReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest struct {
	Notes getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection `json:"notes"`

	Id string `json:"id"`

	Iid string `json:"iid"`
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) __premarshalJSON() (*__premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest, error) {
	var retval __premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest

	retval.Notes = v.Notes
	retval.Id = v.MergeRequestReferenceFields.Id
	retval.Iid = v.MergeRequestReferenceFields.Iid
	return &retval, nil
}

// getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection includes the requested fields of the GraphQL type NoteConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Note.
type getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection struct {
	// A list of nodes.
	Nodes []*getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection) GetNodes() []*getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote {
	return v.Nodes
}

// GetPageInfo returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnection) GetPageInfo() getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo {
	return v.PageInfo
}

// getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote includes the requested fields of the GraphQL type Note.
type getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote struct {
	MergeRequestNotesFieldsCore `json:"-"`
}

// GetId returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.Id, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetId() string {
	return v.MergeRequestNotesFieldsCore.Id
}

// GetCreatedAt returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.CreatedAt, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetCreatedAt() time.Time {
	return v.MergeRequestNotesFieldsCore.CreatedAt
}

// GetUpdatedAt returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetUpdatedAt() time.Time {
	return v.MergeRequestNotesFieldsCore.UpdatedAt
}

// GetAuthor returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.Author, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetAuthor() *MergeRequestNotesFieldsCoreAuthorUserCore {
	return v.MergeRequestNotesFieldsCore.Author
}

// GetBody returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.Body, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetBody() string {
	return v.MergeRequestNotesFieldsCore.Body
}

// GetInternal returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.Internal, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetInternal() *bool {
	return v.MergeRequestNotesFieldsCore.Internal
}

// GetSystem returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.System, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetSystem() bool {
	return v.MergeRequestNotesFieldsCore.System
}

// GetResolvable returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.Resolvable, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetResolvable() bool {
	return v.MergeRequestNotesFieldsCore.Resolvable
}

// GetResolved returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.Resolved, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetResolved() bool {
	return v.MergeRequestNotesFieldsCore.Resolved
}

// GetResolvedAt returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.ResolvedAt, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetResolvedAt() *time.Time {
	return v.MergeRequestNotesFieldsCore.ResolvedAt
}

// GetResolvedBy returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote.ResolvedBy, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) GetResolvedBy() *MergeRequestNotesFieldsCoreResolvedByUserCore {
	return v.MergeRequestNotesFieldsCore.ResolvedBy
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MergeRequestNotesFieldsCore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote struct {
	Id string `json:"id"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	Author *MergeRequestNotesFieldsCoreAuthorUserCore `json:"author"`

	Body string `json:"body"`

	Internal *bool `json:"internal"`

	System bool `json:"system"`

	Resolvable bool `json:"resolvable"`

	Resolved bool `json:"resolved"`

	ResolvedAt *time.Time `json:"resolvedAt"`

	ResolvedBy *MergeRequestNotesFieldsCoreResolvedByUserCore `json:"resolvedBy"`
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote) __premarshalJSON() (*__premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote, error) {
	var retval __premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionNodesNote

	retval.Id = v.MergeRequestNotesFieldsCore.Id
	retval.CreatedAt = v.MergeRequestNotesFieldsCore.CreatedAt
	retval.UpdatedAt = v.MergeRequestNotesFieldsCore.UpdatedAt
	retval.Author = v.MergeRequestNotesFieldsCore.Author
	retval.Body = v.MergeRequestNotesFieldsCore.Body
	retval.Internal = v.MergeRequestNotesFieldsCore.Internal
	retval.System = v.MergeRequestNotesFieldsCore.System
	retval.Resolvable = v.MergeRequestNotesFieldsCore.Resolvable
	retval.Resolved = v.MergeRequestNotesFieldsCore.Resolved
	retval.ResolvedAt = v.MergeRequestNotesFieldsCore.ResolvedAt
	retval.ResolvedBy = v.MergeRequestNotesFieldsCore.ResolvedBy
	return &retval, nil
}

// getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo, error) {
	var retval __premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequestNotesNoteConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo, error) {
	var retval __premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsMergeRequestNotesProjectsProjectConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsMergeRequestNotesProjectsProjectConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsMergeRequestNotesProjectsProjectConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsMergeRequestNotesProjectsProjectConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesProjectsProjectConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsMergeRequestNotesProjectsProjectConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsMergeRequestNotesProjectsProjectConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsMergeRequestNotesProjectsProjectConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionPageInfo, error) {
	var retval __premarshalgetProjectsMergeRequestNotesProjectsProjectConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsMergeRequestNotesResponse is returned by getProjectsMergeRequestNotes on success.
type getProjectsMergeRequestNotesResponse struct {
	// Find projects visible to the current user.
	Projects *getProjectsMergeRequestNotesProjectsProjectConnection `json:"projects"`
}

// GetProjects returns getProjectsMergeRequestNotesResponse.Projects, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestNotesResponse) GetProjects() *getProjectsMergeRequestNotesProjectsProjectConnection {
	return v.Projects
}

// getProjectsMergeRequestsProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Project.
type getProjectsMergeRequestsProjectsProjectConnection struct {
	// A list of nodes.
	Nodes []*getProjectsMergeRequestsProjectsProjectConnectionNodesProject `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsMergeRequestsProjectsProjectConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsMergeRequestsProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnection) GetNodes() []*getProjectsMergeRequestsProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// GetPageInfo returns getProjectsMergeRequestsProjectsProjectConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnection) GetPageInfo() getProjectsMergeRequestsProjectsProjectConnectionPageInfo {
	return v.PageInfo
}

// getProjectsMergeRequestsProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type getProjectsMergeRequestsProjectsProjectConnectionNodesProject struct {
	ProjectReferenceFields `json:"-"`
	// Merge requests of the project.
	MergeRequests *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection `json:"mergeRequests"`
}

// GetMergeRequests returns getProjectsMergeRequestsProjectsProjectConnectionNodesProject.MergeRequests, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProject) GetMergeRequests() *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection {
	return v.MergeRequests
}

// GetId returns getProjectsMergeRequestsProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProject) GetId() string {
	return v.ProjectReferenceFields.Id
}

// GetFullPath returns getProjectsMergeRequestsProjectsProjectConnectionNodesProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsMergeRequestsProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsMergeRequestsProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsMergeRequestsProjectsProjectConnectionNodesProject struct {
	MergeRequests *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection `json:"mergeRequests"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalgetProjectsMergeRequestsProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalgetProjectsMergeRequestsProjectsProjectConnectionNodesProject

	retval.MergeRequests = v.MergeRequests
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection includes the requested fields of the GraphQL type MergeRequestConnection.
// The GraphQL type's documentation follows.
//
// The connection type for MergeRequest.
type getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection struct {
	// A list of nodes.
	Nodes []*getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection) GetNodes() []*getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest {
	return v.Nodes
}

// GetPageInfo returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection) GetPageInfo() getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo {
	return v.PageInfo
}

// getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest includes the requested fields of the GraphQL type MergeRequest.
type getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest struct {
	MergeRequestReferenceFields    `json:"-"`
	MergeRequestFieldsCore         `json:"-"`
	MergeRequestFieldsExtra        `json:"-"`
	MergeRequestFieldsParticipants `json:"-"`
}

// GetId returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Id, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetId() string {
	return v.MergeRequestReferenceFields.Id
}

// GetIid returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Iid, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetIid() string {
	return v.MergeRequestReferenceFields.Iid
}

// GetCreatedAt returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.CreatedAt, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetCreatedAt() time.Time {
	return v.MergeRequestFieldsCore.CreatedAt
}

// GetUpdatedAt returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetUpdatedAt() time.Time {
	return v.MergeRequestFieldsCore.UpdatedAt
}

// GetMergedAt returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.MergedAt, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetMergedAt() *time.Time {
	return v.MergeRequestFieldsCore.MergedAt
}

// GetClosedAt returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.ClosedAt, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetClosedAt() *time.Time {
	return v.MergeRequestFieldsCore.ClosedAt
}

// GetName returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Name, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetName() *string {
	return v.MergeRequestFieldsCore.Name
}

// GetTitle returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Title, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetTitle() string {
	return v.MergeRequestFieldsCore.Title
}

// GetLabels returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Labels, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetLabels() *MergeRequestFieldsCoreLabelsLabelConnection {
	return v.MergeRequestFieldsCore.Labels
}

// GetState returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.State, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetState() MergeRequestState {
	return v.MergeRequestFieldsCore.State
}

// GetDetailedMergeStatus returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.DetailedMergeStatus, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetDetailedMergeStatus() *DetailedMergeStatus {
	return v.MergeRequestFieldsCore.DetailedMergeStatus
}

// GetMergeError returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.MergeError, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetMergeError() *string {
	return v.MergeRequestFieldsCore.MergeError
}

// GetApproved returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Approved, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetApproved() bool {
	return v.MergeRequestFieldsCore.Approved
}

// GetConflicts returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Conflicts, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetConflicts() bool {
	return v.MergeRequestFieldsCore.Conflicts
}

// GetDraft returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Draft, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetDraft() bool {
	return v.MergeRequestFieldsCore.Draft
}

// GetMergeable returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Mergeable, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetMergeable() bool {
	return v.MergeRequestFieldsCore.Mergeable
}

// GetSourceProjectId returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.SourceProjectId, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetSourceProjectId() *int {
	return v.MergeRequestFieldsExtra.SourceProjectId
}

// GetTargetProjectId returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.TargetProjectId, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetTargetProjectId() int {
	return v.MergeRequestFieldsExtra.TargetProjectId
}

// GetSourceBranch returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.SourceBranch, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetSourceBranch() string {
	return v.MergeRequestFieldsExtra.SourceBranch
}

// GetTargetBranch returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.TargetBranch, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetTargetBranch() string {
	return v.MergeRequestFieldsExtra.TargetBranch
}

// GetMergeCommitSha returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.MergeCommitSha, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetMergeCommitSha() *string {
	return v.MergeRequestFieldsExtra.MergeCommitSha
}

// GetRebaseCommitSha returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.RebaseCommitSha, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetRebaseCommitSha() *string {
	return v.MergeRequestFieldsExtra.RebaseCommitSha
}

// GetDiffRefs returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.DiffRefs, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetDiffRefs() *MergeRequestFieldsExtraDiffRefs {
	return v.MergeRequestFieldsExtra.DiffRefs
}

// GetDiffStatsSummary returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.DiffStatsSummary, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetDiffStatsSummary() *MergeRequestFieldsExtraDiffStatsSummary {
	return v.MergeRequestFieldsExtra.DiffStatsSummary
}

// GetCommitCount returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.CommitCount, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetCommitCount() *int {
	return v.MergeRequestFieldsExtra.CommitCount
}

// GetUserNotesCount returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.UserNotesCount, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetUserNotesCount() *int {
	return v.MergeRequestFieldsExtra.UserNotesCount
}

// GetMilestone returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Milestone, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetMilestone() *MergeRequestFieldsExtraMilestone {
	return v.MergeRequestFieldsExtra.Milestone
}

// GetAuthor returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Author, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetAuthor() *MergeRequestFieldsParticipantsAuthorMergeRequestAuthor {
	return v.MergeRequestFieldsParticipants.Author
}

// GetAssignees returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Assignees, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetAssignees() *MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnection {
	return v.MergeRequestFieldsParticipants.Assignees
}

// GetReviewers returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.Reviewers, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetReviewers() *MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnection {
	return v.MergeRequestFieldsParticipants.Reviewers
}

// GetApprovedBy returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.ApprovedBy, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetApprovedBy() *MergeRequestFieldsParticipantsApprovedByUserCoreConnection {
	return v.MergeRequestFieldsParticipants.ApprovedBy
}

// GetMergeUser returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest.MergeUser, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) GetMergeUser() *MergeRequestFieldsParticipantsMergeUserUserCore {
	return v.MergeRequestFieldsParticipants.MergeUser
}

func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MergeRequestReferenceFields)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.MergeRequestFieldsCore)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.MergeRequestFieldsExtra)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.MergeRequestFieldsParticipants)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest struct {
	Id string `json:"id"`

	Iid string `json:"iid"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	MergedAt *time.Time `json:"mergedAt"`

	ClosedAt *time.Time `json:"closedAt"`

	Name *string `json:"name"`

	Title string `json:"title"`

	Labels *MergeRequestFieldsCoreLabelsLabelConnection `json:"labels"`

	State MergeRequestState `json:"state"`

	DetailedMergeStatus *DetailedMergeStatus `json:"detailedMergeStatus"`

	MergeError *string `json:"mergeError"`

	Approved bool `json:"approved"`

	Conflicts bool `json:"conflicts"`

	Draft bool `json:"draft"`

	Mergeable bool `json:"mergeable"`

	SourceProjectId *int `json:"sourceProjectId"`

	TargetProjectId int `json:"targetProjectId"`

	SourceBranch string `json:"sourceBranch"`

	TargetBranch string `json:"targetBranch"`

	MergeCommitSha *string `json:"mergeCommitSha"`

	RebaseCommitSha *string `json:"rebaseCommitSha"`

	DiffRefs *MergeRequestFieldsExtraDiffRefs `json:"diffRefs"`

	DiffStatsSummary *MergeRequestFieldsExtraDiffStatsSummary `json:"diffStatsSummary"`

	CommitCount *int `json:"commitCount"`

	UserNotesCount *int `json:"userNotesCount"`

	Milestone *MergeRequestFieldsExtraMilestone `json:"milestone"`

	Author *MergeRequestFieldsParticipantsAuthorMergeRequestAuthor `json:"author"`

	Assignees *MergeRequestFieldsParticipantsAssigneesMergeRequestAssigneeConnection `json:"assignees"`

	Reviewers *MergeRequestFieldsParticipantsReviewersMergeRequestReviewerConnection `json:"reviewers"`

	ApprovedBy *MergeRequestFieldsParticipantsApprovedByUserCoreConnection `json:"approvedBy"`

	MergeUser *MergeRequestFieldsParticipantsMergeUserUserCore `json:"mergeUser"`
}

func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest) __premarshalJSON() (*__premarshalgetProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest, error) {
	var retval __premarshalgetProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionNodesMergeRequest

	retval.Id = v.MergeRequestReferenceFields.Id
	retval.Iid = v.MergeRequestReferenceFields.Iid
	retval.CreatedAt = v.MergeRequestFieldsCore.CreatedAt
	retval.UpdatedAt = v.MergeRequestFieldsCore.UpdatedAt
	retval.MergedAt = v.MergeRequestFieldsCore.MergedAt
	retval.ClosedAt = v.MergeRequestFieldsCore.ClosedAt
	retval.Name = v.MergeRequestFieldsCore.Name
	retval.Title = v.MergeRequestFieldsCore.Title
	retval.Labels = v.MergeRequestFieldsCore.Labels
	retval.State = v.MergeRequestFieldsCore.State
	retval.DetailedMergeStatus = v.MergeRequestFieldsCore.DetailedMergeStatus
	retval.MergeError = v.MergeRequestFieldsCore.MergeError
	retval.Approved = v.MergeRequestFieldsCore.Approved
	retval.Conflicts = v.MergeRequestFieldsCore.Conflicts
	retval.Draft = v.MergeRequestFieldsCore.Draft
	retval.Mergeable = v.MergeRequestFieldsCore.Mergeable
	retval.SourceProjectId = v.MergeRequestFieldsExtra.SourceProjectId
	retval.TargetProjectId = v.MergeRequestFieldsExtra.TargetProjectId
	retval.SourceBranch = v.MergeRequestFieldsExtra.SourceBranch
	retval.TargetBranch = v.MergeRequestFieldsExtra.TargetBranch
	retval.MergeCommitSha = v.MergeRequestFieldsExtra.MergeCommitSha
	retval.RebaseCommitSha = v.MergeRequestFieldsExtra.RebaseCommitSha
	retval.DiffRefs = v.MergeRequestFieldsExtra.DiffRefs
	retval.DiffStatsSummary = v.MergeRequestFieldsExtra.DiffStatsSummary
	retval.CommitCount = v.MergeRequestFieldsExtra.CommitCount
	retval.UserNotesCount = v.MergeRequestFieldsExtra.UserNotesCount
	retval.Milestone = v.MergeRequestFieldsExtra.Milestone
	retval.Author = v.MergeRequestFieldsParticipants.Author
	retval.Assignees = v.MergeRequestFieldsParticipants.Assignees
	retval.Reviewers = v.MergeRequestFieldsParticipants.Reviewers
	retval.ApprovedBy = v.MergeRequestFieldsParticipants.ApprovedBy
	retval.MergeUser = v.MergeRequestFieldsParticipants.MergeUser
	return &retval, nil
}

// getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo, error) {
	var retval __premarshalgetProjectsMergeRequestsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsMergeRequestsProjectsProjectConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsMergeRequestsProjectsProjectConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsMergeRequestsProjectsProjectConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsMergeRequestsProjectsProjectConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsProjectsProjectConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsMergeRequestsProjectsProjectConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsMergeRequestsProjectsProjectConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsMergeRequestsProjectsProjectConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsMergeRequestsProjectsProjectConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsMergeRequestsProjectsProjectConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsMergeRequestsProjectsProjectConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsMergeRequestsProjectsProjectConnectionPageInfo, error) {
	var retval __premarshalgetProjectsMergeRequestsProjectsProjectConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsMergeRequestsResponse is returned by getProjectsMergeRequests on success.
type getProjectsMergeRequestsResponse struct {
	// Find projects visible to the current user.
	Projects *getProjectsMergeRequestsProjectsProjectConnection `json:"projects"`
}

// GetProjects returns getProjectsMergeRequestsResponse.Projects, and is useful for accessing the field via an interface.
func (v *getProjectsMergeRequestsResponse) GetProjects() *getProjectsMergeRequestsProjectsProjectConnection {
	return v.Projects
}

// getProjectsPipelinesJobsProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Project.
type getProjectsPipelinesJobsProjectsProjectConnection struct {
	// A list of nodes.
	Nodes []*getProjectsPipelinesJobsProjectsProjectConnectionNodesProject `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsPipelinesJobsProjectsProjectConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsPipelinesJobsProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnection) GetNodes() []*getProjectsPipelinesJobsProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// GetPageInfo returns getProjectsPipelinesJobsProjectsProjectConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnection) GetPageInfo() getProjectsPipelinesJobsProjectsProjectConnectionPageInfo {
	return v.PageInfo
}

// getProjectsPipelinesJobsProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type getProjectsPipelinesJobsProjectsProjectConnectionNodesProject struct {
	ProjectReferenceFields `json:"-"`
	// Build pipelines of the project.
	Pipelines *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection `json:"pipelines"`
}

// GetPipelines returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProject.Pipelines, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProject) GetPipelines() *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection {
	return v.Pipelines
}

// GetId returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProject) GetId() string {
	return v.ProjectReferenceFields.Id
}

// GetFullPath returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesJobsProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesJobsProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProject struct {
	Pipelines *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection `json:"pipelines"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProject

	retval.Pipelines = v.Pipelines
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection includes the requested fields of the GraphQL type PipelineConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Pipeline.
type getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection struct {
	// A list of nodes.
	Nodes []*getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection) GetNodes() []*getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline {
	return v.Nodes
}

// GetPageInfo returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection) GetPageInfo() getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo {
	return v.PageInfo
}

// getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline includes the requested fields of the GraphQL type Pipeline.
type getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline struct {
	PipelineReferenceFields `json:"-"`
	// Jobs belonging to the pipeline.
	Jobs *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection `json:"jobs"`
}

// GetJobs returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Jobs, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetJobs() *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection {
	return v.Jobs
}

// GetId returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Id, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetId() string {
	return v.PipelineReferenceFields.Id
}

// GetIid returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Iid, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetIid() string {
	return v.PipelineReferenceFields.Iid
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PipelineReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline struct {
	Jobs *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection `json:"jobs"`

	Id string `json:"id"`

	Iid string `json:"iid"`
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) __premarshalJSON() (*__premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline, error) {
	var retval __premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline

	retval.Jobs = v.Jobs
	retval.Id = v.PipelineReferenceFields.Id
	retval.Iid = v.PipelineReferenceFields.Iid
	return &retval, nil
}

// getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection includes the requested fields of the GraphQL type CiJobConnection.
// The GraphQL type's documentation follows.
//
// The connection type for CiJob.
type getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection struct {
	// A list of nodes.
	Nodes []*getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection) GetNodes() []*getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob {
	return v.Nodes
}

// GetPageInfo returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnection) GetPageInfo() getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo {
	return v.PageInfo
}

// getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob includes the requested fields of the GraphQL type CiJob.
type getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob struct {
	JobReferenceFields `json:"-"`
	JobFieldsCore      `json:"-"`
	JobFieldsExtra     `json:"-"`
}

// GetId returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Id, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetId() *string {
	return v.JobReferenceFields.Id
}

// GetName returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Name, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetName() *string {
	return v.JobFieldsCore.Name
}

// GetRefName returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.RefName, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetRefName() *string {
	return v.JobFieldsCore.RefName
}

// GetStatus returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Status, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetStatus() *CiJobStatus {
	return v.JobFieldsCore.Status
}

// GetCreatedAt returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.CreatedAt, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetCreatedAt() time.Time {
	return v.JobFieldsCore.CreatedAt
}

// GetQueuedAt returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.QueuedAt, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetQueuedAt() *time.Time {
	return v.JobFieldsCore.QueuedAt
}

// GetStartedAt returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.StartedAt, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetStartedAt() *time.Time {
	return v.JobFieldsCore.StartedAt
}

// GetFinishedAt returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.FinishedAt, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetFinishedAt() *time.Time {
	return v.JobFieldsCore.FinishedAt
}

// GetErasedAt returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.ErasedAt, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetErasedAt() *time.Time {
	return v.JobFieldsCore.ErasedAt
}

// GetDuration returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Duration, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetDuration() *int {
	return v.JobFieldsCore.Duration
}

// GetQueuedDuration returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.QueuedDuration, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetQueuedDuration() *float64 {
	return v.JobFieldsCore.QueuedDuration
}

// GetCoverage returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Coverage, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetCoverage() *float64 {
	return v.JobFieldsCore.Coverage
}

// GetAllowFailure returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.AllowFailure, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetAllowFailure() bool {
	return v.JobFieldsCore.AllowFailure
}

// GetFailureMessage returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.FailureMessage, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetFailureMessage() *string {
	return v.JobFieldsCore.FailureMessage
}

// GetStage returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Stage, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetStage() *JobFieldsExtraStageCiStage {
	return v.JobFieldsExtra.Stage
}

// GetTags returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Tags, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetTags() []string {
	return v.JobFieldsExtra.Tags
}

// GetManualJob returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.ManualJob, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetManualJob() *bool {
	return v.JobFieldsExtra.ManualJob
}

// GetRetryable returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Retryable, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetRetryable() bool {
	return v.JobFieldsExtra.Retryable
}

// GetRetried returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Retried, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetRetried() *bool {
	return v.JobFieldsExtra.Retried
}

// GetKind returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Kind, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetKind() CiJobKind {
	return v.JobFieldsExtra.Kind
}

// GetDownstreamPipeline returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.DownstreamPipeline, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetDownstreamPipeline() *JobFieldsExtraDownstreamPipeline {
	return v.JobFieldsExtra.DownstreamPipeline
}

// GetRunner returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob.Runner, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) GetRunner() *JobFieldsExtraRunnerCiRunner {
	return v.JobFieldsExtra.Runner
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.JobReferenceFields)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.JobFieldsCore)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.JobFieldsExtra)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob struct {
	Id *string `json:"id"`

	Name *string `json:"name"`

	RefName *string `json:"refName"`

	Status *CiJobStatus `json:"status"`

	CreatedAt time.Time `json:"createdAt"`

	QueuedAt *time.Time `json:"queuedAt"`

	StartedAt *time.Time `json:"startedAt"`

	FinishedAt *time.Time `json:"finishedAt"`

	ErasedAt *time.Time `json:"erasedAt"`

	Duration *int `json:"duration"`

	QueuedDuration *float64 `json:"queuedDuration"`

	Coverage *float64 `json:"coverage"`

	AllowFailure bool `json:"allowFailure"`

	FailureMessage *string `json:"failureMessage"`

	Stage *JobFieldsExtraStageCiStage `json:"stage"`

	Tags []string `json:"tags"`

	ManualJob *bool `json:"manualJob"`

	Retryable bool `json:"retryable"`

	Retried *bool `json:"retried"`

	Kind CiJobKind `json:"kind"`

	DownstreamPipeline *JobFieldsExtraDownstreamPipeline `json:"downstreamPipeline"`

	Runner *JobFieldsExtraRunnerCiRunner `json:"runner"`
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob) __premarshalJSON() (*__premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob, error) {
	var retval __premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionNodesCiJob

	retval.Id = v.JobReferenceFields.Id
	retval.Name = v.JobFieldsCore.Name
	retval.RefName = v.JobFieldsCore.RefName
	retval.Status = v.JobFieldsCore.Status
	retval.CreatedAt = v.JobFieldsCore.CreatedAt
	retval.QueuedAt = v.JobFieldsCore.QueuedAt
	retval.StartedAt = v.JobFieldsCore.StartedAt
	retval.FinishedAt = v.JobFieldsCore.FinishedAt
	retval.ErasedAt = v.JobFieldsCore.ErasedAt
	retval.Duration = v.JobFieldsCore.Duration
	retval.QueuedDuration = v.JobFieldsCore.QueuedDuration
	retval.Coverage = v.JobFieldsCore.Coverage
	retval.AllowFailure = v.JobFieldsCore.AllowFailure
	retval.FailureMessage = v.JobFieldsCore.FailureMessage
	retval.Stage = v.JobFieldsExtra.Stage
	retval.Tags = v.JobFieldsExtra.Tags
	retval.ManualJob = v.JobFieldsExtra.ManualJob
	retval.Retryable = v.JobFieldsExtra.Retryable
	retval.Retried = v.JobFieldsExtra.Retried
	retval.Kind = v.JobFieldsExtra.Kind
	retval.DownstreamPipeline = v.JobFieldsExtra.DownstreamPipeline
	retval.Runner = v.JobFieldsExtra.Runner
	return &retval, nil
}

// getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo, error) {
	var retval __premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineJobsCiJobConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo, error) {
	var retval __premarshalgetProjectsPipelinesJobsProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsPipelinesJobsProjectsProjectConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsPipelinesJobsProjectsProjectConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsPipelinesJobsProjectsProjectConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsPipelinesJobsProjectsProjectConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsProjectsProjectConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesJobsProjectsProjectConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesJobsProjectsProjectConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesJobsProjectsProjectConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesJobsProjectsProjectConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsPipelinesJobsProjectsProjectConnectionPageInfo, error) {
	var retval __premarshalgetProjectsPipelinesJobsProjectsProjectConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsPipelinesJobsResponse is returned by getProjectsPipelinesJobs on success.
type getProjectsPipelinesJobsResponse struct {
	// Find projects visible to the current user.
	Projects *getProjectsPipelinesJobsProjectsProjectConnection `json:"projects"`
}

// GetProjects returns getProjectsPipelinesJobsResponse.Projects, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesJobsResponse) GetProjects() *getProjectsPipelinesJobsProjectsProjectConnection {
	return v.Projects
}

// getProjectsPipelinesProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Project.
type getProjectsPipelinesProjectsProjectConnection struct {
	// A list of nodes.
	Nodes []*getProjectsPipelinesProjectsProjectConnectionNodesProject `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsPipelinesProjectsProjectConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsPipelinesProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnection) GetNodes() []*getProjectsPipelinesProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// GetPageInfo returns getProjectsPipelinesProjectsProjectConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnection) GetPageInfo() getProjectsPipelinesProjectsProjectConnectionPageInfo {
	return v.PageInfo
}

// getProjectsPipelinesProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type getProjectsPipelinesProjectsProjectConnectionNodesProject struct {
	ProjectReferenceFields `json:"-"`
	// Build pipelines of the project.
	Pipelines *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnection `json:"pipelines"`
}

// GetPipelines returns getProjectsPipelinesProjectsProjectConnectionNodesProject.Pipelines, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProject) GetPipelines() *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnection {
	return v.Pipelines
}

// GetId returns getProjectsPipelinesProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProject) GetId() string {
	return v.ProjectReferenceFields.Id
}

// GetFullPath returns getProjectsPipelinesProjectsProjectConnectionNodesProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *getProjectsPipelinesProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesProjectsProjectConnectionNodesProject struct {
	Pipelines *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnection `json:"pipelines"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectsPipelinesProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalgetProjectsPipelinesProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalgetProjectsPipelinesProjectsProjectConnectionNodesProject

	retval.Pipelines = v.Pipelines
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnection includes the requested fields of the GraphQL type PipelineConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Pipeline.
type getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnection struct {
	// A list of nodes.
	Nodes []*getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnection) GetNodes() []*getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline {
	return v.Nodes
}

// GetPageInfo returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnection) GetPageInfo() getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo {
	return v.PageInfo
}

// getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline includes the requested fields of the GraphQL type Pipeline.
type getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline struct {
	PipelineReferenceFields `json:"-"`
	PipelineFieldsCore      `json:"-"`
}

// GetId returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Id, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetId() string {
	return v.PipelineReferenceFields.Id
}

// GetIid returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Iid, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetIid() string {
	return v.PipelineReferenceFields.Iid
}

// GetName returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Name, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetName() *string {
	return v.PipelineFieldsCore.Name
}

// GetRef returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Ref, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetRef() *string {
	return v.PipelineFieldsCore.Ref
}

// GetStatus returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Status, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetStatus() PipelineStatusEnum {
	return v.PipelineFieldsCore.Status
}

// GetSource returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Source, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetSource() *string {
	return v.PipelineFieldsCore.Source
}

// GetSha returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Sha, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetSha() *string {
	return v.PipelineFieldsCore.Sha
}

// GetCommittedAt returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.CommittedAt, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetCommittedAt() *time.Time {
	return v.PipelineFieldsCore.CommittedAt
}

// GetCreatedAt returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.CreatedAt, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetCreatedAt() time.Time {
	return v.PipelineFieldsCore.CreatedAt
}

// GetUpdatedAt returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetUpdatedAt() time.Time {
	return v.PipelineFieldsCore.UpdatedAt
}

// GetStartedAt returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.StartedAt, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetStartedAt() *time.Time {
	return v.PipelineFieldsCore.StartedAt
}

// GetFinishedAt returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.FinishedAt, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetFinishedAt() *time.Time {
	return v.PipelineFieldsCore.FinishedAt
}

// GetQueuedDuration returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.QueuedDuration, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetQueuedDuration() *float64 {
	return v.PipelineFieldsCore.QueuedDuration
}

// GetDuration returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Duration, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetDuration() *int {
	return v.PipelineFieldsCore.Duration
}

// GetCoverage returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Coverage, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetCoverage() *float64 {
	return v.PipelineFieldsCore.Coverage
}

// GetFailureReason returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.FailureReason, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetFailureReason() *string {
	return v.PipelineFieldsCore.FailureReason
}

// GetWarnings returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Warnings, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetWarnings() bool {
	return v.PipelineFieldsCore.Warnings
}

// GetYamlErrors returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.YamlErrors, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetYamlErrors() bool {
	return v.PipelineFieldsCore.YamlErrors
}

// GetChild returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Child, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetChild() bool {
	return v.PipelineFieldsCore.Child
}

// GetUpstream returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Upstream, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetUpstream() *PipelineFieldsCoreUpstreamPipeline {
	return v.PipelineFieldsCore.Upstream
}

// GetMergeRequest returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.MergeRequest, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetMergeRequest() *PipelineFieldsCoreMergeRequest {
	return v.PipelineFieldsCore.MergeRequest
}

// GetUser returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.User, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetUser() *PipelineFieldsCoreUserUserCore {
	return v.PipelineFieldsCore.User
}

func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PipelineReferenceFields)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.PipelineFieldsCore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline struct {
	Id string `json:"id"`

	Iid string `json:"iid"`

	Name *string `json:"name"`

	Ref *string `json:"ref"`

	Status PipelineStatusEnum `json:"status"`

	Source *string `json:"source"`

	Sha *string `json:"sha"`

	CommittedAt *time.Time `json:"committedAt"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	StartedAt *time.Time `json:"startedAt"`

	FinishedAt *time.Time `json:"finishedAt"`

	QueuedDuration *float64 `json:"queuedDuration"`

	Duration *int `json:"duration"`

	Coverage *float64 `json:"coverage"`

	FailureReason *string `json:"failureReason"`

	Warnings bool `json:"warnings"`

	YamlErrors bool `json:"yamlErrors"`

	Child bool `json:"child"`

	Upstream *PipelineFieldsCoreUpstreamPipeline `json:"upstream"`

	MergeRequest *PipelineFieldsCoreMergeRequest `json:"mergeRequest"`

	User *PipelineFieldsCoreUserUserCore `json:"user"`
}

func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) __premarshalJSON() (*__premarshalgetProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline, error) {
	var retval __premarshalgetProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline

	retval.Id = v.PipelineReferenceFields.Id
	retval.Iid = v.PipelineReferenceFields.Iid
	retval.Name = v.PipelineFieldsCore.Name
	retval.Ref = v.PipelineFieldsCore.Ref
	retval.Status = v.PipelineFieldsCore.Status
	retval.Source = v.PipelineFieldsCore.Source
	retval.Sha = v.PipelineFieldsCore.Sha
	retval.CommittedAt = v.PipelineFieldsCore.CommittedAt
	retval.CreatedAt = v.PipelineFieldsCore.CreatedAt
	retval.UpdatedAt = v.PipelineFieldsCore.UpdatedAt
	retval.StartedAt = v.PipelineFieldsCore.StartedAt
	retval.FinishedAt = v.PipelineFieldsCore.FinishedAt
	retval.QueuedDuration = v.PipelineFieldsCore.QueuedDuration
	retval.Duration = v.PipelineFieldsCore.Duration
	retval.Coverage = v.PipelineFieldsCore.Coverage
	retval.FailureReason = v.PipelineFieldsCore.FailureReason
	retval.Warnings = v.PipelineFieldsCore.Warnings
	retval.YamlErrors = v.PipelineFieldsCore.YamlErrors
	retval.Child = v.PipelineFieldsCore.Child
	retval.Upstream = v.PipelineFieldsCore.Upstream
	retval.MergeRequest = v.PipelineFieldsCore.MergeRequest
	retval.User = v.PipelineFieldsCore.User
	return &retval, nil
}

// getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo, error) {
	var retval __premarshalgetProjectsPipelinesProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsPipelinesProjectsProjectConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsPipelinesProjectsProjectConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsPipelinesProjectsProjectConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsPipelinesProjectsProjectConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesProjectsProjectConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsPipelinesProjectsProjectConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesProjectsProjectConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesProjectsProjectConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesProjectsProjectConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsPipelinesProjectsProjectConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesProjectsProjectConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsPipelinesProjectsProjectConnectionPageInfo, error) {
	var retval __premarshalgetProjectsPipelinesProjectsProjectConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsPipelinesResponse is returned by getProjectsPipelines on success.
type getProjectsPipelinesResponse struct {
	// Find projects visible to the current user.
	Projects *getProjectsPipelinesProjectsProjectConnection `json:"projects"`
}

// GetProjects returns getProjectsPipelinesResponse.Projects, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesResponse) GetProjects() *getProjectsPipelinesProjectsProjectConnection {
	return v.Projects
}

// getProjectsPipelinesTestReportSummaryProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Project.
type getProjectsPipelinesTestReportSummaryProjectsProjectConnection struct {
	// A list of nodes.
	Nodes []*getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsPipelinesTestReportSummaryProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnection) GetNodes() []*getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// GetPageInfo returns getProjectsPipelinesTestReportSummaryProjectsProjectConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnection) GetPageInfo() getProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo {
	return v.PageInfo
}

// getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject struct {
	ProjectReferenceFields `json:"-"`
	// Build pipelines of the project.
	Pipelines *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnection `json:"pipelines"`
}

// GetPipelines returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject.Pipelines, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject) GetPipelines() *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnection {
	return v.Pipelines
}

// GetId returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject) GetId() string {
	return v.ProjectReferenceFields.Id
}

// GetFullPath returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject struct {
	Pipelines *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnection `json:"pipelines"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProject

	retval.Pipelines = v.Pipelines
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	return &retval, nil
}

// getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnection includes the requested fields of the GraphQL type PipelineConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Pipeline.
type getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnection struct {
	// A list of nodes.
	Nodes []*getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnection) GetNodes() []*getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline {
	return v.Nodes
}

// GetPageInfo returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnection) GetPageInfo() getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo {
	return v.PageInfo
}

// getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline includes the requested fields of the GraphQL type Pipeline.
type getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline struct {
	PipelineReferenceFields `json:"-"`
	// Summary of the test report generated by the pipeline.
	TestReportSummary getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary `json:"testReportSummary"`
}

// GetTestReportSummary returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.TestReportSummary, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetTestReportSummary() getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary {
	return v.TestReportSummary
}

// GetId returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Id, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetId() string {
	return v.PipelineReferenceFields.Id
}

// GetIid returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline.Iid, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) GetIid() string {
	return v.PipelineReferenceFields.Iid
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PipelineReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline struct {
	TestReportSummary getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary `json:"testReportSummary"`

	Id string `json:"id"`

	Iid string `json:"iid"`
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline) __premarshalJSON() (*__premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline, error) {
	var retval __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipeline

	retval.TestReportSummary = v.TestReportSummary
	retval.Id = v.PipelineReferenceFields.Id
	retval.Iid = v.PipelineReferenceFields.Iid
	return &retval, nil
}

// getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary includes the requested fields of the GraphQL type TestReportSummary.
// The GraphQL type's documentation follows.
//
// Test report for a pipeline
type getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary struct {
	// Total report statistics for a pipeline test report.
	Total getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal `json:"total"`
	// Test suites belonging to a pipeline test report.
	TestSuites getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection `json:"testSuites"`
}

// GetTotal returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary.Total, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary) GetTotal() getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal {
	return v.Total
}

// GetTestSuites returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary.TestSuites, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummary) GetTestSuites() getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection {
	return v.TestSuites
}

// getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection includes the requested fields of the GraphQL type TestSuiteSummaryConnection.
// The GraphQL type's documentation follows.
//
// The connection type for TestSuiteSummary.
type getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection struct {
	// A list of nodes.
	Nodes []*getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection) GetNodes() []*getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary {
	return v.Nodes
}

// GetPageInfo returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnection) GetPageInfo() getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo {
	return v.PageInfo
}

// getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary includes the requested fields of the GraphQL type TestSuiteSummary.
// The GraphQL type's documentation follows.
//
// Test suite summary in a pipeline test report.
type getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary struct {
	TestSuiteSummaryFields `json:"-"`
}

// GetName returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.Name, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetName() *string {
	return v.TestSuiteSummaryFields.Name
}

// GetBuildIds returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.BuildIds, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetBuildIds() []string {
	return v.TestSuiteSummaryFields.BuildIds
}

// GetErrorCount returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.ErrorCount, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetErrorCount() *int {
	return v.TestSuiteSummaryFields.ErrorCount
}

// GetFailedCount returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.FailedCount, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetFailedCount() *int {
	return v.TestSuiteSummaryFields.FailedCount
}

// GetSkippedCount returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.SkippedCount, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetSkippedCount() *int {
	return v.TestSuiteSummaryFields.SkippedCount
}

// GetSuccessCount returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.SuccessCount, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetSuccessCount() *int {
	return v.TestSuiteSummaryFields.SuccessCount
}

// GetSuiteError returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.SuiteError, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetSuiteError() *string {
	return v.TestSuiteSummaryFields.SuiteError
}

// GetTotalCount returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.TotalCount, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetTotalCount() *int {
	return v.TestSuiteSummaryFields.TotalCount
}

// GetTotalTime returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary.TotalTime, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) GetTotalTime() *float64 {
	return v.TestSuiteSummaryFields.TotalTime
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TestSuiteSummaryFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary struct {
	Name *string `json:"name"`

	BuildIds []string `json:"buildIds"`

	ErrorCount *int `json:"errorCount"`

	FailedCount *int `json:"failedCount"`

	SkippedCount *int `json:"skippedCount"`

	SuccessCount *int `json:"successCount"`

	SuiteError *string `json:"suiteError"`

	TotalCount *int `json:"totalCount"`

	TotalTime *float64 `json:"totalTime"`
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary) __premarshalJSON() (*__premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary, error) {
	var retval __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionNodesTestSuiteSummary

	retval.Name = v.TestSuiteSummaryFields.Name
	retval.BuildIds = v.TestSuiteSummaryFields.BuildIds
	retval.ErrorCount = v.TestSuiteSummaryFields.ErrorCount
	retval.FailedCount = v.TestSuiteSummaryFields.FailedCount
	retval.SkippedCount = v.TestSuiteSummaryFields.SkippedCount
	retval.SuccessCount = v.TestSuiteSummaryFields.SuccessCount
	retval.SuiteError = v.TestSuiteSummaryFields.SuiteError
	retval.TotalCount = v.TestSuiteSummaryFields.TotalCount
	retval.TotalTime = v.TestSuiteSummaryFields.TotalTime
	return &retval, nil
}

// getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo, error) {
	var retval __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTestSuitesTestSuiteSummaryConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal includes the requested fields of the GraphQL type TestReportTotal.
// The GraphQL type's documentation follows.
//
// Total test report statistics.
type getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal struct {
	TestReportSummaryFields `json:"-"`
}

// GetCount returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal.Count, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) GetCount() *int {
	return v.TestReportSummaryFields.Count
}

// GetError returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal.Error, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) GetError() *int {
	return v.TestReportSummaryFields.Error
}

// GetFailed returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal.Failed, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) GetFailed() *int {
	return v.TestReportSummaryFields.Failed
}

// GetSkipped returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal.Skipped, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) GetSkipped() *int {
	return v.TestReportSummaryFields.Skipped
}

// GetSuccess returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal.Success, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) GetSuccess() *int {
	return v.TestReportSummaryFields.Success
}

// GetTime returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal.Time, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) GetTime() *float64 {
	return v.TestReportSummaryFields.Time
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.TestReportSummaryFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal struct {
	Count *int `json:"count"`

	Error *int `json:"error"`

	Failed *int `json:"failed"`

	Skipped *int `json:"skipped"`

	Success *int `json:"success"`

	Time *float64 `json:"time"`
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal) __premarshalJSON() (*__premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal, error) {
	var retval __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionNodesPipelineTestReportSummaryTotalTestReportTotal

	retval.Count = v.TestReportSummaryFields.Count
	retval.Error = v.TestReportSummaryFields.Error
	retval.Failed = v.TestReportSummaryFields.Failed
	retval.Skipped = v.TestReportSummaryFields.Skipped
	retval.Success = v.TestReportSummaryFields.Success
	retval.Time = v.TestReportSummaryFields.Time
	return &retval, nil
}

// getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo, error) {
	var retval __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionNodesProjectPipelinesPipelineConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo, error) {
	var retval __premarshalgetProjectsPipelinesTestReportSummaryProjectsProjectConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsPipelinesTestReportSummaryResponse is returned by getProjectsPipelinesTestReportSummary on success.
type getProjectsPipelinesTestReportSummaryResponse struct {
	// Find projects visible to the current user.
	Projects *getProjectsPipelinesTestReportSummaryProjectsProjectConnection `json:"projects"`
}

// GetProjects returns getProjectsPipelinesTestReportSummaryResponse.Projects, and is useful for accessing the field via an interface.
func (v *getProjectsPipelinesTestReportSummaryResponse) GetProjects() *getProjectsPipelinesTestReportSummaryProjectsProjectConnection {
	return v.Projects
}

// getProjectsProjectsProjectConnection includes the requested fields of the GraphQL type ProjectConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Project.
type getProjectsProjectsProjectConnection struct {
	// A list of nodes.
	Nodes []*getProjectsProjectsProjectConnectionNodesProject `json:"nodes"`
	// Information to aid in pagination.
	PageInfo getProjectsProjectsProjectConnectionPageInfo `json:"pageInfo"`
}

// GetNodes returns getProjectsProjectsProjectConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnection) GetNodes() []*getProjectsProjectsProjectConnectionNodesProject {
	return v.Nodes
}

// GetPageInfo returns getProjectsProjectsProjectConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnection) GetPageInfo() getProjectsProjectsProjectConnectionPageInfo {
	return v.PageInfo
}

// getProjectsProjectsProjectConnectionNodesProject includes the requested fields of the GraphQL type Project.
type getProjectsProjectsProjectConnectionNodesProject struct {
	ProjectReferenceFields `json:"-"`
	// Namespace of the project.
	Namespace         *getProjectsProjectsProjectConnectionNodesProjectNamespace `json:"namespace"`
	ProjectFieldsCore `json:"-"`
	// Build pipelines of the project.
	Pipelines *getProjectsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection `json:"pipelines"`
	// Merge requests of the project.
	MergeRequests *getProjectsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection `json:"mergeRequests"`
}

// GetNamespace returns getProjectsProjectsProjectConnectionNodesProject.Namespace, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetNamespace() *getProjectsProjectsProjectConnectionNodesProjectNamespace {
	return v.Namespace
}

// GetPipelines returns getProjectsProjectsProjectConnectionNodesProject.Pipelines, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetPipelines() *getProjectsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection {
	return v.Pipelines
}

// GetMergeRequests returns getProjectsProjectsProjectConnectionNodesProject.MergeRequests, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetMergeRequests() *getProjectsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection {
	return v.MergeRequests
}

// GetId returns getProjectsProjectsProjectConnectionNodesProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetId() string {
	return v.ProjectReferenceFields.Id
}

// GetFullPath returns getProjectsProjectsProjectConnectionNodesProject.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetFullPath() string {
	return v.ProjectReferenceFields.FullPath
}

// GetName returns getProjectsProjectsProjectConnectionNodesProject.Name, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetName() string {
	return v.ProjectFieldsCore.Name
}

// GetNameWithNamespace returns getProjectsProjectsProjectConnectionNodesProject.NameWithNamespace, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetNameWithNamespace() string {
	return v.ProjectFieldsCore.NameWithNamespace
}

// GetPath returns getProjectsProjectsProjectConnectionNodesProject.Path, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetPath() string {
	return v.ProjectFieldsCore.Path
}

// GetDescription returns getProjectsProjectsProjectConnectionNodesProject.Description, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetDescription() *string {
	return v.ProjectFieldsCore.Description
}

// GetCreatedAt returns getProjectsProjectsProjectConnectionNodesProject.CreatedAt, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetCreatedAt() *time.Time {
	return v.ProjectFieldsCore.CreatedAt
}

// GetUpdatedAt returns getProjectsProjectsProjectConnectionNodesProject.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetUpdatedAt() *time.Time {
	return v.ProjectFieldsCore.UpdatedAt
}

// GetLastActivityAt returns getProjectsProjectsProjectConnectionNodesProject.LastActivityAt, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetLastActivityAt() *time.Time {
	return v.ProjectFieldsCore.LastActivityAt
}

// GetStatistics returns getProjectsProjectsProjectConnectionNodesProject.Statistics, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetStatistics() *ProjectFieldsCoreStatisticsProjectStatistics {
	return v.ProjectFieldsCore.Statistics
}

// GetStarCount returns getProjectsProjectsProjectConnectionNodesProject.StarCount, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetStarCount() int {
	return v.ProjectFieldsCore.StarCount
}

// GetForksCount returns getProjectsProjectsProjectConnectionNodesProject.ForksCount, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetForksCount() int {
	return v.ProjectFieldsCore.ForksCount
}

// GetArchived returns getProjectsProjectsProjectConnectionNodesProject.Archived, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetArchived() *bool {
	return v.ProjectFieldsCore.Archived
}

// GetVisibility returns getProjectsProjectsProjectConnectionNodesProject.Visibility, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProject) GetVisibility() *string {
	return v.ProjectFieldsCore.Visibility
}

func (v *getProjectsProjectsProjectConnectionNodesProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsProjectsProjectConnectionNodesProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsProjectsProjectConnectionNodesProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ProjectReferenceFields)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.ProjectFieldsCore)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsProjectsProjectConnectionNodesProject struct {
	Namespace *getProjectsProjectsProjectConnectionNodesProjectNamespace `json:"namespace"`

	Pipelines *getProjectsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection `json:"pipelines"`

	MergeRequests *getProjectsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection `json:"mergeRequests"`

	Id string `json:"id"`

	FullPath string `json:"fullPath"`

	Name string `json:"name"`

	NameWithNamespace string `json:"nameWithNamespace"`

	Path string `json:"path"`

	Description *string `json:"description"`

	CreatedAt *time.Time `json:"createdAt"`

	UpdatedAt *time.Time `json:"updatedAt"`

	LastActivityAt *time.Time `json:"lastActivityAt"`

	Statistics *ProjectFieldsCoreStatisticsProjectStatistics `json:"statistics"`

	StarCount int `json:"starCount"`

	ForksCount int `json:"forksCount"`

	Archived *bool `json:"archived"`

	Visibility *string `json:"visibility"`
}

func (v *getProjectsProjectsProjectConnectionNodesProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsProjectsProjectConnectionNodesProject) __premarshalJSON() (*__premarshalgetProjectsProjectsProjectConnectionNodesProject, error) {
	var retval __premarshalgetProjectsProjectsProjectConnectionNodesProject

	retval.Namespace = v.Namespace
	retval.Pipelines = v.Pipelines
	retval.MergeRequests = v.MergeRequests
	retval.Id = v.ProjectReferenceFields.Id
	retval.FullPath = v.ProjectReferenceFields.FullPath
	retval.Name = v.ProjectFieldsCore.Name
	retval.NameWithNamespace = v.ProjectFieldsCore.NameWithNamespace
	retval.Path = v.ProjectFieldsCore.Path
	retval.Description = v.ProjectFieldsCore.Description
	retval.CreatedAt = v.ProjectFieldsCore.CreatedAt
	retval.UpdatedAt = v.ProjectFieldsCore.UpdatedAt
	retval.LastActivityAt = v.ProjectFieldsCore.LastActivityAt
	retval.Statistics = v.ProjectFieldsCore.Statistics
	retval.StarCount = v.ProjectFieldsCore.StarCount
	retval.ForksCount = v.ProjectFieldsCore.ForksCount
	retval.Archived = v.ProjectFieldsCore.Archived
	retval.Visibility = v.ProjectFieldsCore.Visibility
	return &retval, nil
}

// getProjectsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection includes the requested fields of the GraphQL type MergeRequestConnection.
// The GraphQL type's documentation follows.
//
// The connection type for MergeRequest.
type getProjectsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection struct {
	// Total count of collection.
	Count int `json:"count"`
}

// GetCount returns getProjectsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection.Count, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProjectMergeRequestsMergeRequestConnection) GetCount() int {
	return v.Count
}

// getProjectsProjectsProjectConnectionNodesProjectNamespace includes the requested fields of the GraphQL type Namespace.
type getProjectsProjectsProjectConnectionNodesProjectNamespace struct {
	NamespaceReferenceFields `json:"-"`
}

// GetId returns getProjectsProjectsProjectConnectionNodesProjectNamespace.Id, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProjectNamespace) GetId() string {
	return v.NamespaceReferenceFields.Id
}

// GetFullPath returns getProjectsProjectsProjectConnectionNodesProjectNamespace.FullPath, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProjectNamespace) GetFullPath() string {
	return v.NamespaceReferenceFields.FullPath
}

func (v *getProjectsProjectsProjectConnectionNodesProjectNamespace) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsProjectsProjectConnectionNodesProjectNamespace
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsProjectsProjectConnectionNodesProjectNamespace = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NamespaceReferenceFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsProjectsProjectConnectionNodesProjectNamespace struct {
	Id string `json:"id"`

	FullPath string `json:"fullPath"`
}

func (v *getProjectsProjectsProjectConnectionNodesProjectNamespace) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsProjectsProjectConnectionNodesProjectNamespace) __premarshalJSON() (*__premarshalgetProjectsProjectsProjectConnectionNodesProjectNamespace, error) {
	var retval __premarshalgetProjectsProjectsProjectConnectionNodesProjectNamespace

	retval.Id = v.NamespaceReferenceFields.Id
	retval.FullPath = v.NamespaceReferenceFields.FullPath
	return &retval, nil
}

// getProjectsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection includes the requested fields of the GraphQL type PipelineConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Pipeline.
type getProjectsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection struct {
	// Total count of collection.
	Count int `json:"count"`
}

// GetCount returns getProjectsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection.Count, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionNodesProjectPipelinesPipelineConnection) GetCount() int {
	return v.Count
}

// getProjectsProjectsProjectConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type getProjectsProjectsProjectConnectionPageInfo struct {
	pageFields `json:"-"`
}

// GetHasNextPage returns getProjectsProjectsProjectConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionPageInfo) GetHasNextPage() bool {
	return v.pageFields.HasNextPage
}

// GetEndCursor returns getProjectsProjectsProjectConnectionPageInfo.EndCursor, and is useful for accessing the field via an interface.
func (v *getProjectsProjectsProjectConnectionPageInfo) GetEndCursor() *string {
	return v.pageFields.EndCursor
}

func (v *getProjectsProjectsProjectConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectsProjectsProjectConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectsProjectsProjectConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.pageFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectsProjectsProjectConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	EndCursor *string `json:"endCursor"`
}

func (v *getProjectsProjectsProjectConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectsProjectsProjectConnectionPageInfo) __premarshalJSON() (*__premarshalgetProjectsProjectsProjectConnectionPageInfo, error) {
	var retval __premarshalgetProjectsProjectsProjectConnectionPageInfo

	retval.HasNextPage = v.pageFields.HasNextPage
	retval.EndCursor = v.pageFields.EndCursor
	return &retval, nil
}

// getProjectsResponse is returned by getProjects on success.
type getProjectsResponse struct {
	// Find projects visible to the current user.
	Projects *getProjectsProjectsProjectConnection `json:"projects"`
}

// GetProjects returns getProjectsResponse.Projects, and is useful for accessing the field via an interface.
func (v *getProjectsResponse) GetProjects() *getProjectsProjectsProjectConnection { return v.Projects }

// pageFields includes the GraphQL fields of PageInfo requested by the fragment pageFields.
// The GraphQL type's documentation follows.
//
// Information about pagination in a connection.
type pageFields struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor"`
}

// GetHasNextPage returns pageFields.HasNextPage, and is useful for accessing the field via an interface.
func (v *pageFields) GetHasNextPage() bool { return v.HasNextPage }

// GetEndCursor returns pageFields.EndCursor, and is useful for accessing the field via an interface.
func (v *pageFields) GetEndCursor() *string { return v.EndCursor }

// The query or mutation executed by getProjectIdPipeline.
const getProjectIdPipeline_Operation = `
query getProjectIdPipeline ($projectId: ID!, $pipelineId: CiPipelineID!) {
	projects(ids: [$projectId]) {
		nodes {
			... ProjectReferenceFields
			pipeline(id: $pipelineId) {
				... PipelineReferenceFields
				... PipelineFieldsCore
			}
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment PipelineReferenceFields on Pipeline {
	id
	iid
}
fragment PipelineFieldsCore on Pipeline {
	name
	ref
	status
	source
	sha(format: LONG)
	committedAt
	createdAt
	updatedAt
	startedAt
	finishedAt
	queuedDuration
	duration
	coverage
	failureReason
	warnings
	yamlErrors
	child
	upstream {
		... PipelineReferenceFields
		project {
			... ProjectReferenceFields
		}
	}
	mergeRequest {
		... MergeRequestReferenceFields
		project {
			... ProjectReferenceFields
		}
	}
	user {
		... UserReferenceFields
	}
}
fragment MergeRequestReferenceFields on MergeRequest {
	id
	iid
}
fragment UserReferenceFields on User {
	id
	username
}
`

func getProjectIdPipeline(
	ctx_ context.Context,
	client_ graphql.Client,
	projectId string,
	pipelineId string,
) (*getProjectIdPipelineResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectIdPipeline",
		Query:  getProjectIdPipeline_Operation,
		Variables: &__getProjectIdPipelineInput{
			ProjectId:  projectId,
			PipelineId: pipelineId,
		},
	}
	var err_ error

	var data_ getProjectIdPipelineResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectMergeRequestNotes.
const getProjectMergeRequestNotes_Operation = `
query getProjectMergeRequestNotes ($projectPath: ID!, $mergeRequestIid: String!, $endCursor: String) {
	project(fullPath: $projectPath) {
		... ProjectReferenceFields
		mergeRequest(iid: $mergeRequestIid) {
			... MergeRequestReferenceFields
			notes(filter: ONLY_ACTIVITY, after: $endCursor) {
				nodes {
					... MergeRequestNotesFieldsCore
				}
				pageInfo {
					... pageFields
				}
			}
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment MergeRequestReferenceFields on MergeRequest {
	id
	iid
}
fragment MergeRequestNotesFieldsCore on Note {
	id
	createdAt
	updatedAt
	author {
		... UserReferenceFields
	}
	body
	internal
	system
	resolvable
	resolved
	resolvedAt
	resolvedBy {
		... UserReferenceFields
	}
}
fragment pageFields on PageInfo {
	hasNextPage
	endCursor
}
fragment UserReferenceFields on User {
	id
	username
}
`

func getProjectMergeRequestNotes(
	ctx_ context.Context,
	client_ graphql.Client,
	projectPath string,
	mergeRequestIid string,
	endCursor *string,
) (*getProjectMergeRequestNotesResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectMergeRequestNotes",
		Query:  getProjectMergeRequestNotes_Operation,
		Variables: &__getProjectMergeRequestNotesInput{
			ProjectPath:     projectPath,
			MergeRequestIid: mergeRequestIid,
			EndCursor:       endCursor,
		},
	}
	var err_ error

	var data_ getProjectMergeRequestNotesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectMergeRequests.
const getProjectMergeRequests_Operation = `
query getProjectMergeRequests ($projectPath: ID!, $updatedAfter: Time, $updatedBefore: Time, $endCursor: String, $_core: Boolean = false, $_extra: Boolean = false, $_participants: Boolean = false) {
	project(fullPath: $projectPath) {
		... ProjectReferenceFields
		mergeRequests(updatedAfter: $updatedAfter, updatedBefore: $updatedBefore, after: $endCursor) {
			nodes {
				... MergeRequestReferenceFields
				... MergeRequestFieldsCore @include(if: $_core)
				... MergeRequestFieldsExtra @include(if: $_extra)
				... MergeRequestFieldsParticipants @include(if: $_participants)
			}
			pageInfo {
				... pageFields
			}
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment MergeRequestReferenceFields on MergeRequest {
	id
	iid
}
fragment MergeRequestFieldsCore on MergeRequest {
	createdAt
	updatedAt
	mergedAt
	closedAt
	name
	title
	labels {
		nodes {
			title
		}
	}
	state
	detailedMergeStatus
	mergeError
	approved
	conflicts
	draft
	mergeable
}
fragment MergeRequestFieldsExtra on MergeRequest {
	sourceProjectId
	targetProjectId
	sourceBranch
	targetBranch
	mergeCommitSha
	rebaseCommitSha
	diffRefs {
		baseSha
		headSha
		startSha
	}
	diffStatsSummary {
		additions
		changes
		deletions
		fileCount
	}
	commitCount
	userNotesCount
	milestone {
		id
		iid
		project {
			id
			fullPath
		}
	}
}
fragment MergeRequestFieldsParticipants on MergeRequest {
	author {
		... UserReferenceFields
	}
	assignees {
		nodes {
			... UserReferenceFields
		}
	}
	reviewers {
		nodes {
			... UserReferenceFields
		}
	}
	approvedBy {
		nodes {
			... UserReferenceFields
		}
	}
	mergeUser {
		... UserReferenceFields
	}
}
fragment pageFields on PageInfo {
	hasNextPage
	endCursor
}
fragment UserReferenceFields on User {
	id
	username
}
`

func getProjectMergeRequests(
	ctx_ context.Context,
	client_ graphql.Client,
	projectPath string,
	updatedAfter *time.Time,
	updatedBefore *time.Time,
	endCursor *string,
	_core *bool,
	_extra *bool,
	_participants *bool,
) (*getProjectMergeRequestsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectMergeRequests",
		Query:  getProjectMergeRequests_Operation,
		Variables: &__getProjectMergeRequestsInput{
			ProjectPath:   projectPath,
			UpdatedAfter:  updatedAfter,
			UpdatedBefore: updatedBefore,
			EndCursor:     endCursor,
			Core:          _core,
			Extra:         _extra,
			Participants:  _participants,
		},
	}
	var err_ error

	var data_ getProjectMergeRequestsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectMergeRequestsNotes.
const getProjectMergeRequestsNotes_Operation = `
query getProjectMergeRequestsNotes ($projectPath: ID!, $updatedAfter: Time, $updatedBefore: Time, $endCursor: String) {
	project(fullPath: $projectPath) {
		... ProjectReferenceFields
		mergeRequests(updatedAfter: $updatedAfter, updatedBefore: $updatedBefore, after: $endCursor) {
			nodes {
				... MergeRequestReferenceFields
				notes(filter: ONLY_ACTIVITY) {
					nodes {
						... MergeRequestNotesFieldsCore
					}
					pageInfo {
						... pageFields
					}
				}
			}
			pageInfo {
				... pageFields
			}
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment MergeRequestReferenceFields on MergeRequest {
	id
	iid
}
fragment MergeRequestNotesFieldsCore on Note {
	id
	createdAt
	updatedAt
	author {
		... UserReferenceFields
	}
	body
	internal
	system
	resolvable
	resolved
	resolvedAt
	resolvedBy {
		... UserReferenceFields
	}
}
fragment pageFields on PageInfo {
	hasNextPage
	endCursor
}
fragment UserReferenceFields on User {
	id
	username
}
`

func getProjectMergeRequestsNotes(
	ctx_ context.Context,
	client_ graphql.Client,
	projectPath string,
	updatedAfter *time.Time,
	updatedBefore *time.Time,
	endCursor *string,
) (*getProjectMergeRequestsNotesResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectMergeRequestsNotes",
		Query:  getProjectMergeRequestsNotes_Operation,
		Variables: &__getProjectMergeRequestsNotesInput{
			ProjectPath:   projectPath,
			UpdatedAfter:  updatedAfter,
			UpdatedBefore: updatedBefore,
			EndCursor:     endCursor,
		},
	}
	var err_ error

	var data_ getProjectMergeRequestsNotesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectPipelineJobs.
const getProjectPipelineJobs_Operation = `
query getProjectPipelineJobs ($projectPath: ID!, $pipelineIid: ID!, $endCursor: String, $_core: Boolean!, $_extra: Boolean!) {
	project(fullPath: $projectPath) {
		... ProjectReferenceFields
		pipeline(iid: $pipelineIid) {
			... PipelineReferenceFields
			jobs(after: $endCursor) {
				nodes {
					... JobReferenceFields
					... JobFieldsCore @include(if: $_core)
					... JobFieldsExtra @include(if: $_extra)
				}
				pageInfo {
					... pageFields
				}
			}
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment PipelineReferenceFields on Pipeline {
	id
	iid
}
fragment JobReferenceFields on CiJob {
	id
}
fragment JobFieldsCore on CiJob {
	name
	refName
	status
	createdAt
	queuedAt
	startedAt
	finishedAt
	erasedAt
	duration
	queuedDuration
	coverage
	allowFailure
	failureMessage
}
fragment JobFieldsExtra on CiJob {
	stage {
		name
	}
	tags
	manualJob
	retryable
	retried
	kind
	downstreamPipeline {
		id
		iid
		project {
			id
			fullPath
		}
	}
	runner {
		id
	}
}
fragment pageFields on PageInfo {
	hasNextPage
	endCursor
}
`

func getProjectPipelineJobs(
	ctx_ context.Context,
	client_ graphql.Client,
	projectPath string,
	pipelineIid string,
	endCursor *string,
	_core bool,
	_extra bool,
) (*getProjectPipelineJobsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectPipelineJobs",
		Query:  getProjectPipelineJobs_Operation,
		Variables: &__getProjectPipelineJobsInput{
			ProjectPath: projectPath,
			PipelineIid: pipelineIid,
			EndCursor:   endCursor,
			Core:        _core,
			Extra:       _extra,
		},
	}
	var err_ error

	var data_ getProjectPipelineJobsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectPipelines.
const getProjectPipelines_Operation = `
query getProjectPipelines ($projectPath: ID!, $source: String, $updatedAfter: Time, $updatedBefore: Time, $endCursor: String) {
	project(fullPath: $projectPath) {
		... ProjectReferenceFields
		pipelines(scope: FINISHED, source: $source, updatedAfter: $updatedAfter, updatedBefore: $updatedBefore, after: $endCursor) {
			nodes {
				... PipelineReferenceFields
				... PipelineFieldsCore
			}
			pageInfo {
				... pageFields
			}
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment PipelineReferenceFields on Pipeline {
	id
	iid
}
fragment PipelineFieldsCore on Pipeline {
	name
	ref
	status
	source
	sha(format: LONG)
	committedAt
	createdAt
	updatedAt
	startedAt
	finishedAt
	queuedDuration
	duration
	coverage
	failureReason
	warnings
	yamlErrors
	child
	upstream {
		... PipelineReferenceFields
		project {
			... ProjectReferenceFields
		}
	}
	mergeRequest {
		... MergeRequestReferenceFields
		project {
			... ProjectReferenceFields
		}
	}
	user {
		... UserReferenceFields
	}
}
fragment pageFields on PageInfo {
	hasNextPage
	endCursor
}
fragment MergeRequestReferenceFields on MergeRequest {
	id
	iid
}
fragment UserReferenceFields on User {
	id
	username
}
`

func getProjectPipelines(
	ctx_ context.Context,
	client_ graphql.Client,
	projectPath string,
	source *string,
	updatedAfter *time.Time,
	updatedBefore *time.Time,
	endCursor *string,
) (*getProjectPipelinesResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectPipelines",
		Query:  getProjectPipelines_Operation,
		Variables: &__getProjectPipelinesInput{
			ProjectPath:   projectPath,
			Source:        source,
			UpdatedAfter:  updatedAfter,
			UpdatedBefore: updatedBefore,
			EndCursor:     endCursor,
		},
	}
	var err_ error

	var data_ getProjectPipelinesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectPipelinesJobs.
const getProjectPipelinesJobs_Operation = `
query getProjectPipelinesJobs ($projectPath: ID!, $source: String, $updatedAfter: Time, $updatedBefore: Time, $endCursor: String, $_core: Boolean!, $_extra: Boolean!) {
	project(fullPath: $projectPath) {
		... ProjectReferenceFields
		pipelines(scope: FINISHED, source: $source, updatedAfter: $updatedAfter, updatedBefore: $updatedBefore, after: $endCursor) {
			nodes {
				... PipelineReferenceFields
				jobs {
					nodes {
						... JobReferenceFields
						... JobFieldsCore @include(if: $_core)
						... JobFieldsExtra @include(if: $_extra)
					}
					pageInfo {
						... pageFields
					}
				}
			}
			pageInfo {
				... pageFields
			}
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment PipelineReferenceFields on Pipeline {
	id
	iid
}
fragment JobReferenceFields on CiJob {
	id
}
fragment JobFieldsCore on CiJob {
	name
	refName
	status
	createdAt
	queuedAt
	startedAt
	finishedAt
	erasedAt
	duration
	queuedDuration
	coverage
	allowFailure
	failureMessage
}
fragment JobFieldsExtra on CiJob {
	stage {
		name
	}
	tags
	manualJob
	retryable
	retried
	kind
	downstreamPipeline {
		id
		iid
		project {
			id
			fullPath
		}
	}
	runner {
		id
	}
}
fragment pageFields on PageInfo {
	hasNextPage
	endCursor
}
`

func getProjectPipelinesJobs(
	ctx_ context.Context,
	client_ graphql.Client,
	projectPath string,
	source *string,
	updatedAfter *time.Time,
	updatedBefore *time.Time,
	endCursor *string,
	_core bool,
	_extra bool,
) (*getProjectPipelinesJobsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectPipelinesJobs",
		Query:  getProjectPipelinesJobs_Operation,
		Variables: &__getProjectPipelinesJobsInput{
			ProjectPath:   projectPath,
			Source:        source,
			UpdatedAfter:  updatedAfter,
			UpdatedBefore: updatedBefore,
			EndCursor:     endCursor,
			Core:          _core,
			Extra:         _extra,
		},
	}
	var err_ error

	var data_ getProjectPipelinesJobsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectPipelinesTestReportSummary.
const getProjectPipelinesTestReportSummary_Operation = `
query getProjectPipelinesTestReportSummary ($projectPath: ID!, $updatedAfter: Time, $updatedBefore: Time, $source: String, $endCursor: String) {
	project(fullPath: $projectPath) {
		... ProjectReferenceFields
		pipelines(scope: FINISHED, source: $source, updatedAfter: $updatedAfter, updatedBefore: $updatedBefore, after: $endCursor) {
			nodes {
				... PipelineReferenceFields
				testReportSummary {
					total {
						... TestReportSummaryFields
					}
					testSuites {
						nodes {
							... TestSuiteSummaryFields
						}
						pageInfo {
							... pageFields
						}
					}
				}
			}
			pageInfo {
				... pageFields
			}
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment PipelineReferenceFields on Pipeline {
	id
	iid
}
fragment TestReportSummaryFields on TestReportTotal {
	count
	error
	failed
	skipped
	success
	time
}
fragment TestSuiteSummaryFields on TestSuiteSummary {
	name
	buildIds
	errorCount
	failedCount
	skippedCount
	successCount
	suiteError
	totalCount
	totalTime
}
fragment pageFields on PageInfo {
	hasNextPage
	endCursor
}
`

func getProjectPipelinesTestReportSummary(
	ctx_ context.Context,
	client_ graphql.Client,
	projectPath string,
	updatedAfter *time.Time,
	updatedBefore *time.Time,
	source *string,
	endCursor *string,
) (*getProjectPipelinesTestReportSummaryResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectPipelinesTestReportSummary",
		Query:  getProjectPipelinesTestReportSummary_Operation,
		Variables: &__getProjectPipelinesTestReportSummaryInput{
			ProjectPath:   projectPath,
			UpdatedAfter:  updatedAfter,
			UpdatedBefore: updatedBefore,
			Source:        source,
			EndCursor:     endCursor,
		},
	}
	var err_ error

	var data_ getProjectPipelinesTestReportSummaryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjects.
const getProjects_Operation = `
query getProjects ($ids: [ID!], $updatedAfter: Time, $updatedBefore: Time, $endCursor: String) {
	projects(ids: $ids, after: $endCursor) {
		nodes {
			... ProjectReferenceFields
			namespace {
				... NamespaceReferenceFields
			}
			... ProjectFieldsCore
			pipelines(scope: FINISHED, updatedAfter: $updatedAfter, updatedBefore: $updatedBefore) {
				count
			}
			mergeRequests(updatedAfter: $updatedAfter, updatedBefore: $updatedBefore) {
				count
			}
		}
		pageInfo {
			... pageFields
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment NamespaceReferenceFields on Namespace {
	id
	fullPath
}
fragment ProjectFieldsCore on Project {
	name
	nameWithNamespace
	path
	description
	createdAt
	updatedAt
	lastActivityAt
	statistics {
		buildArtifactsSize
		containerRegistrySize
		lfsObjectsSize
		packagesSize
		pipelineArtifactsSize
		repositorySize
		snippetsSize
		storageSize
		uploadsSize
		wikiSize
		commitCount
	}
	starCount
	forksCount
	archived
	visibility
}
fragment pageFields on PageInfo {
	hasNextPage
	endCursor
}
`

func getProjects(
	ctx_ context.Context,
	client_ graphql.Client,
	ids []string,
	updatedAfter *time.Time,
	updatedBefore *time.Time,
	endCursor *string,
) (*getProjectsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjects",
		Query:  getProjects_Operation,
		Variables: &__getProjectsInput{
			Ids:           ids,
			UpdatedAfter:  updatedAfter,
			UpdatedBefore: updatedBefore,
			EndCursor:     endCursor,
		},
	}
	var err_ error

	var data_ getProjectsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectsMergeRequestNotes.
const getProjectsMergeRequestNotes_Operation = `
query getProjectsMergeRequestNotes ($projectIds: [ID!], $updatedAfter: Time, $updatedBefore: Time, $endCursor: String) {
	projects(ids: $projectIds, after: $endCursor) {
		nodes {
			... ProjectReferenceFields
			mergeRequests(updatedAfter: $updatedAfter, updatedBefore: $updatedBefore) {
				nodes {
					... MergeRequestReferenceFields
					notes(filter: ONLY_ACTIVITY) {
						nodes {
							... MergeRequestNotesFieldsCore
						}
						pageInfo {
							... pageFields
						}
					}
				}
				pageInfo {
					... pageFields
				}
			}
		}
		pageInfo {
			... pageFields
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment MergeRequestReferenceFields on MergeRequest {
	id
	iid
}
fragment MergeRequestNotesFieldsCore on Note {
	id
	createdAt
	updatedAt
	author {
		... UserReferenceFields
	}
	body
	internal
	system
	resolvable
	resolved
	resolvedAt
	resolvedBy {
		... UserReferenceFields
	}
}
fragment pageFields on PageInfo {
	hasNextPage
	endCursor
}
fragment UserReferenceFields on User {
	id
	username
}
`

func getProjectsMergeRequestNotes(
	ctx_ context.Context,
	client_ graphql.Client,
	projectIds []string,
	updatedAfter *time.Time,
	updatedBefore *time.Time,
	endCursor *string,
) (*getProjectsMergeRequestNotesResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectsMergeRequestNotes",
		Query:  getProjectsMergeRequestNotes_Operation,
		Variables: &__getProjectsMergeRequestNotesInput{
			ProjectIds:    projectIds,
			UpdatedAfter:  updatedAfter,
			UpdatedBefore: updatedBefore,
			EndCursor:     endCursor,
		},
	}
	var err_ error

	var data_ getProjectsMergeRequestNotesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectsMergeRequests.
const getProjectsMergeRequests_Operation = `
query getProjectsMergeRequests ($projectIds: [ID!], $updatedAfter: Time, $updatedBefore: Time, $endCursor: String, $_core: Boolean = false, $_extra: Boolean = false, $_participants: Boolean = false) {
	projects(ids: $projectIds, after: $endCursor) {
		nodes {
			... ProjectReferenceFields
			mergeRequests(updatedAfter: $updatedAfter, updatedBefore: $updatedBefore) {
				nodes {
					... MergeRequestReferenceFields
					... MergeRequestFieldsCore @include(if: $_core)
					... MergeRequestFieldsExtra @include(if: $_extra)
					... MergeRequestFieldsParticipants @include(if: $_participants)
				}
				pageInfo {
					... pageFields
				}
			}
		}
		pageInfo {
			... pageFields
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment MergeRequestReferenceFields on MergeRequest {
	id
	iid
}
fragment MergeRequestFieldsCore on MergeRequest {
	createdAt
	updatedAt
	mergedAt
	closedAt
	name
	title
	labels {
		nodes {
			title
		}
	}
	state
	detailedMergeStatus
	mergeError
	approved
	conflicts
	draft
	mergeable
}
fragment MergeRequestFieldsExtra on MergeRequest {
	sourceProjectId
	targetProjectId
	sourceBranch
	targetBranch
	mergeCommitSha
	rebaseCommitSha
	diffRefs {
		baseSha
		headSha
		startSha
	}
	diffStatsSummary {
		additions
		changes
		deletions
		fileCount
	}
	commitCount
	userNotesCount
	milestone {
		id
		iid
		project {
			id
			fullPath
		}
	}
}
fragment MergeRequestFieldsParticipants on MergeRequest {
	author {
		... UserReferenceFields
	}
	assignees {
		nodes {
			... UserReferenceFields
		}
	}
	reviewers {
		nodes {
			... UserReferenceFields
		}
	}
	approvedBy {
		nodes {
			... UserReferenceFields
		}
	}
	mergeUser {
		... UserReferenceFields
	}
}
fragment pageFields on PageInfo {
	hasNextPage
	endCursor
}
fragment UserReferenceFields on User {
	id
	username
}
`

func getProjectsMergeRequests(
	ctx_ context.Context,
	client_ graphql.Client,
	projectIds []string,
	updatedAfter *time.Time,
	updatedBefore *time.Time,
	endCursor *string,
	_core *bool,
	_extra *bool,
	_participants *bool,
) (*getProjectsMergeRequestsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectsMergeRequests",
		Query:  getProjectsMergeRequests_Operation,
		Variables: &__getProjectsMergeRequestsInput{
			ProjectIds:    projectIds,
			UpdatedAfter:  updatedAfter,
			UpdatedBefore: updatedBefore,
			EndCursor:     endCursor,
			Core:          _core,
			Extra:         _extra,
			Participants:  _participants,
		},
	}
	var err_ error

	var data_ getProjectsMergeRequestsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectsPipelines.
const getProjectsPipelines_Operation = `
query getProjectsPipelines ($ids: [ID!], $source: String, $updatedAfter: Time, $updatedBefore: Time, $endCursor: String) {
	projects(ids: $ids, after: $endCursor) {
		nodes {
			... ProjectReferenceFields
			pipelines(scope: FINISHED, source: $source, updatedAfter: $updatedAfter, updatedBefore: $updatedBefore) {
				nodes {
					... PipelineReferenceFields
					... PipelineFieldsCore
				}
				pageInfo {
					... pageFields
				}
			}
		}
		pageInfo {
			... pageFields
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment PipelineReferenceFields on Pipeline {
	id
	iid
}
fragment PipelineFieldsCore on Pipeline {
	name
	ref
	status
	source
	sha(format: LONG)
	committedAt
	createdAt
	updatedAt
	startedAt
	finishedAt
	queuedDuration
	duration
	coverage
	failureReason
	warnings
	yamlErrors
	child
	upstream {
		... PipelineReferenceFields
		project {
			... ProjectReferenceFields
		}
	}
	mergeRequest {
		... MergeRequestReferenceFields
		project {
			... ProjectReferenceFields
		}
	}
	user {
		... UserReferenceFields
	}
}
fragment pageFields on PageInfo {
	hasNextPage
	endCursor
}
fragment MergeRequestReferenceFields on MergeRequest {
	id
	iid
}
fragment UserReferenceFields on User {
	id
	username
}
`

func getProjectsPipelines(
	ctx_ context.Context,
	client_ graphql.Client,
	ids []string,
	source *string,
	updatedAfter *time.Time,
	updatedBefore *time.Time,
	endCursor *string,
) (*getProjectsPipelinesResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectsPipelines",
		Query:  getProjectsPipelines_Operation,
		Variables: &__getProjectsPipelinesInput{
			Ids:           ids,
			Source:        source,
			UpdatedAfter:  updatedAfter,
			UpdatedBefore: updatedBefore,
			EndCursor:     endCursor,
		},
	}
	var err_ error

	var data_ getProjectsPipelinesResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectsPipelinesJobs.
const getProjectsPipelinesJobs_Operation = `
query getProjectsPipelinesJobs ($ids: [ID!], $source: String, $updatedAfter: Time, $updatedBefore: Time, $endCursor: String, $_core: Boolean!, $_extra: Boolean!) {
	projects(ids: $ids, after: $endCursor) {
		nodes {
			... ProjectReferenceFields
			pipelines(scope: FINISHED, source: $source, updatedAfter: $updatedAfter, updatedBefore: $updatedBefore) {
				nodes {
					... PipelineReferenceFields
					jobs {
						nodes {
							... JobReferenceFields
							... JobFieldsCore @include(if: $_core)
							... JobFieldsExtra @include(if: $_extra)
						}
						pageInfo {
							... pageFields
						}
					}
				}
				pageInfo {
					... pageFields
				}
			}
		}
		pageInfo {
			... pageFields
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment PipelineReferenceFields on Pipeline {
	id
	iid
}
fragment JobReferenceFields on CiJob {
	id
}
fragment JobFieldsCore on CiJob {
	name
	refName
	status
	createdAt
	queuedAt
	startedAt
	finishedAt
	erasedAt
	duration
	queuedDuration
	coverage
	allowFailure
	failureMessage
}
fragment JobFieldsExtra on CiJob {
	stage {
		name
	}
	tags
	manualJob
	retryable
	retried
	kind
	downstreamPipeline {
		id
		iid
		project {
			id
			fullPath
		}
	}
	runner {
		id
	}
}
fragment pageFields on PageInfo {
	hasNextPage
	endCursor
}
`

func getProjectsPipelinesJobs(
	ctx_ context.Context,
	client_ graphql.Client,
	ids []string,
	source *string,
	updatedAfter *time.Time,
	updatedBefore *time.Time,
	endCursor *string,
	_core bool,
	_extra bool,
) (*getProjectsPipelinesJobsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectsPipelinesJobs",
		Query:  getProjectsPipelinesJobs_Operation,
		Variables: &__getProjectsPipelinesJobsInput{
			Ids:           ids,
			Source:        source,
			UpdatedAfter:  updatedAfter,
			UpdatedBefore: updatedBefore,
			EndCursor:     endCursor,
			Core:          _core,
			Extra:         _extra,
		},
	}
	var err_ error

	var data_ getProjectsPipelinesJobsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getProjectsPipelinesTestReportSummary.
const getProjectsPipelinesTestReportSummary_Operation = `
query getProjectsPipelinesTestReportSummary ($ids: [ID!], $updatedAfter: Time, $updatedBefore: Time, $source: String, $endCursor: String) {
	projects(ids: $ids, after: $endCursor) {
		nodes {
			... ProjectReferenceFields
			pipelines(scope: FINISHED, source: $source, updatedAfter: $updatedAfter, updatedBefore: $updatedBefore) {
				nodes {
					... PipelineReferenceFields
					testReportSummary {
						total {
							... TestReportSummaryFields
						}
						testSuites {
							nodes {
								... TestSuiteSummaryFields
							}
							pageInfo {
								... pageFields
							}
						}
					}
				}
				pageInfo {
					... pageFields
				}
			}
		}
		pageInfo {
			... pageFields
		}
	}
}
fragment ProjectReferenceFields on Project {
	id
	fullPath
}
fragment PipelineReferenceFields on Pipeline {
	id
	iid
}
fragment TestReportSummaryFields on TestReportTotal {
	count
	error
	failed
	skipped
	success
	time
}
fragment TestSuiteSummaryFields on TestSuiteSummary {
	name
	buildIds
	errorCount
	failedCount
	skippedCount
	successCount
	suiteError
	totalCount
	totalTime
}
fragment pageFields on PageInfo {
	hasNextPage
	endCursor
}
`

func getProjectsPipelinesTestReportSummary(
	ctx_ context.Context,
	client_ graphql.Client,
	ids []string,
	updatedAfter *time.Time,
	updatedBefore *time.Time,
	source *string,
	endCursor *string,
) (*getProjectsPipelinesTestReportSummaryResponse, error) {
	req_ := &graphql.Request{
		OpName: "getProjectsPipelinesTestReportSummary",
		Query:  getProjectsPipelinesTestReportSummary_Operation,
		Variables: &__getProjectsPipelinesTestReportSummaryInput{
			Ids:           ids,
			UpdatedAfter:  updatedAfter,
			UpdatedBefore: updatedBefore,
			Source:        source,
			EndCursor:     endCursor,
		},
	}
	var err_ error

	var data_ getProjectsPipelinesTestReportSummaryResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
