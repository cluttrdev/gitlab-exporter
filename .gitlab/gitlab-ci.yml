stages:
  - lint
  - build
  - test
  - release

variables:
  CACHE_DIR: ${CI_PROJECT_DIR}/.cache
  GOPATH: ${CI_PROJECT_DIR}/.go
  GOCACHE: ${CACHE_DIR}/go-build
  GOMAXPROCS: "8"
  GOVERSION: "1.24"

  RUNNER_TAG: "self-hosted"

workflow:
  rules:
    - if: $CI_COMMIT_TAG != null
      variables:
        RUNNER_TAG: gitlab-org
    - when: always

default:
  image: golang:${GOVERSION}
  before_script:
    - |
      # Print some job properties
      printf 'PROPERTY_%s="%s"\n' "ci_runner_id" "${CI_RUNNER_ID}"
      printf 'PROPERTY_%s="%s"\n' "ci_runner_version" "${CI_RUNNER_VERSION}"
      printf 'PROPERTY_%s="%s"\n' "ci_runner_revision" "${CI_RUNNER_REVISION}"
      printf 'PROPERTY_%s="%s"\n' "ci_runner_hostname" "${HOSTNAME}"

download:
  stage: .pre
  tags: [ $RUNNER_TAG ]
  script:
    - |
      start=$(date +%s%N)
      go mod download
      end=$(date +%s%N)
      duration=$(printf %.6f "$(( end-start ))e-9")
      timestamp=$(( end/1000000 ))
      module=$(head -n 1 go.mod | cut -d ' ' -f 2)
      echo "METRIC_go_mod_download_time{module=\"${module}\", commit_ref=\"${CI_COMMIT_REF_NAME}\"} ${duration} ${timestamp}"
  cache: &cache-defaults
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ${CACHE_DIR}
      - ${GOPATH}
    policy: pull-push

lint:
  stage: lint
  tags: [ $RUNNER_TAG ]
  cache:
    - <<: *cache-defaults
  variables:
    GOLANGCI_LINT_VERSION: v1.64.6
    GOLANGCI_LINT_CACHE: ${CACHE_DIR}/golangci-lint
  before_script:
    - !reference [default, before_script]
    - |
      # Download golangci-lint binary
      echo -e "\e[0Ksection_start:$(date +%s):script_step_before\r\e[0KRunning script_step_before"
      curl -sSfL https://github.com/golangci/golangci-lint/releases/download/${GOLANGCI_LINT_VERSION}/golangci-lint-${GOLANGCI_LINT_VERSION#v}-linux-amd64.tar.gz -o /tmp/golangci-lint.tar.gz
      mkdir -p ${GOPATH}/bin
      tar -C ${GOPATH}/bin/ -zxof /tmp/golangci-lint.tar.gz --strip-components=1 golangci-lint-${GOLANGCI_LINT_VERSION#v}-linux-amd64/golangci-lint
      echo -e "\e[0Ksection_end:$(date +%s):script_step_before\r\e[0K"
  script:
    - |
      # Print some job properties
      printf 'PROPERTY_%s="%s"\n' "golangci_lint_version" "${GOLANGCI_LINT_VERSION}"
    - ${GOPATH}/bin/golangci-lint run --verbose ./...
  allow_failure: true

build:
  stage: build
  tags: [ $RUNNER_TAG ]
  cache:
    - <<: *cache-defaults
  script:
    - |
      start=$(date +%s%N)
      make build
      end=$(date +%s%N)
      duration=$(printf %.6f "$(( end-start ))e-9")
      timestamp=$(( end/1000000 ))
      echo "METRIC_go_build_time{package=\"$(go list .)\"} ${duration} ${timestamp}"

test:
  stage: test
  tags: [ $RUNNER_TAG ]
  cache:
    - <<: *cache-defaults
  variables:
    GOTESTSUM_VERSION: v1.12.0
    GOCOVER_COBERTURA_VERSION: v1.3.0
  before_script:
    - !reference [default, before_script]
    - |
      # Print some job properties
      printf 'PROPERTY_%s="%s"\n' "gotestsum_version" "${GOTESTSUM_VERSION}"
      printf 'PROPERTY_%s="%s"\n' "gocover_cobertura_version" "${GOCOVER_COBERTURA_VERSION}"
    - echo -e "\e[0Ksection_start:$(date +%s):script_step_before\r\e[0KRunning script_step_before"
    - |
      # Download gotestsum binary
      curl -sSfL https://github.com/gotestyourself/gotestsum/releases/download/${GOTESTSUM_VERSION}/gotestsum_${GOTESTSUM_VERSION#v}_linux_amd64.tar.gz -o /tmp/gotestsum.tar.gz
      mkdir -p ${GOPATH}/bin
      tar -C ${GOPATH}/bin/ -zxof /tmp/gotestsum.tar.gz gotestsum
    - |
      # Install gocover-cobertura
      go install github.com/boumenot/gocover-cobertura@${GOCOVER_COBERTURA_VERSION}
    - echo -e "\e[0Ksection_end:$(date +%s):script_step_before\r\e[0K"
  script:
    - |
      # Run tests
      echo -e "\e[0Ksection_start:$(date +%s):script_step_run\r\e[0KRunning script_step_run"
      ${GOPATH}/bin/gotestsum \
        --junitfile=junit.xml --format=testname \
        -- \
        -coverprofile=cover.out -covermode=atomic \
        ./...
      echo -e "\e[0Ksection_end:$(date +%s):script_step_run\r\e[0K"
  after_script:
    - echo -e "\e[0Ksection_start:$(date +%s):script_step_after\r\e[0KRunning script_step_after"
    - ${GOPATH}/bin/gocover-cobertura < cover.out > cobertura-coverage.xml
    - echo -e "\e[0Ksection_end:$(date +%s):script_step_after\r\e[0K"
  artifacts:
    when: always
    paths:
      - junit.xml
      - cobertura-coverage.xml
    reports:
      junit: junit.xml
      coverage_report:
        coverage_format: cobertura
        path: cobertura-coverage.xml

release:
  stage: release
  tags: [ $RUNNER_TAG ]
  rules:
    - if: $CI_COMMIT_TAG != null
  cache:
    - <<: *cache-defaults
  variables:
    ARCHIVER_VERSION: v3.5.0
  before_script:
    - !reference [default, before_script]
    - |
      # Print some job properties
      printf 'PROPERTY_%s="%s"\n' "archiver_version" "${ARCHIVER_VERSION}"
    - |
      # Download archiver binary (for windows .zip support)
      curl -sSL --fail-with-body https://github.com/mholt/archiver/releases/download/${ARCHIVER_VERSION}/arc_${ARCHIVER_VERSION#v}_linux_amd64 -o /tmp/arc
      mkdir -p ${GOPATH}/bin
      install -t ${GOPATH}/bin /tmp/arc
  script:
    - .gitlab/release.sh

release-sync:
  stage: release
  tags: [ $RUNNER_TAG ]
  rules:
    - if: $CI_COMMIT_TAG != null
  needs:
    - release
  variables:
    GITHUB_OWNER: cluttrdev
    GITHUB_REPO: gitlab-exporter
  script:
    - | # Trigger GitHub release sync workflow
      curl \
        -sSL --fail-with-body \
        --header "Accept: application/vnd.github.v3+json" \
        --header "Authorization: Bearer ${GITHUB_TOKEN}" \
        --data "{\"ref\":\"${CI_COMMIT_TAG}\"}" \
        "https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/actions/workflows/release.yml/dispatches"

release-image:
  stage: release
  tags: [ $RUNNER_TAG ]
  rules:
    - if: $CI_COMMIT_TAG != null
  needs:
    - release
  image: docker:27.3.1
  services:
    - name: docker:27.3.1-dind
      alias: docker
  variables:
    IMAGE_NAME: gitlab-exporter
    IMAGE_TAG: $CI_COMMIT_TAG
  script:
    - | # Build image
      docker build \
        --file ${CI_PROJECT_DIR}/Dockerfile \
        --build-arg GOVERSION \
        --build-arg VERSION="${CI_COMMIT_TAG}" \
        --tag "${IMAGE_NAME}:${IMAGE_TAG}" \
        ${CI_PROJECT_DIR}
    - | # Push to GitLab container registry
      docker tag "${IMAGE_NAME}:${IMAGE_TAG}" "${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
      docker tag "${IMAGE_NAME}:${IMAGE_TAG}" "${CI_REGISTRY_IMAGE}:latest"
      echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" --username "$CI_REGISTRY_USER" --password-stdin
      docker push "${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
      docker push "${CI_REGISTRY_IMAGE}:latest"
    - | # Push to GitHub container registry
      CI_REGISTRY=ghcr.io
      CI_REGISTRY_IMAGE=ghcr.io/cluttrdev/${IMAGE_NAME}
      CI_REGISTRY_USER=cluttrdev
      CI_REGISTRY_PASSWORD=${GITHUB_TOKEN}
      docker tag "${IMAGE_NAME}:${IMAGE_TAG}" "${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
      docker tag "${IMAGE_NAME}:${IMAGE_TAG}" "${CI_REGISTRY_IMAGE}:latest"
      echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" --username "$CI_REGISTRY_USER" --password-stdin
      docker push "${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
      docker push "${CI_REGISTRY_IMAGE}:latest"

release-chart:
  stage: release
  tags: [ $RUNNER_TAG ]
  rules:
    - if: $CI_COMMIT_TAG != null
      changes:
        - deploy/helm/gitlab-exporter/Chart.yaml
  needs:
    - release-image
  image: quay.io/helmpack/chart-testing:v3.12.0
  variables:
    HELM_REGISTRY: registry.gitlab.com
    HELM_REGISTRY_PROJECT: gitlab-exporter/helm-charts
    # HELM_REGISTRY_USER:
    # HELM_REGISTRY_PASSWORD:
    HELM_CHART_DIR: deploy/helm/gitlab-exporter
  before_script:
    - !reference [default, before_script]
    - echo "${HELM_REGISTRY_PASSWORD}" | helm registry login ${HELM_REGISTRY} --username ${HELM_REGISTRY_USER} --password-stdin
  script:
    - helm package "${HELM_CHART_DIR}" --destination .charts
    - helm push .charts/*.tgz oci://${HELM_REGISTRY}/${HELM_REGISTRY_PROJECT}
  artifacts:
    paths:
      - .charts/*.tgz
