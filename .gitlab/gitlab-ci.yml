stages:
  - lint
  - build
  - test

variables:
  CACHE_DIR: ${CI_PROJECT_DIR}/.cache
  GOPATH: ${CI_PROJECT_DIR}/.go
  GOCACHE: ${CACHE_DIR}/go-build
  GOMAXPROCS: "8"
  GOVERSION: "1.22"

default:
  image: golang:${GOVERSION}
  tags: [ $GITLAB_CI_DEFAULT_TAGS ]

ci-image:
  stage: .pre
  rules:
    - when: manual
  allow_failure: true
  image: docker:latest
  services:
    - name: docker:dind
      alias: docker
  variables:
    GOVERSION: 1.22
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
  script:
    - | # Set up image name and tag
      export IMAGE=${CI_REGISTRY_IMAGE}/golang-ci
      export TAG=$(TZ=UTC git show --no-patch --format='%cd' --date='format-local:%Y%m%d%H%M%S' $CI_COMMIT_SHA)-${CI_COMMIT_SHA::12}
    - | # Build image
      docker build \
        --file .gitlab/images/golang-ci/Dockerfile \
        --build-arg GOVERSION \
        --tag "${IMAGE}:${TAG}" \
        .gitlab/images/golang-ci/
    - | # Push image
      docker push ${IMAGE}:${TAG}

download:
  stage: .pre
  script:
    - |
      start=$(date +%s%N)
      go mod download
      end=$(date +%s%N)
      duration=$(printf %.6f "$(( end-start ))e-9")
      timestamp=$(( end/1000000 ))
      module=$(head -n 1 go.mod | cut -d ' ' -f 2)
      echo "METRIC_go_mod_download_time{module=\"${module}\"} ${duration} ${timestamp}"
  cache: &cache-defaults
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ${CACHE_DIR}
      - ${GOPATH}
    policy: pull-push

lint:
  stage: lint
  image: docker.io/golangci/golangci-lint:latest
  cache:
    - <<: *cache-defaults
  variables:
    GOLANGCI_LINT_CACHE: ${CACHE_DIR}/golangci-lint
  script:
    - golangci-lint run --verbose ./...
  allow_failure: true

build:
  stage: build
  cache:
    - <<: *cache-defaults
  script:
    - |
      start=$(date +%s%N)
      go build .
      end=$(date +%s%N)
      duration=$(printf %.6f "$(( end-start ))e-9")
      timestamp=$(( end/1000000 ))
      echo "METRIC_go_build_time{package=\"$(go list .)\"} ${duration} ${timestamp}"

test:
  stage: test
  cache:
    - <<: *cache-defaults
  script:
    - |
      # Start script_step_before section
      echo -e "\e[0Ksection_start:$(date +%s):script_step_before\r\e[0KRunning script_step_before"
    - go install gotest.tools/gotestsum@latest
    - |
      # End script_step_before section
      echo -e "\e[0Ksection_end:$(date +%s):script_step_before\r\e[0K"

    - |
      # Start script_step_run section
      echo -e "\e[0Ksection_start:$(date +%s):script_step_run\r\e[0KRunning script_step_run"
    - ${GOPATH}/bin/gotestsum --junitfile report.xml --format testname ./test/...
    - |
      # End script_step_run section
      echo -e "\e[0Ksection_end:$(date +%s):script_step_run\r\e[0K"

    - |
      # Start script_step_after section
      echo -e "\e[0Ksection_start:$(date +%s):script_step_after\r\e[0KRunning script_step_after"
    - go run ./tools/junitmetrics ./report.xml
    - |
      # End script_step_after section
      echo -e "\e[0Ksection_end:$(date +%s):script_step_after\r\e[0K"
  artifacts:
    when: always
    reports:
      junit: report.xml
